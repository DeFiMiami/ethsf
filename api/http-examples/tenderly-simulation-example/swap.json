{
  "transaction": {
    "hash": "0x44e09cd55b80a9fb4264b111ab68ea19947e7e340461cbe9c97df3ba8b026497",
    "block_hash": "",
    "block_number": 15899626,
    "from": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
    "gas": 195664,
    "gas_price": 22109993961,
    "gas_fee_cap": 0,
    "gas_tip_cap": 0,
    "cumulative_gas_used": 0,
    "gas_used": 121004,
    "effective_gas_price": 0,
    "input": "0x5ae401dc000000000000000000000000000000000000000000000000000000006365966300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000020473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "nonce": 12,
    "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
    "index": 0,
    "value": "0x5af3107a4000",
    "access_list": null,
    "status": true,
    "addresses": [
      "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
      "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
      "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
      "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
      "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
      "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
    ],
    "contract_ids": [
      "eth:1:0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
      "eth:1:0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
      "eth:1:0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
      "eth:1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
      "eth:1:0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
      "eth:1:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
    ],
    "network_id": "1",
    "timestamp": "2022-11-04T22:25:56Z",
    "function_selector": "",
    "l1_block_number": 0,
    "l1_timestamp": 0,
    "transaction_info": {
      "contract_id": "eth:1:0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
      "block_number": 15899627,
      "transaction_id": "0x44e09cd55b80a9fb4264b111ab68ea19947e7e340461cbe9c97df3ba8b026497",
      "contract_address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
      "method": "multicall0",
      "parameters": null,
      "intrinsic_gas": 23712,
      "refund_gas": 19900,
      "call_trace": {
        "hash": "0x44e09cd55b80a9fb4264b111ab68ea19947e7e340461cbe9c97df3ba8b026497",
        "contract_name": "SwapRouter02",
        "function_name": "multicall0",
        "function_pc": 366,
        "function_op": "JUMPDEST",
        "function_file_index": 42,
        "function_code_start": 444,
        "function_line_number": 15,
        "function_code_length": 343,
        "absolute_position": 18,
        "caller_pc": 0,
        "caller_op": "CALL",
        "call_type": "CALL",
        "from": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
        "from_balance": "70004889369065157",
        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "to_balance": "0",
        "value": "100000000000000",
        "caller": {
          "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
          "balance": "65578759510680053"
        },
        "block_timestamp": "0001-01-01T00:00:00Z",
        "gas": 171952,
        "gas_used": 117192,
        "intrinsic_gas": 23712,
        "refund_gas": 19900,
        "input": "0x5ae401dc000000000000000000000000000000000000000000000000000000006365966300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000020473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "decoded_input": [
          {
            "soltype": {
              "name": "deadline",
              "type": "uint256",
              "storage_location": "default",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
              "indexed": false,
              "simple_type": {
                "type": "uint"
              }
            },
            "value": "1667602019"
          },
          {
            "soltype": {
              "name": "data",
              "type": "bytes[]",
              "storage_location": "default",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
              "indexed": false,
              "simple_type": {
                "type": "slice",
                "nested_type": {
                  "type": "bytes"
                }
              }
            },
            "value": [
              "0x04e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000204730000000000000000000000000000000000000000000000000000000000000000"
            ]
          },
          {
            "soltype": {
              "name": "deadline",
              "type": "uint256",
              "storage_location": "default",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
              "indexed": false,
              "simple_type": {
                "type": "uint"
              }
            },
            "value": "1667602019"
          },
          {
            "soltype": {
              "name": "data",
              "type": "bytes[]",
              "storage_location": "default",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
              "indexed": false,
              "simple_type": {
                "type": "slice",
                "nested_type": {
                  "type": "bytes"
                }
              }
            },
            "value": [
              "0x04e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000204730000000000000000000000000000000000000000000000000000000000000000"
            ]
          }
        ],
        "balance_diff": [
          {
            "address": "0x0000000000000000000000000000000000000000",
            "original": "11497872037908024053364",
            "dirty": "11497874713305733189204",
            "is_miner": true
          },
          {
            "address": "0x29Ff2e635634A3C36932CAeB45b1a8E9cCDB24B2",
            "original": "70004889369065157",
            "dirty": "67229491659808313",
            "is_miner": false
          },
          {
            "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "original": "3925741668255276763639116",
            "dirty": "3925741668355276763639116",
            "is_miner": false
          }
        ],
        "nonce_diff": [
          {
            "address": "0x29Ff2e635634A3C36932CAeB45b1a8E9cCDB24B2",
            "original": "12",
            "dirty": "13"
          }
        ],
        "state_diff": [
          {
            "soltype": null,
            "original": null,
            "dirty": null,
            "raw": [
              {
                "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "original": "0x00010002d002d002520315f9000000000000602865f08621965d30b1696677f2",
                "dirty": "0x00010002d002d002520315f9000000000000602865f08d83ae95a461e8cfcc40"
              }
            ]
          },
          {
            "soltype": {
              "name": "feeGrowthGlobal1X128",
              "type": "uint256",
              "storage_location": "storage",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000002",
              "indexed": false,
              "simple_type": {
                "type": "uint"
              }
            },
            "original": "934833668926931436246160799278959650918334",
            "dirty": "934833668927006348063588697809325671623032",
            "raw": [
              {
                "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                "original": "0x00000000000000000000000000000abb3aaf99cc75eb08c85f1678189aafcfbe",
                "dirty": "0x00000000000000000000000000000abb3aaf99cd67f8a32861335612c0aca978"
              }
            ]
          },
          {
            "soltype": {
              "name": "balances",
              "type": "mapping (address => uint256)",
              "storage_location": "storage",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000009",
              "indexed": false
            },
            "original": {
              "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2": "165223",
              "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "109028178195141"
            },
            "dirty": {
              "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2": "330165",
              "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "109028178030199"
            },
            "raw": [
              {
                "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                "key": "0x1f21a62c4538bacf2aabeca410f0fe63151869f172e03c0e00357ba26a341eff",
                "original": "0x0000000000000000000000000000000000000000000000000000632919d4f2c5",
                "dirty": "0x0000000000000000000000000000000000000000000000000000632919d26e77"
              },
              {
                "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                "key": "0x76592d60a104d25be15608e2710fb093e8780506b08b20e696087748044b66cf",
                "original": "0x0000000000000000000000000000000000000000000000000000000000028567",
                "dirty": "0x00000000000000000000000000000000000000000000000000000000000509b5"
              }
            ]
          },
          {
            "soltype": {
              "name": "balanceOf",
              "type": "mapping (address => uint256)",
              "storage_location": "storage",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000003",
              "indexed": false
            },
            "original": {
              "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "49860627167592373406717"
            },
            "dirty": {
              "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "49860627267592373406717"
            },
            "raw": [
              {
                "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                "key": "0x390f6178407c9b8e95802b8659e6df8e34c1e3d4f8d6a49e6132bbcdd937b63a",
                "original": "0x000000000000000000000000000000000000000000000a8ef3342c00269dcbfd",
                "dirty": "0x000000000000000000000000000000000000000000000a8ef33486f337180bfd"
              }
            ]
          }
        ],
        "logs": [
          {
            "name": "Transfer",
            "anonymous": false,
            "inputs": [
              {
                "soltype": {
                  "name": "from",
                  "type": "address",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": true,
                  "simple_type": {
                    "type": "address"
                  }
                },
                "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
              },
              {
                "soltype": {
                  "name": "to",
                  "type": "address",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": true,
                  "simple_type": {
                    "type": "address"
                  }
                },
                "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
              }
            ],
            "raw": {
              "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "topics": [
                "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                "0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                "0x00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
              ],
              "data": "0x000000000000000000000000000000000000000000000000000000000002844e"
            }
          },
          {
            "name": "Deposit",
            "anonymous": false,
            "inputs": [
              {
                "soltype": {
                  "name": "dst",
                  "type": "address",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": true,
                  "simple_type": {
                    "type": "address"
                  }
                },
                "value": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45"
              },
              {
                "soltype": {
                  "name": "wad",
                  "type": "uint256",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "uint"
                  }
                },
                "value": "100000000000000"
              }
            ],
            "raw": {
              "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
              "topics": [
                "0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c",
                "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45"
              ],
              "data": "0x00000000000000000000000000000000000000000000000000005af3107a4000"
            }
          },
          {
            "name": "Transfer",
            "anonymous": false,
            "inputs": [
              {
                "soltype": {
                  "name": "from",
                  "type": "address",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": true,
                  "simple_type": {
                    "type": "address"
                  }
                },
                "value": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45"
              },
              {
                "soltype": {
                  "name": "to",
                  "type": "address",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": true,
                  "simple_type": {
                    "type": "address"
                  }
                },
                "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
              }
            ],
            "raw": {
              "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
              "topics": [
                "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                "0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
              ],
              "data": "0x00000000000000000000000000000000000000000000000000005af3107a4000"
            }
          },
          {
            "name": "Swap",
            "anonymous": false,
            "inputs": [
              {
                "soltype": {
                  "name": "sender",
                  "type": "address",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": true,
                  "simple_type": {
                    "type": "address"
                  }
                },
                "value": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45"
              },
              {
                "soltype": {
                  "name": "recipient",
                  "type": "address",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": true,
                  "simple_type": {
                    "type": "address"
                  }
                },
                "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
              },
              {
                "soltype": {
                  "name": "amount0",
                  "type": "int256",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "int"
                  }
                },
                "value": "-164942"
              },
              {
                "soltype": {
                  "name": "amount1",
                  "type": "int256",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "int"
                  }
                },
                "value": "100000000000000"
              },
              {
                "soltype": {
                  "name": "sqrtPriceX96",
                  "type": "uint160",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "uint"
                  }
                },
                "value": "1950311997247602375265771494296640"
              },
              {
                "soltype": {
                  "name": "liquidity",
                  "type": "uint128",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "uint"
                  }
                },
                "value": "227121953921659287429"
              },
              {
                "soltype": {
                  "name": "tick",
                  "type": "int24",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "int"
                  }
                },
                "value": "202233"
              }
            ],
            "raw": {
              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
              "topics": [
                "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67",
                "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                "0x00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
              ],
              "data": "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7bb200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000602865f08d83ae95a461e8cfcc4000000000000000000000000000000000000000000000000c4ff345bf8123b78500000000000000000000000000000000000000000000000000000000000315f9"
            }
          }
        ],
        "output": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000002844e",
        "decoded_output": [
          {
            "soltype": {
              "name": "",
              "type": "bytes[]",
              "storage_location": "default",
              "components": null,
              "offset": 0,
              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
              "indexed": false,
              "simple_type": {
                "type": "slice",
                "nested_type": {
                  "type": "bytes"
                }
              }
            },
            "value": [
              "0x000000000000000000000000000000000000000000000000000000000002844e"
            ]
          }
        ],
        "network_id": "1",
        "calls": [
          {
            "hash": "",
            "contract_name": "SwapRouter02",
            "function_name": "_blockTimestamp",
            "function_pc": 13260,
            "function_op": "JUMPDEST",
            "function_file_index": 19,
            "function_code_start": 319,
            "function_line_number": 9,
            "function_code_length": 106,
            "absolute_position": 155,
            "caller_pc": 5575,
            "caller_op": "JUMP",
            "caller_file_index": 24,
            "caller_line_number": 8,
            "caller_code_start": 223,
            "caller_code_length": 17,
            "call_type": "JUMPDEST",
            "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
            "from_balance": null,
            "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
            "to_balance": null,
            "value": null,
            "caller": {
              "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
              "balance": "65578759510680053"
            },
            "block_timestamp": "0001-01-01T00:00:00Z",
            "gas": 171402,
            "gas_used": 14,
            "input": "0x",
            "output": "0x",
            "decoded_output": [
              {
                "soltype": {
                  "name": "",
                  "type": "uint256",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "uint"
                  }
                },
                "value": "1667600756"
              }
            ],
            "network_id": "",
            "calls": null
          },
          {
            "hash": "",
            "contract_name": "SwapRouter02",
            "function_name": "exactInputSingle",
            "function_pc": 1716,
            "function_op": "JUMPDEST",
            "function_file_index": 44,
            "function_code_start": 4287,
            "function_line_number": 106,
            "function_code_length": 907,
            "absolute_position": 7999,
            "caller_pc": 6737,
            "caller_op": "DELEGATECALL",
            "caller_file_index": 20,
            "caller_line_number": 14,
            "caller_code_start": 555,
            "caller_code_length": 35,
            "call_type": "DELEGATECALL",
            "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
            "from_balance": "100000000000000",
            "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
            "to_balance": "100000000000000",
            "value": null,
            "caller": {
              "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
              "balance": "65578759510680053"
            },
            "block_timestamp": "0001-01-01T00:00:00Z",
            "gas": 167978,
            "gas_used": 115014,
            "refund_gas": 2666,
            "input": "0x04e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000204730000000000000000000000000000000000000000000000000000000000000000",
            "decoded_input": [
              {
                "soltype": {
                  "name": "params",
                  "type": "tuple",
                  "storage_location": "memory",
                  "components": [
                    {
                      "name": "tokenIn",
                      "type": "address",
                      "storage_location": "memory",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "address"
                      }
                    },
                    {
                      "name": "tokenOut",
                      "type": "address",
                      "storage_location": "memory",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "address"
                      }
                    },
                    {
                      "name": "fee",
                      "type": "uint24",
                      "storage_location": "memory",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    },
                    {
                      "name": "recipient",
                      "type": "address",
                      "storage_location": "memory",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "address"
                      }
                    },
                    {
                      "name": "amountIn",
                      "type": "uint256",
                      "storage_location": "memory",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    },
                    {
                      "name": "amountOutMinimum",
                      "type": "uint256",
                      "storage_location": "memory",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    },
                    {
                      "name": "sqrtPriceLimitX96",
                      "type": "uint160",
                      "storage_location": "memory",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    }
                  ],
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false
                },
                "value": {
                  "tokenIn": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                  "tokenOut": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                  "fee": "500",
                  "recipient": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                  "amountIn": "100000000000000",
                  "amountOutMinimum": "132211",
                  "sqrtPriceLimitX96": "0"
                }
              }
            ],
            "output": "0x000000000000000000000000000000000000000000000000000000000002844e",
            "decoded_output": [
              {
                "soltype": {
                  "name": "amountOut",
                  "type": "uint256",
                  "storage_location": "default",
                  "components": null,
                  "offset": 0,
                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "indexed": false,
                  "simple_type": {
                    "type": "uint"
                  }
                },
                "value": "164942"
              }
            ],
            "network_id": "",
            "calls": [
              {
                "hash": "",
                "contract_name": "SwapRouter02",
                "function_name": "exactInputInternal",
                "function_pc": 9694,
                "function_op": "JUMPDEST",
                "function_file_index": 44,
                "function_code_start": 3240,
                "function_line_number": 77,
                "function_code_length": 1007,
                "function_variables": [
                  {
                    "soltype": {
                      "name": "tokenIn",
                      "type": "address",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "address"
                      }
                    },
                    "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                  },
                  {
                    "soltype": {
                      "name": "tokenOut",
                      "type": "address",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "address"
                      }
                    },
                    "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                  },
                  {
                    "soltype": {
                      "name": "fee",
                      "type": "uint24",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    },
                    "value": "1072762841456390271104015014619925727908479502529670939124"
                  },
                  {
                    "soltype": {
                      "name": "zeroForOne",
                      "type": "bool",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "bool"
                      }
                    },
                    "value": false
                  }
                ],
                "absolute_position": 713,
                "caller_pc": 2028,
                "caller_op": "JUMP",
                "caller_file_index": 44,
                "caller_line_number": 119,
                "caller_code_start": 4785,
                "caller_code_length": 324,
                "call_type": "JUMPDEST",
                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                "from_balance": null,
                "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                "to_balance": null,
                "value": null,
                "caller": {
                  "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                  "balance": "65578759510680053"
                },
                "block_timestamp": "0001-01-01T00:00:00Z",
                "gas": 166671,
                "gas_used": 113576,
                "input": "0x",
                "decoded_input": [
                  {
                    "soltype": {
                      "name": "amountIn",
                      "type": "uint256",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    },
                    "value": "100000000000000"
                  },
                  {
                    "soltype": {
                      "name": "recipient",
                      "type": "address",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "address"
                      }
                    },
                    "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                  },
                  {
                    "soltype": {
                      "name": "sqrtPriceLimitX96",
                      "type": "uint160",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    },
                    "value": "0"
                  },
                  {
                    "soltype": {
                      "name": "data",
                      "type": "tuple",
                      "storage_location": "memory",
                      "components": [
                        {
                          "name": "path",
                          "type": "bytes",
                          "storage_location": "memory",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "bytes"
                          }
                        },
                        {
                          "name": "payer",
                          "type": "address",
                          "storage_location": "memory",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "address"
                          }
                        }
                      ],
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false
                    },
                    "value": {
                      "path": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                      "payer": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                    }
                  }
                ],
                "output": "0x",
                "decoded_output": [
                  {
                    "soltype": {
                      "name": "amountOut",
                      "type": "uint256",
                      "storage_location": "default",
                      "components": null,
                      "offset": 0,
                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "indexed": false,
                      "simple_type": {
                        "type": "uint"
                      }
                    },
                    "value": "164942"
                  }
                ],
                "network_id": "",
                "calls": [
                  {
                    "hash": "",
                    "contract_name": "SwapRouter02",
                    "function_name": "decodeFirstPool",
                    "function_pc": 13300,
                    "function_op": "JUMPDEST",
                    "function_file_index": 39,
                    "function_code_start": 1779,
                    "function_line_number": 42,
                    "function_code_length": 314,
                    "absolute_position": 743,
                    "caller_pc": 9787,
                    "caller_op": "JUMP",
                    "caller_file_index": 44,
                    "caller_line_number": 87,
                    "caller_code_start": 3697,
                    "caller_code_length": 27,
                    "call_type": "JUMPDEST",
                    "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                    "from_balance": null,
                    "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                    "to_balance": null,
                    "value": null,
                    "caller": {
                      "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                      "balance": "65578759510680053"
                    },
                    "block_timestamp": "0001-01-01T00:00:00Z",
                    "gas": 166568,
                    "gas_used": 420,
                    "input": "0x",
                    "decoded_input": [
                      {
                        "soltype": {
                          "name": "path",
                          "type": "bytes",
                          "storage_location": "memory",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "bytes"
                          }
                        },
                        "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                      }
                    ],
                    "output": "0x",
                    "decoded_output": [
                      {
                        "soltype": {
                          "name": "tokenA",
                          "type": "address",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "address"
                          }
                        },
                        "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                      },
                      {
                        "soltype": {
                          "name": "tokenB",
                          "type": "address",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "address"
                          }
                        },
                        "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                      },
                      {
                        "soltype": {
                          "name": "fee",
                          "type": "uint24",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "uint"
                          }
                        },
                        "value": "1072762841456390271104015014619925727908479502529670939124"
                      }
                    ],
                    "network_id": "",
                    "calls": [
                      {
                        "hash": "",
                        "contract_name": "SwapRouter02",
                        "function_name": "toAddress",
                        "function_pc": 16509,
                        "function_op": "JUMPDEST",
                        "function_file_index": 36,
                        "function_code_start": 3412,
                        "function_line_number": 78,
                        "function_code_length": 416,
                        "absolute_position": 752,
                        "caller_pc": 13313,
                        "caller_op": "JUMP",
                        "caller_file_index": 39,
                        "caller_line_number": 51,
                        "caller_code_start": 1983,
                        "caller_code_length": 17,
                        "call_type": "JUMPDEST",
                        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "from_balance": null,
                        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                          "balance": "65578759510680053"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 166538,
                        "gas_used": 107,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "_bytes",
                              "type": "bytes",
                              "storage_location": "memory",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "bytes"
                              }
                            },
                            "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                          },
                          {
                            "soltype": {
                              "name": "_start",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "0"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "SwapRouter02",
                        "function_name": "toUint24",
                        "function_pc": 16765,
                        "function_op": "JUMPDEST",
                        "function_file_index": 36,
                        "function_code_start": 3834,
                        "function_line_number": 90,
                        "function_code_length": 365,
                        "absolute_position": 791,
                        "caller_pc": 13326,
                        "caller_op": "JUMP",
                        "caller_file_index": 39,
                        "caller_line_number": 52,
                        "caller_code_start": 2016,
                        "caller_code_length": 24,
                        "call_type": "JUMPDEST",
                        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "from_balance": null,
                        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                          "balance": "65578759510680053"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 166405,
                        "gas_used": 96,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "_bytes",
                              "type": "bytes",
                              "storage_location": "memory",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "bytes"
                              }
                            },
                            "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                          },
                          {
                            "soltype": {
                              "name": "_start",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "20"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "",
                              "type": "uint24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "1072762841456390271104015014619925727908479502529670939124"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "SwapRouter02",
                        "function_name": "toAddress",
                        "function_pc": 16509,
                        "function_op": "JUMPDEST",
                        "function_file_index": 36,
                        "function_code_start": 3412,
                        "function_line_number": 78,
                        "function_code_length": 416,
                        "absolute_position": 827,
                        "caller_pc": 13339,
                        "caller_op": "JUMP",
                        "caller_file_index": 39,
                        "caller_line_number": 53,
                        "caller_code_start": 2059,
                        "caller_code_length": 27,
                        "call_type": "JUMPDEST",
                        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "from_balance": null,
                        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                          "balance": "65578759510680053"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 166283,
                        "gas_used": 107,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "_bytes",
                              "type": "bytes",
                              "storage_location": "memory",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "bytes"
                              }
                            },
                            "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                          },
                          {
                            "soltype": {
                              "name": "_start",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "23"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      }
                    ]
                  },
                  {
                    "hash": "",
                    "contract_name": "SwapRouter02",
                    "function_name": "getPool",
                    "function_pc": 15572,
                    "function_op": "JUMPDEST",
                    "function_file_index": 44,
                    "function_code_start": 1487,
                    "function_line_number": 32,
                    "function_code_length": 249,
                    "absolute_position": 891,
                    "caller_pc": 9836,
                    "caller_op": "JUMP",
                    "caller_file_index": 44,
                    "caller_line_number": 92,
                    "caller_code_start": 3829,
                    "caller_code_length": 31,
                    "call_type": "JUMPDEST",
                    "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                    "from_balance": null,
                    "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                    "to_balance": null,
                    "value": null,
                    "caller": {
                      "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                      "balance": "65578759510680053"
                    },
                    "block_timestamp": "0001-01-01T00:00:00Z",
                    "gas": 166076,
                    "gas_used": 860,
                    "input": "0x",
                    "decoded_input": [
                      {
                        "soltype": {
                          "name": "tokenA",
                          "type": "address",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "address"
                          }
                        },
                        "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                      },
                      {
                        "soltype": {
                          "name": "tokenB",
                          "type": "address",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "address"
                          }
                        },
                        "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                      },
                      {
                        "soltype": {
                          "name": "fee",
                          "type": "uint24",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "uint"
                          }
                        },
                        "value": "1072762841456390271104015014619925727908479502529670939124"
                      }
                    ],
                    "output": "0x",
                    "decoded_output": [
                      {
                        "soltype": {
                          "name": "",
                          "type": "address",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "address"
                          }
                        },
                        "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                      }
                    ],
                    "network_id": "",
                    "calls": [
                      {
                        "hash": "",
                        "contract_name": "SwapRouter02",
                        "function_name": "getPoolKey",
                        "function_pc": 19521,
                        "function_op": "JUMPDEST",
                        "function_file_index": 40,
                        "function_code_start": 784,
                        "function_line_number": 20,
                        "function_code_length": 274,
                        "absolute_position": 901,
                        "caller_pc": 15620,
                        "caller_op": "JUMP",
                        "caller_file_index": 44,
                        "caller_line_number": 37,
                        "caller_code_start": 1684,
                        "caller_code_length": 43,
                        "call_type": "JUMPDEST",
                        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "from_balance": null,
                        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                          "balance": "65578759510680053"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 166043,
                        "gas_used": 274,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "tokenA",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          {
                            "soltype": {
                              "name": "tokenB",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                          },
                          {
                            "soltype": {
                              "name": "fee",
                              "type": "uint24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "1072762841456390271104015014619925727908479502529670939124"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "",
                              "type": "tuple",
                              "storage_location": "memory",
                              "components": [
                                {
                                  "name": "token0",
                                  "type": "address",
                                  "storage_location": "memory",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                {
                                  "name": "token1",
                                  "type": "address",
                                  "storage_location": "memory",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                {
                                  "name": "fee",
                                  "type": "uint24",
                                  "storage_location": "memory",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                }
                              ],
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false
                            },
                            "value": {
                              "token0": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                              "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                              "fee": "500"
                            }
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "SwapRouter02",
                        "function_name": "computeAddress",
                        "function_pc": 19694,
                        "function_op": "JUMPDEST",
                        "function_file_index": 40,
                        "function_code_start": 1305,
                        "function_line_number": 33,
                        "function_code_length": 512,
                        "absolute_position": 985,
                        "caller_pc": 15625,
                        "caller_op": "JUMP",
                        "caller_file_index": 44,
                        "caller_line_number": 37,
                        "caller_code_start": 1648,
                        "caller_code_length": 80,
                        "call_type": "JUMPDEST",
                        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "from_balance": null,
                        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                          "balance": "65578759510680053"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 165757,
                        "gas_used": 518,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "factory",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0x1f98431c8ad98523631ae4a59f267346ea31f984"
                          },
                          {
                            "soltype": {
                              "name": "key",
                              "type": "tuple",
                              "storage_location": "memory",
                              "components": [
                                {
                                  "name": "token0",
                                  "type": "address",
                                  "storage_location": "memory",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                {
                                  "name": "token1",
                                  "type": "address",
                                  "storage_location": "memory",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                {
                                  "name": "fee",
                                  "type": "uint24",
                                  "storage_location": "memory",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                }
                              ],
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false
                            },
                            "value": {
                              "token0": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                              "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                              "fee": "500"
                            }
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "pool",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      }
                    ]
                  },
                  {
                    "hash": "",
                    "contract_name": "SwapRouter02",
                    "function_name": "toInt256",
                    "function_pc": 15634,
                    "function_op": "JUMPDEST",
                    "function_file_index": 17,
                    "function_code_start": 924,
                    "function_line_number": 24,
                    "function_code_length": 121,
                    "absolute_position": 1136,
                    "caller_pc": 9874,
                    "caller_op": "JUMP",
                    "caller_file_index": 44,
                    "caller_line_number": 95,
                    "caller_code_start": 3938,
                    "caller_code_length": 19,
                    "call_type": "JUMPDEST",
                    "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                    "from_balance": null,
                    "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                    "to_balance": null,
                    "value": null,
                    "caller": {
                      "address": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
                      "balance": "65578759510680053"
                    },
                    "block_timestamp": "0001-01-01T00:00:00Z",
                    "gas": 165183,
                    "gas_used": 40,
                    "input": "0x",
                    "decoded_input": [
                      {
                        "soltype": {
                          "name": "y",
                          "type": "uint256",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "uint"
                          }
                        },
                        "value": "100000000000000"
                      }
                    ],
                    "output": "0x",
                    "decoded_output": [
                      {
                        "soltype": {
                          "name": "z",
                          "type": "int256",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "int"
                          }
                        },
                        "value": "100000000000000"
                      }
                    ],
                    "network_id": "",
                    "calls": null
                  },
                  {
                    "hash": "",
                    "contract_name": "SwapRouter02",
                    "function_name": "swap",
                    "function_pc": 2292,
                    "function_op": "JUMPDEST",
                    "function_file_index": 1,
                    "function_code_start": 22899,
                    "function_line_number": 596,
                    "function_code_length": 9002,
                    "absolute_position": 7869,
                    "caller_pc": 10039,
                    "caller_op": "CALL",
                    "caller_file_index": 44,
                    "caller_line_number": 92,
                    "caller_code_start": 3829,
                    "caller_code_length": 351,
                    "call_type": "CALL",
                    "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                    "from_balance": "100000000000000",
                    "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                    "to_balance": "0",
                    "value": "0",
                    "caller": {
                      "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                      "balance": "100000000000000"
                    },
                    "block_timestamp": "0001-01-01T00:00:00Z",
                    "gas": 158444,
                    "gas_used": 107589,
                    "refund_gas": 2514,
                    "input": "0x128acb0800000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000",
                    "decoded_input": [
                      {
                        "soltype": {
                          "name": "recipient",
                          "type": "address",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "address"
                          }
                        },
                        "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                      },
                      {
                        "soltype": {
                          "name": "zeroForOne",
                          "type": "bool",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "bool"
                          }
                        },
                        "value": false
                      },
                      {
                        "soltype": {
                          "name": "amountSpecified",
                          "type": "int256",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "int"
                          }
                        },
                        "value": "100000000000000"
                      },
                      {
                        "soltype": {
                          "name": "sqrtPriceLimitX96",
                          "type": "uint160",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "uint"
                          }
                        },
                        "value": "1461446703485210103287273052203988822378723970341"
                      },
                      {
                        "soltype": {
                          "name": "data",
                          "type": "bytes",
                          "storage_location": "calldata",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "bytes"
                          }
                        },
                        "value": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000"
                      }
                    ],
                    "output": "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7bb200000000000000000000000000000000000000000000000000005af3107a4000",
                    "decoded_output": [
                      {
                        "soltype": {
                          "name": "amount0",
                          "type": "int256",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "int"
                          }
                        },
                        "value": "-164942"
                      },
                      {
                        "soltype": {
                          "name": "amount1",
                          "type": "int256",
                          "storage_location": "default",
                          "components": null,
                          "offset": 0,
                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                          "indexed": false,
                          "simple_type": {
                            "type": "int"
                          }
                        },
                        "value": "100000000000000"
                      }
                    ],
                    "network_id": "",
                    "calls": [
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "checkNotDelegateCall",
                        "function_pc": 11248,
                        "function_op": "JUMPDEST",
                        "function_file_index": 0,
                        "function_code_start": 835,
                        "function_line_number": 18,
                        "function_code_length": 96,
                        "absolute_position": 1733,
                        "caller_pc": 2302,
                        "caller_op": "JUMP",
                        "caller_file_index": 0,
                        "caller_line_number": 24,
                        "caller_code_start": 1036,
                        "caller_code_length": 22,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 157916,
                        "gas_used": 49,
                        "input": "0x",
                        "output": "0x",
                        "decoded_output": [],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "_blockTimestamp",
                        "function_pc": 11303,
                        "function_op": "JUMPDEST",
                        "function_file_index": 1,
                        "function_code_start": 5018,
                        "function_line_number": 133,
                        "function_code_length": 138,
                        "absolute_position": 1956,
                        "caller_pc": 2821,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 620,
                        "caller_code_start": 23730,
                        "caller_code_length": 17,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 149962,
                        "gas_used": 14,
                        "input": "0x",
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "",
                              "type": "uint32",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": 1667600756
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "nextInitializedTickWithinOneWord",
                        "function_pc": 11307,
                        "function_op": "JUMPDEST",
                        "function_file_index": 27,
                        "function_code_start": 2188,
                        "function_line_number": 42,
                        "function_code_length": 1921,
                        "function_variables": [
                          {
                            "soltype": {
                              "name": "compressed",
                              "type": "int24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "20223"
                          },
                          {
                            "soltype": {
                              "name": "wordPos",
                              "type": "int16",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": 79
                          },
                          {
                            "soltype": {
                              "name": "bitPos",
                              "type": "uint8",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": 0
                          },
                          {
                            "soltype": {
                              "name": "mask",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                          },
                          {
                            "soltype": {
                              "name": "masked",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "112102898759189653579845268946968515401187435328304514770740979115962482540509"
                          }
                        ],
                        "absolute_position": 2193,
                        "caller_pc": 3108,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 646,
                        "caller_code_start": 24858,
                        "caller_code_length": 142,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 147070,
                        "gas_used": 3010,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "self",
                              "type": "mapping (int16 => uint256)",
                              "storage_location": "storage",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false
                            },
                            "value": null
                          },
                          {
                            "soltype": {
                              "name": "tick",
                              "type": "int24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "202233"
                          },
                          {
                            "soltype": {
                              "name": "tickSpacing",
                              "type": "int24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "10"
                          },
                          {
                            "soltype": {
                              "name": "lte",
                              "type": "bool",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "bool"
                              }
                            },
                            "value": false
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "next",
                              "type": "int24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "202240"
                          },
                          {
                            "soltype": {
                              "name": "initialized",
                              "type": "bool",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "bool"
                              }
                            },
                            "value": true
                          }
                        ],
                        "network_id": "",
                        "calls": [
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "position",
                            "function_pc": 17590,
                            "function_op": "JUMPDEST",
                            "function_file_index": 27,
                            "function_code_start": 686,
                            "function_line_number": 14,
                            "function_code_length": 160,
                            "absolute_position": 2237,
                            "caller_pc": 11507,
                            "caller_op": "JUMP",
                            "caller_file_index": 27,
                            "caller_line_number": 65,
                            "caller_code_start": 3432,
                            "caller_code_length": 24,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 146908,
                            "gas_used": 49,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "tick",
                                  "type": "int24",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "int"
                                  }
                                },
                                "value": "20224"
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "wordPos",
                                  "type": "int16",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "int"
                                  }
                                },
                                "value": 79
                              },
                              {
                                "soltype": {
                                  "name": "bitPos",
                                  "type": "uint8",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": 0
                              }
                            ],
                            "network_id": "",
                            "calls": null
                          },
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "leastSignificantBit",
                            "function_pc": 17768,
                            "function_op": "JUMPDEST",
                            "function_file_index": 15,
                            "function_code_start": 1893,
                            "function_line_number": 53,
                            "function_code_length": 894,
                            "absolute_position": 2308,
                            "caller_pc": 11600,
                            "caller_op": "JUMP",
                            "caller_file_index": 27,
                            "caller_line_number": 74,
                            "caller_code_start": 3949,
                            "caller_code_length": 35,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 144545,
                            "gas_used": 416,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "x",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "112102898759189653579845268946968515401187435328304514770740979115962482540509"
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "r",
                                  "type": "uint8",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": 0
                              }
                            ],
                            "network_id": "",
                            "calls": null
                          }
                        ]
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "getSqrtRatioAtTick",
                        "function_pc": 11629,
                        "function_op": "JUMPDEST",
                        "function_file_index": 28,
                        "function_code_start": 1355,
                        "function_line_number": 23,
                        "function_code_length": 2580,
                        "function_variables": [
                          {
                            "soltype": {
                              "name": "absTick",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "202240"
                          },
                          {
                            "soltype": {
                              "name": "ratio",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "8379260289265864852271036770368072844187017"
                          }
                        ],
                        "absolute_position": 2495,
                        "caller_pc": 3201,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 660,
                        "caller_code_start": 25429,
                        "caller_code_length": 42,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 143889,
                        "gas_used": 870,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "tick",
                              "type": "int24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "202240"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "sqrtPriceX96",
                              "type": "uint160",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "1950948566493081127356513582721370"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "computeSwapStep",
                        "function_pc": 12447,
                        "function_op": "JUMPDEST",
                        "function_file_index": 25,
                        "function_code_start": 1391,
                        "function_line_number": 21,
                        "function_code_length": 3239,
                        "function_variables": [
                          {
                            "soltype": {
                              "name": "amountRemainingLessFee",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "99950000000000"
                          }
                        ],
                        "absolute_position": 2792,
                        "caller_pc": 3346,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 663,
                        "caller_code_start": 25675,
                        "caller_code_length": 378,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 142819,
                        "gas_used": 2757,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "sqrtRatioCurrentX96",
                              "type": "uint160",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "1950311997212736283694402946627570"
                          },
                          {
                            "soltype": {
                              "name": "sqrtRatioTargetX96",
                              "type": "uint160",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "1950948566493081127356513582721370"
                          },
                          {
                            "soltype": {
                              "name": "liquidity",
                              "type": "uint128",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "227121953921659287429"
                          },
                          {
                            "soltype": {
                              "name": "amountRemaining",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "100000000000000"
                          },
                          {
                            "soltype": {
                              "name": "feePips",
                              "type": "uint24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "500"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "sqrtRatioNextX96",
                              "type": "uint160",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "1950311997247602375265771494296640"
                          },
                          {
                            "soltype": {
                              "name": "amountIn",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "99950000000000"
                          },
                          {
                            "soltype": {
                              "name": "amountOut",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "164942"
                          },
                          {
                            "soltype": {
                              "name": "feeAmount",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "50000000000"
                          }
                        ],
                        "network_id": "",
                        "calls": [
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "mulDiv",
                            "function_pc": 13017,
                            "function_op": "JUMPDEST",
                            "function_file_index": 18,
                            "function_code_start": 742,
                            "function_line_number": 14,
                            "function_code_length": 3776,
                            "absolute_position": 2829,
                            "caller_pc": 12503,
                            "caller_op": "JUMP",
                            "caller_file_index": 25,
                            "caller_line_number": 41,
                            "caller_code_start": 1954,
                            "caller_code_length": 61,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 142698,
                            "gas_used": 164,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "a",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "100000000000000"
                              },
                              {
                                "soltype": {
                                  "name": "b",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "999500"
                              },
                              {
                                "soltype": {
                                  "name": "denominator",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1000000"
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "result",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "99950000000000"
                              }
                            ],
                            "network_id": "",
                            "calls": null
                          },
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "getAmount1Delta",
                            "function_pc": 18002,
                            "function_op": "JUMPDEST",
                            "function_file_index": 24,
                            "function_code_start": 8727,
                            "function_line_number": 182,
                            "function_code_length": 532,
                            "absolute_position": 2890,
                            "caller_pc": 12523,
                            "caller_op": "JUMP",
                            "caller_file_index": 25,
                            "caller_line_number": 44,
                            "caller_code_start": 2175,
                            "caller_code_length": 87,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 142486,
                            "gas_used": 488,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "sqrtRatioAX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950311997212736283694402946627570"
                              },
                              {
                                "soltype": {
                                  "name": "sqrtRatioBX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950948566493081127356513582721370"
                              },
                              {
                                "soltype": {
                                  "name": "liquidity",
                                  "type": "uint128",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "227121953921659287429"
                              },
                              {
                                "soltype": {
                                  "name": "roundUp",
                                  "type": "bool",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "bool"
                                  }
                                },
                                "value": true
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "amount1",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1824841750335876293465"
                              }
                            ],
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "UniswapV3Pool",
                                "function_name": "mulDivRoundingUp",
                                "function_pc": 16809,
                                "function_op": "JUMPDEST",
                                "function_file_index": 18,
                                "function_code_start": 4800,
                                "function_line_number": 113,
                                "function_code_length": 315,
                                "absolute_position": 2937,
                                "caller_pc": 18113,
                                "caller_op": "JUMP",
                                "caller_file_index": 24,
                                "caller_line_number": 192,
                                "caller_code_start": 9073,
                                "caller_code_length": 85,
                                "call_type": "JUMPDEST",
                                "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "from_balance": null,
                                "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                  "balance": "100000000000000"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 142332,
                                "gas_used": 305,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "a",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "227121953921659287429"
                                  },
                                  {
                                    "soltype": {
                                      "name": "b",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "636569280344843662110636093800"
                                  },
                                  {
                                    "soltype": {
                                      "name": "denominator",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "79228162514264337593543950336"
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "result",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "1824841750335876293465"
                                  }
                                ],
                                "network_id": "",
                                "calls": [
                                  {
                                    "hash": "",
                                    "contract_name": "UniswapV3Pool",
                                    "function_name": "mulDiv",
                                    "function_pc": 13017,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 18,
                                    "function_code_start": 742,
                                    "function_line_number": 14,
                                    "function_code_length": 3776,
                                    "absolute_position": 2945,
                                    "caller_pc": 16821,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 18,
                                    "caller_line_number": 118,
                                    "caller_code_start": 4957,
                                    "caller_code_length": 25,
                                    "call_type": "JUMPDEST",
                                    "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "from_balance": null,
                                    "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                      "balance": "100000000000000"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 142305,
                                    "gas_used": 164,
                                    "input": "0x",
                                    "decoded_input": [
                                      {
                                        "soltype": {
                                          "name": "a",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "227121953921659287429"
                                      },
                                      {
                                        "soltype": {
                                          "name": "b",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "636569280344843662110636093800"
                                      },
                                      {
                                        "soltype": {
                                          "name": "denominator",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "79228162514264337593543950336"
                                      }
                                    ],
                                    "output": "0x",
                                    "decoded_output": [
                                      {
                                        "soltype": {
                                          "name": "result",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "1824841750335876293464"
                                      }
                                    ],
                                    "network_id": "",
                                    "calls": null
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "getNextSqrtPriceFromInput",
                            "function_pc": 18314,
                            "function_op": "JUMPDEST",
                            "function_file_index": 24,
                            "function_code_start": 5299,
                            "function_line_number": 106,
                            "function_code_length": 550,
                            "absolute_position": 3054,
                            "caller_pc": 12570,
                            "caller_op": "JUMP",
                            "caller_file_index": 25,
                            "caller_line_number": 47,
                            "caller_code_start": 2407,
                            "caller_code_length": 205,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 141931,
                            "gas_used": 504,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "sqrtPX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950311997212736283694402946627570"
                              },
                              {
                                "soltype": {
                                  "name": "liquidity",
                                  "type": "uint128",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "227121953921659287429"
                              },
                              {
                                "soltype": {
                                  "name": "amountIn",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "99950000000000"
                              },
                              {
                                "soltype": {
                                  "name": "zeroForOne",
                                  "type": "bool",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "bool"
                                  }
                                },
                                "value": false
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "sqrtQX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950311997247602375265771494296640"
                              }
                            ],
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "UniswapV3Pool",
                                "function_name": "getNextSqrtPriceFromAmount1RoundingDown",
                                "function_pc": 19714,
                                "function_op": "JUMPDEST",
                                "function_file_index": 24,
                                "function_code_start": 3597,
                                "function_line_number": 68,
                                "function_code_length": 1153,
                                "function_variables": [
                                  {
                                    "soltype": {
                                      "name": "quotient",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "34866091571368547669070"
                                  }
                                ],
                                "absolute_position": 3090,
                                "caller_pc": 18376,
                                "caller_op": "JUMP",
                                "caller_file_index": 24,
                                "caller_line_number": 119,
                                "caller_code_start": 5766,
                                "caller_code_length": 76,
                                "call_type": "JUMPDEST",
                                "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "from_balance": null,
                                "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                  "balance": "100000000000000"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 141803,
                                "gas_used": 335,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "sqrtPX96",
                                      "type": "uint160",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "1950311997212736283694402946627570"
                                  },
                                  {
                                    "soltype": {
                                      "name": "liquidity",
                                      "type": "uint128",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "227121953921659287429"
                                  },
                                  {
                                    "soltype": {
                                      "name": "amount",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "99950000000000"
                                  },
                                  {
                                    "soltype": {
                                      "name": "add",
                                      "type": "bool",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "bool"
                                      }
                                    },
                                    "value": true
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "",
                                      "type": "uint160",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "1950311997247602375265771494296640"
                                  }
                                ],
                                "network_id": "",
                                "calls": [
                                  {
                                    "hash": "",
                                    "contract_name": "UniswapV3Pool",
                                    "function_name": "add",
                                    "function_pc": 15885,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 20,
                                    "function_code_start": 435,
                                    "function_line_number": 11,
                                    "function_code_length": 111,
                                    "absolute_position": 3139,
                                    "caller_pc": 19815,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 24,
                                    "caller_line_number": 84,
                                    "caller_code_start": 4243,
                                    "caller_code_length": 31,
                                    "call_type": "JUMPDEST",
                                    "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "from_balance": null,
                                    "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                      "balance": "100000000000000"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 141637,
                                    "gas_used": 54,
                                    "input": "0x",
                                    "decoded_input": [
                                      {
                                        "soltype": {
                                          "name": "x",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "1950311997212736283694402946627570"
                                      },
                                      {
                                        "soltype": {
                                          "name": "y",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "34866091571368547669070"
                                      }
                                    ],
                                    "output": "0x",
                                    "decoded_output": [
                                      {
                                        "soltype": {
                                          "name": "z",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "1950311997247602375265771494296640"
                                      }
                                    ],
                                    "network_id": "",
                                    "calls": null
                                  },
                                  {
                                    "hash": "",
                                    "contract_name": "UniswapV3Pool",
                                    "function_name": "toUint160",
                                    "function_pc": 22008,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 23,
                                    "function_code_start": 357,
                                    "function_line_number": 10,
                                    "function_code_length": 111,
                                    "absolute_position": 3158,
                                    "caller_pc": 19820,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 24,
                                    "caller_line_number": 84,
                                    "caller_code_start": 4243,
                                    "caller_code_length": 43,
                                    "call_type": "JUMPDEST",
                                    "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "from_balance": null,
                                    "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                      "balance": "100000000000000"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 141571,
                                    "gas_used": 61,
                                    "input": "0x",
                                    "decoded_input": [
                                      {
                                        "soltype": {
                                          "name": "y",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "1950311997247602375265771494296640"
                                      }
                                    ],
                                    "output": "0x",
                                    "decoded_output": [
                                      {
                                        "soltype": {
                                          "name": "z",
                                          "type": "uint160",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "1950311997247602375265771494296640"
                                      }
                                    ],
                                    "network_id": "",
                                    "calls": null
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "getAmount1Delta",
                            "function_pc": 18002,
                            "function_op": "JUMPDEST",
                            "function_file_index": 24,
                            "function_code_start": 8727,
                            "function_line_number": 182,
                            "function_code_length": 532,
                            "absolute_position": 3244,
                            "caller_pc": 12779,
                            "caller_op": "JUMP",
                            "caller_file_index": 25,
                            "caller_line_number": 80,
                            "caller_code_start": 3820,
                            "caller_code_length": 85,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 141288,
                            "gas_used": 488,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "sqrtRatioAX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950311997212736283694402946627570"
                              },
                              {
                                "soltype": {
                                  "name": "sqrtRatioBX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950311997247602375265771494296640"
                              },
                              {
                                "soltype": {
                                  "name": "liquidity",
                                  "type": "uint128",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "227121953921659287429"
                              },
                              {
                                "soltype": {
                                  "name": "roundUp",
                                  "type": "bool",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "bool"
                                  }
                                },
                                "value": true
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "amount1",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "99950000000000"
                              }
                            ],
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "UniswapV3Pool",
                                "function_name": "mulDivRoundingUp",
                                "function_pc": 16809,
                                "function_op": "JUMPDEST",
                                "function_file_index": 18,
                                "function_code_start": 4800,
                                "function_line_number": 113,
                                "function_code_length": 315,
                                "absolute_position": 3291,
                                "caller_pc": 18113,
                                "caller_op": "JUMP",
                                "caller_file_index": 24,
                                "caller_line_number": 192,
                                "caller_code_start": 9073,
                                "caller_code_length": 85,
                                "call_type": "JUMPDEST",
                                "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "from_balance": null,
                                "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                  "balance": "100000000000000"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 141134,
                                "gas_used": 305,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "a",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "227121953921659287429"
                                  },
                                  {
                                    "soltype": {
                                      "name": "b",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "34866091571368547669070"
                                  },
                                  {
                                    "soltype": {
                                      "name": "denominator",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "79228162514264337593543950336"
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "result",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "99950000000000"
                                  }
                                ],
                                "network_id": "",
                                "calls": [
                                  {
                                    "hash": "",
                                    "contract_name": "UniswapV3Pool",
                                    "function_name": "mulDiv",
                                    "function_pc": 13017,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 18,
                                    "function_code_start": 742,
                                    "function_line_number": 14,
                                    "function_code_length": 3776,
                                    "absolute_position": 3299,
                                    "caller_pc": 16821,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 18,
                                    "caller_line_number": 118,
                                    "caller_code_start": 4957,
                                    "caller_code_length": 25,
                                    "call_type": "JUMPDEST",
                                    "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "from_balance": null,
                                    "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                      "balance": "100000000000000"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 141107,
                                    "gas_used": 164,
                                    "input": "0x",
                                    "decoded_input": [
                                      {
                                        "soltype": {
                                          "name": "a",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "227121953921659287429"
                                      },
                                      {
                                        "soltype": {
                                          "name": "b",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "34866091571368547669070"
                                      },
                                      {
                                        "soltype": {
                                          "name": "denominator",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "79228162514264337593543950336"
                                      }
                                    ],
                                    "output": "0x",
                                    "decoded_output": [
                                      {
                                        "soltype": {
                                          "name": "result",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "99949999999999"
                                      }
                                    ],
                                    "network_id": "",
                                    "calls": null
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "getAmount0Delta",
                            "function_pc": 18125,
                            "function_op": "JUMPDEST",
                            "function_file_index": 24,
                            "function_code_start": 7493,
                            "function_line_number": 153,
                            "function_code_length": 779,
                            "absolute_position": 3410,
                            "caller_pc": 12816,
                            "caller_op": "JUMP",
                            "caller_file_index": 25,
                            "caller_line_number": 83,
                            "caller_code_start": 3993,
                            "caller_code_length": 86,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 140720,
                            "gas_used": 442,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "sqrtRatioAX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950311997212736283694402946627570"
                              },
                              {
                                "soltype": {
                                  "name": "sqrtRatioBX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950311997247602375265771494296640"
                              },
                              {
                                "soltype": {
                                  "name": "liquidity",
                                  "type": "uint128",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "227121953921659287429"
                              },
                              {
                                "soltype": {
                                  "name": "roundUp",
                                  "type": "bool",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "bool"
                                  }
                                },
                                "value": false
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "amount0",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "164942"
                              }
                            ],
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "UniswapV3Pool",
                                "function_name": "mulDiv",
                                "function_pc": 13017,
                                "function_op": "JUMPDEST",
                                "function_file_index": 18,
                                "function_code_start": 742,
                                "function_line_number": 14,
                                "function_code_length": 3776,
                                "absolute_position": 3475,
                                "caller_pc": 18251,
                                "caller_op": "JUMP",
                                "caller_file_index": 24,
                                "caller_line_number": 172,
                                "caller_code_start": 8195,
                                "caller_code_length": 54,
                                "call_type": "JUMPDEST",
                                "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "from_balance": null,
                                "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                  "balance": "100000000000000"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 140505,
                                "gas_used": 164,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "a",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "17994455075862478519702900626259740105471525126144"
                                  },
                                  {
                                    "soltype": {
                                      "name": "b",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "34866091571368547669070"
                                  },
                                  {
                                    "soltype": {
                                      "name": "denominator",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "1950311997247602375265771494296640"
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "result",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "321690231787179780576960428553549666117"
                                  }
                                ],
                                "network_id": "",
                                "calls": null
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "toInt256",
                        "function_pc": 12945,
                        "function_op": "JUMPDEST",
                        "function_file_index": 23,
                        "function_code_start": 924,
                        "function_line_number": 24,
                        "function_code_length": 121,
                        "absolute_position": 3647,
                        "caller_pc": 3400,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 674,
                        "caller_code_start": 26136,
                        "caller_code_length": 43,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 139935,
                        "gas_used": 46,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "y",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "100000000000000"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "z",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "100000000000000"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "toInt256",
                        "function_pc": 12945,
                        "function_op": "JUMPDEST",
                        "function_file_index": 23,
                        "function_code_start": 924,
                        "function_line_number": 24,
                        "function_code_length": 121,
                        "absolute_position": 3676,
                        "caller_pc": 3423,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 675,
                        "caller_code_start": 26249,
                        "caller_code_length": 25,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 139838,
                        "gas_used": 46,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "y",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "164942"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "z",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "164942"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "sub",
                        "function_pc": 12967,
                        "function_op": "JUMPDEST",
                        "function_file_index": 20,
                        "function_code_start": 1573,
                        "function_line_number": 43,
                        "function_code_length": 120,
                        "absolute_position": 3697,
                        "caller_pc": 3434,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 675,
                        "caller_code_start": 26222,
                        "caller_code_length": 53,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 139765,
                        "gas_used": 69,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "x",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "0"
                          },
                          {
                            "soltype": {
                              "name": "y",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "164942"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "z",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "-164942"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "mulDiv",
                        "function_pc": 13017,
                        "function_op": "JUMPDEST",
                        "function_file_index": 18,
                        "function_code_start": 742,
                        "function_line_number": 14,
                        "function_code_length": 3776,
                        "absolute_position": 3767,
                        "caller_pc": 3624,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 690,
                        "caller_code_start": 26962,
                        "caller_code_length": 68,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 139531,
                        "gas_used": 164,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "a",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "50000000000"
                          },
                          {
                            "soltype": {
                              "name": "b",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "340282366920938463463374607431768211456"
                          },
                          {
                            "soltype": {
                              "name": "denominator",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "227121953921659287429"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "result",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "74911817427898530366020704698"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "getTickAtSqrtRatio",
                        "function_pc": 13989,
                        "function_op": "JUMPDEST",
                        "function_file_index": 28,
                        "function_code_start": 4354,
                        "function_line_number": 61,
                        "function_code_length": 4281,
                        "absolute_position": 3882,
                        "caller_pc": 3979,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 728,
                        "caller_code_start": 29169,
                        "caller_code_length": 47,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 139153,
                        "gas_used": 2396,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "sqrtPriceX96",
                              "type": "uint160",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "1950311997247602375265771494296640"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "tick",
                              "type": "int24",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "202233"
                          }
                        ],
                        "network_id": "",
                        "calls": [
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "getSqrtRatioAtTick",
                            "function_pc": 11629,
                            "function_op": "JUMPDEST",
                            "function_file_index": 28,
                            "function_code_start": 1355,
                            "function_line_number": 23,
                            "function_code_length": 2580,
                            "function_variables": [
                              {
                                "soltype": {
                                  "name": "absTick",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "202233"
                              },
                              {
                                "soltype": {
                                  "name": "ratio",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "8376328207910413664415155527815340505777572"
                              }
                            ],
                            "absolute_position": 4323,
                            "caller_pc": 14757,
                            "caller_op": "JUMP",
                            "caller_file_index": 28,
                            "caller_line_number": 203,
                            "caller_code_start": 8567,
                            "caller_code_length": 26,
                            "call_type": "JUMPDEST",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": null,
                            "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                              "balance": "100000000000000"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 137768,
                            "gas_used": 924,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "tick",
                                  "type": "int24",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "int"
                                  }
                                },
                                "value": "202233"
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "sqrtPriceX96",
                                  "type": "uint160",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1950265888103845916785103158982318"
                              }
                            ],
                            "network_id": "",
                            "calls": null
                          }
                        ]
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "safeTransfer",
                        "function_pc": 15238,
                        "function_op": "JUMPDEST",
                        "function_file_index": 29,
                        "function_code_start": 602,
                        "function_line_number": 14,
                        "function_code_length": 328,
                        "function_variables": [
                          {
                            "soltype": {
                              "name": "success",
                              "type": "bool",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "bool"
                              }
                            },
                            "value": true
                          }
                        ],
                        "absolute_position": 4770,
                        "caller_pc": 4893,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 779,
                        "caller_code_start": 31454,
                        "caller_code_length": 65,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 133118,
                        "gas_used": 30388,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "token",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                          },
                          {
                            "soltype": {
                              "name": "to",
                              "type": "address",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "address"
                              }
                            },
                            "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                          },
                          {
                            "soltype": {
                              "name": "value",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "164942"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [],
                        "network_id": "",
                        "calls": [
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "transfer",
                            "function_pc": 109,
                            "function_op": "JUMPDEST",
                            "function_file_index": 0,
                            "function_code_start": 10598,
                            "function_line_number": 330,
                            "function_code_length": 153,
                            "absolute_position": 5447,
                            "caller_pc": 15413,
                            "caller_op": "CALL",
                            "caller_file_index": 29,
                            "caller_line_number": 20,
                            "caller_code_start": 763,
                            "caller_code_length": 78,
                            "call_type": "CALL",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": "0",
                            "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                            "to_balance": "0",
                            "value": "0",
                            "caller": {
                              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                              "balance": "0"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 127878,
                            "gas_used": 26917,
                            "refund_gas": 2029,
                            "input": "0xa9059cbb00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000002844e",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "to",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                              },
                              {
                                "soltype": {
                                  "name": "value",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "164942"
                              }
                            ],
                            "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
                            "decoded_output": null,
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "FiatTokenProxy",
                                "function_name": "_fallback",
                                "function_pc": 505,
                                "function_op": "JUMPDEST",
                                "function_file_index": 0,
                                "function_code_start": 2073,
                                "function_line_number": 69,
                                "function_code_length": 90,
                                "absolute_position": 4989,
                                "caller_pc": 116,
                                "caller_op": "JUMP",
                                "caller_file_index": 0,
                                "caller_line_number": 22,
                                "caller_code_start": 574,
                                "caller_code_length": 11,
                                "call_type": "JUMPDEST",
                                "from": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                "from_balance": null,
                                "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 127690,
                                "gas_used": 26729,
                                "input": "0x",
                                "output": "0x",
                                "decoded_output": null,
                                "network_id": "",
                                "calls": [
                                  {
                                    "hash": "",
                                    "contract_name": "FiatTokenProxy",
                                    "function_name": "_willFallback",
                                    "function_pc": 1911,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 0,
                                    "function_code_start": 1939,
                                    "function_line_number": 62,
                                    "function_code_length": 39,
                                    "absolute_position": 5028,
                                    "caller_pc": 512,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 0,
                                    "caller_line_number": 70,
                                    "caller_code_start": 2109,
                                    "caller_code_length": 15,
                                    "call_type": "JUMPDEST",
                                    "from": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                    "from_balance": null,
                                    "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                      "balance": "0"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 127675,
                                    "gas_used": 2223,
                                    "input": "0x",
                                    "output": "0x",
                                    "decoded_output": [],
                                    "network_id": "",
                                    "calls": [
                                      {
                                        "hash": "",
                                        "contract_name": "FiatTokenProxy",
                                        "function_name": "_admin",
                                        "function_pc": 1704,
                                        "function_op": "JUMPDEST",
                                        "function_file_index": 0,
                                        "function_code_start": 8699,
                                        "function_line_number": 272,
                                        "function_code_length": 136,
                                        "function_variables": [
                                          {
                                            "soltype": {
                                              "name": "slot",
                                              "type": "bytes32",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "bytes"
                                              }
                                            },
                                            "value": "0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b"
                                          }
                                        ],
                                        "absolute_position": 4997,
                                        "caller_pc": 1405,
                                        "caller_op": "JUMP",
                                        "caller_file_index": 0,
                                        "caller_line_number": 295,
                                        "caller_code_start": 9221,
                                        "caller_code_length": 8,
                                        "call_type": "JUMPDEST",
                                        "from": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                        "from_balance": null,
                                        "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                        "to_balance": null,
                                        "value": null,
                                        "caller": {
                                          "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                          "balance": "0"
                                        },
                                        "block_timestamp": "0001-01-01T00:00:00Z",
                                        "gas": 127660,
                                        "gas_used": 2144,
                                        "input": "0x",
                                        "output": "0x",
                                        "decoded_output": [
                                          {
                                            "soltype": {
                                              "name": "adm",
                                              "type": "address",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "address"
                                              }
                                            },
                                            "value": "0x807a96288a1a408dbc13de2b1d087d10356395d2"
                                          }
                                        ],
                                        "network_id": "",
                                        "calls": null
                                      }
                                    ]
                                  },
                                  {
                                    "hash": "",
                                    "contract_name": "FiatTokenProxy",
                                    "function_name": "_implementation",
                                    "function_pc": 1617,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 0,
                                    "function_code_start": 4428,
                                    "function_line_number": 140,
                                    "function_code_length": 156,
                                    "function_variables": [
                                      {
                                        "soltype": {
                                          "name": "slot",
                                          "type": "bytes32",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "bytes"
                                          }
                                        },
                                        "value": "0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3"
                                      }
                                    ],
                                    "absolute_position": 5037,
                                    "caller_pc": 523,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 0,
                                    "caller_line_number": 71,
                                    "caller_code_start": 2140,
                                    "caller_code_length": 17,
                                    "call_type": "JUMPDEST",
                                    "from": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                    "from_balance": null,
                                    "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                      "balance": "0"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 125425,
                                    "gas_used": 2144,
                                    "input": "0x",
                                    "output": "0x",
                                    "decoded_output": [
                                      {
                                        "soltype": {
                                          "name": "impl",
                                          "type": "address",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        "value": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf"
                                      }
                                    ],
                                    "network_id": "",
                                    "calls": null
                                  },
                                  {
                                    "hash": "",
                                    "contract_name": "FiatTokenProxy",
                                    "function_name": "_delegate",
                                    "function_pc": 1666,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 0,
                                    "function_code_start": 999,
                                    "function_line_number": 36,
                                    "function_code_length": 731,
                                    "absolute_position": 5055,
                                    "caller_pc": 528,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 0,
                                    "caller_line_number": 71,
                                    "caller_code_start": 2130,
                                    "caller_code_length": 28,
                                    "call_type": "JUMPDEST",
                                    "from": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                    "from_balance": null,
                                    "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                      "balance": "0"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 123269,
                                    "gas_used": 22308,
                                    "input": "0x",
                                    "decoded_input": [
                                      {
                                        "soltype": {
                                          "name": "implementation",
                                          "type": "address",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        "value": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf"
                                      }
                                    ],
                                    "output": "0x",
                                    "decoded_output": null,
                                    "network_id": "",
                                    "calls": [
                                      {
                                        "hash": "",
                                        "contract_name": "FiatTokenProxy",
                                        "function_name": "transfer",
                                        "function_pc": 11109,
                                        "function_op": "JUMPDEST",
                                        "function_file_index": 0,
                                        "function_code_start": 27433,
                                        "function_line_number": 852,
                                        "function_code_length": 260,
                                        "absolute_position": 5434,
                                        "caller_pc": 1680,
                                        "caller_op": "DELEGATECALL",
                                        "caller_file_index": 0,
                                        "caller_line_number": 45,
                                        "caller_code_start": 1450,
                                        "caller_code_length": 3,
                                        "call_type": "DELEGATECALL",
                                        "from": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                        "from_balance": "0",
                                        "to": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                        "to_balance": "0",
                                        "value": null,
                                        "caller": {
                                          "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                          "balance": "0"
                                        },
                                        "block_timestamp": "0001-01-01T00:00:00Z",
                                        "gas": 118749,
                                        "gas_used": 19628,
                                        "refund_gas": 1884,
                                        "input": "0xa9059cbb00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000002844e",
                                        "decoded_input": [
                                          {
                                            "soltype": {
                                              "name": "to",
                                              "type": "address",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "address"
                                              }
                                            },
                                            "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                                          },
                                          {
                                            "soltype": {
                                              "name": "value",
                                              "type": "uint256",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "uint"
                                              }
                                            },
                                            "value": "164942"
                                          }
                                        ],
                                        "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
                                        "decoded_output": [
                                          {
                                            "soltype": {
                                              "name": "",
                                              "type": "bool",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "bool"
                                              }
                                            },
                                            "value": true
                                          }
                                        ],
                                        "network_id": "",
                                        "calls": [
                                          {
                                            "hash": "",
                                            "contract_name": "FiatTokenV2_1",
                                            "function_name": "_transfer",
                                            "function_pc": 15137,
                                            "function_op": "JUMPDEST",
                                            "function_file_index": 0,
                                            "function_code_start": 27877,
                                            "function_line_number": 870,
                                            "function_code_length": 526,
                                            "absolute_position": 5207,
                                            "caller_pc": 11494,
                                            "caller_op": "JUMP",
                                            "caller_file_index": 0,
                                            "caller_line_number": 860,
                                            "caller_code_start": 27633,
                                            "caller_code_length": 32,
                                            "call_type": "JUMPDEST",
                                            "from": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                            "from_balance": null,
                                            "to": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                            "to_balance": null,
                                            "value": null,
                                            "caller": {
                                              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                              "balance": "0"
                                            },
                                            "block_timestamp": "0001-01-01T00:00:00Z",
                                            "gas": 111872,
                                            "gas_used": 12675,
                                            "input": "0x",
                                            "decoded_input": [
                                              {
                                                "soltype": {
                                                  "name": "from",
                                                  "type": "address",
                                                  "storage_location": "default",
                                                  "components": null,
                                                  "offset": 0,
                                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                  "indexed": false,
                                                  "simple_type": {
                                                    "type": "address"
                                                  }
                                                },
                                                "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                                              },
                                              {
                                                "soltype": {
                                                  "name": "to",
                                                  "type": "address",
                                                  "storage_location": "default",
                                                  "components": null,
                                                  "offset": 0,
                                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                  "indexed": false,
                                                  "simple_type": {
                                                    "type": "address"
                                                  }
                                                },
                                                "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                                              },
                                              {
                                                "soltype": {
                                                  "name": "value",
                                                  "type": "uint256",
                                                  "storage_location": "default",
                                                  "components": null,
                                                  "offset": 0,
                                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                  "indexed": false,
                                                  "simple_type": {
                                                    "type": "uint"
                                                  }
                                                },
                                                "value": "164942"
                                              }
                                            ],
                                            "output": "0x",
                                            "decoded_output": [],
                                            "network_id": "",
                                            "calls": [
                                              {
                                                "hash": "",
                                                "contract_name": "FiatTokenV2_1",
                                                "function_name": "sub",
                                                "function_pc": 15692,
                                                "function_op": "JUMPDEST",
                                                "function_file_index": 0,
                                                "function_code_start": 1373,
                                                "function_line_number": 48,
                                                "function_code_length": 134,
                                                "absolute_position": 5259,
                                                "caller_pc": 15526,
                                                "caller_op": "JUMP",
                                                "caller_file_index": 0,
                                                "caller_line_number": 882,
                                                "caller_code_start": 28283,
                                                "caller_code_length": 25,
                                                "call_type": "JUMPDEST",
                                                "from": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                                "from_balance": null,
                                                "to": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                                "to_balance": null,
                                                "value": null,
                                                "caller": {
                                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                                  "balance": "0"
                                                },
                                                "block_timestamp": "0001-01-01T00:00:00Z",
                                                "gas": 109426,
                                                "gas_used": 160,
                                                "input": "0x",
                                                "decoded_input": [
                                                  {
                                                    "soltype": {
                                                      "name": "a",
                                                      "type": "uint256",
                                                      "storage_location": "default",
                                                      "components": null,
                                                      "offset": 0,
                                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      "indexed": false,
                                                      "simple_type": {
                                                        "type": "uint"
                                                      }
                                                    },
                                                    "value": "109028178195141"
                                                  },
                                                  {
                                                    "soltype": {
                                                      "name": "b",
                                                      "type": "uint256",
                                                      "storage_location": "default",
                                                      "components": null,
                                                      "offset": 0,
                                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      "indexed": false,
                                                      "simple_type": {
                                                        "type": "uint"
                                                      }
                                                    },
                                                    "value": "164942"
                                                  }
                                                ],
                                                "output": "0x",
                                                "decoded_output": [
                                                  {
                                                    "soltype": {
                                                      "name": "",
                                                      "type": "uint256",
                                                      "storage_location": "default",
                                                      "components": null,
                                                      "offset": 0,
                                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      "indexed": false,
                                                      "simple_type": {
                                                        "type": "uint"
                                                      }
                                                    },
                                                    "value": "109028178030199"
                                                  }
                                                ],
                                                "network_id": "",
                                                "calls": [
                                                  {
                                                    "hash": "",
                                                    "contract_name": "FiatTokenV2_1",
                                                    "function_name": "sub",
                                                    "function_pc": 17782,
                                                    "function_op": "JUMPDEST",
                                                    "function_file_index": 0,
                                                    "function_code_start": 1798,
                                                    "function_line_number": 62,
                                                    "function_code_length": 217,
                                                    "absolute_position": 5283,
                                                    "caller_pc": 15757,
                                                    "caller_op": "JUMP",
                                                    "caller_file_index": 0,
                                                    "caller_line_number": 49,
                                                    "caller_code_start": 1457,
                                                    "caller_code_length": 43,
                                                    "call_type": "JUMPDEST",
                                                    "from": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                                    "from_balance": null,
                                                    "to": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                                    "to_balance": null,
                                                    "value": null,
                                                    "caller": {
                                                      "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                                      "balance": "0"
                                                    },
                                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                                    "gas": 109343,
                                                    "gas_used": 56,
                                                    "input": "0x",
                                                    "decoded_input": [
                                                      {
                                                        "soltype": {
                                                          "name": "a",
                                                          "type": "uint256",
                                                          "storage_location": "default",
                                                          "components": null,
                                                          "offset": 0,
                                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                          "indexed": false,
                                                          "simple_type": {
                                                            "type": "uint"
                                                          }
                                                        },
                                                        "value": "109028178195141"
                                                      },
                                                      {
                                                        "soltype": {
                                                          "name": "b",
                                                          "type": "uint256",
                                                          "storage_location": "default",
                                                          "components": null,
                                                          "offset": 0,
                                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                          "indexed": false,
                                                          "simple_type": {
                                                            "type": "uint"
                                                          }
                                                        },
                                                        "value": "164942"
                                                      },
                                                      {
                                                        "soltype": {
                                                          "name": "errorMessage",
                                                          "type": "string",
                                                          "storage_location": "memory",
                                                          "components": null,
                                                          "offset": 0,
                                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                          "indexed": false,
                                                          "simple_type": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "value": "SafeMath: subtraction overflow"
                                                      }
                                                    ],
                                                    "output": "0x",
                                                    "decoded_output": [
                                                      {
                                                        "soltype": {
                                                          "name": "",
                                                          "type": "uint256",
                                                          "storage_location": "default",
                                                          "components": null,
                                                          "offset": 0,
                                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                          "indexed": false,
                                                          "simple_type": {
                                                            "type": "uint"
                                                          }
                                                        },
                                                        "value": "109028178030199"
                                                      }
                                                    ],
                                                    "network_id": "",
                                                    "calls": null
                                                  }
                                                ]
                                              },
                                              {
                                                "hash": "",
                                                "contract_name": "FiatTokenV2_1",
                                                "function_name": "add",
                                                "function_pc": 15910,
                                                "function_op": "JUMPDEST",
                                                "function_file_index": 0,
                                                "function_code_start": 926,
                                                "function_line_number": 31,
                                                "function_code_length": 176,
                                                "absolute_position": 5339,
                                                "caller_pc": 15586,
                                                "caller_op": "JUMP",
                                                "caller_file_index": 0,
                                                "caller_line_number": 883,
                                                "caller_code_start": 28333,
                                                "caller_code_length": 23,
                                                "call_type": "JUMPDEST",
                                                "from": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                                "from_balance": null,
                                                "to": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
                                                "to_balance": null,
                                                "value": null,
                                                "caller": {
                                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                                  "balance": "0"
                                                },
                                                "block_timestamp": "0001-01-01T00:00:00Z",
                                                "gas": 104095,
                                                "gas_used": 59,
                                                "input": "0x",
                                                "decoded_input": [
                                                  {
                                                    "soltype": {
                                                      "name": "a",
                                                      "type": "uint256",
                                                      "storage_location": "default",
                                                      "components": null,
                                                      "offset": 0,
                                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      "indexed": false,
                                                      "simple_type": {
                                                        "type": "uint"
                                                      }
                                                    },
                                                    "value": "165223"
                                                  },
                                                  {
                                                    "soltype": {
                                                      "name": "b",
                                                      "type": "uint256",
                                                      "storage_location": "default",
                                                      "components": null,
                                                      "offset": 0,
                                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      "indexed": false,
                                                      "simple_type": {
                                                        "type": "uint"
                                                      }
                                                    },
                                                    "value": "164942"
                                                  }
                                                ],
                                                "output": "0x",
                                                "decoded_output": [
                                                  {
                                                    "soltype": {
                                                      "name": "",
                                                      "type": "uint256",
                                                      "storage_location": "default",
                                                      "components": null,
                                                      "offset": 0,
                                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      "indexed": false,
                                                      "simple_type": {
                                                        "type": "uint"
                                                      }
                                                    },
                                                    "value": "330165"
                                                  }
                                                ],
                                                "network_id": "",
                                                "calls": null
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "balance1",
                        "function_pc": 15901,
                        "function_op": "JUMPDEST",
                        "function_file_index": 1,
                        "function_code_start": 5819,
                        "function_line_number": 150,
                        "function_code_length": 297,
                        "absolute_position": 5531,
                        "caller_pc": 4903,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 781,
                        "caller_code_start": 31559,
                        "caller_code_length": 10,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "100000000000000"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 102712,
                        "gas_used": 5890,
                        "input": "0x",
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "49860627167592373406717"
                          }
                        ],
                        "network_id": "",
                        "calls": [
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "balanceOf",
                            "function_pc": 661,
                            "function_op": "JUMPDEST",
                            "function_file_index": 0,
                            "function_code_start": 1169,
                            "function_line_number": 32,
                            "function_code_length": 65,
                            "absolute_position": 5788,
                            "caller_pc": 15774,
                            "caller_op": "STATICCALL",
                            "caller_file_index": 1,
                            "caller_line_number": 142,
                            "caller_code_start": 5448,
                            "caller_code_length": 90,
                            "call_type": "STATICCALL",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": "0",
                            "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "to_balance": "3925741668255276763639116",
                            "value": null,
                            "caller": {
                              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                              "balance": "0"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 98050,
                            "gas_used": 2534,
                            "refund_gas": 1556,
                            "input": "0x70a0823100000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                              }
                            ],
                            "output": "0x000000000000000000000000000000000000000000000a8ef3342c00269dcbfd",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "49860627167592373406717"
                              }
                            ],
                            "network_id": "",
                            "calls": null
                          }
                        ]
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "uniswapV3SwapCallback",
                        "function_pc": 9370,
                        "function_op": "JUMPDEST",
                        "function_file_index": 44,
                        "function_code_start": 1865,
                        "function_line_number": 46,
                        "function_code_length": 1321,
                        "absolute_position": 7364,
                        "caller_pc": 5039,
                        "caller_op": "CALL",
                        "caller_file_index": 1,
                        "caller_line_number": 782,
                        "caller_code_start": 31583,
                        "caller_code_length": 80,
                        "call_type": "CALL",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": "0",
                        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                        "to_balance": "100000000000000",
                        "value": "0",
                        "caller": {
                          "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                          "balance": "0"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 94766,
                        "gas_used": 40545,
                        "refund_gas": 1504,
                        "input": "0xfa461e33fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7bb200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "amount0Delta",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "-164942"
                          },
                          {
                            "soltype": {
                              "name": "amount1Delta",
                              "type": "int256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "int"
                              }
                            },
                            "value": "100000000000000"
                          },
                          {
                            "soltype": {
                              "name": "_data",
                              "type": "bytes",
                              "storage_location": "calldata",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "bytes"
                              }
                            },
                            "value": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": null,
                        "network_id": "",
                        "calls": [
                          {
                            "hash": "",
                            "contract_name": "SwapRouter02",
                            "function_name": "decodeFirstPool",
                            "function_pc": 13300,
                            "function_op": "JUMPDEST",
                            "function_file_index": 39,
                            "function_code_start": 1779,
                            "function_line_number": 42,
                            "function_code_length": 314,
                            "absolute_position": 6359,
                            "caller_pc": 9427,
                            "caller_op": "JUMP",
                            "caller_file_index": 44,
                            "caller_line_number": 53,
                            "caller_code_start": 2264,
                            "caller_code_length": 27,
                            "call_type": "JUMPDEST",
                            "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "from_balance": null,
                            "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                              "balance": "0"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 93402,
                            "gas_used": 420,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "path",
                                  "type": "bytes",
                                  "storage_location": "memory",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "bytes"
                                  }
                                },
                                "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "tokenA",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                              },
                              {
                                "soltype": {
                                  "name": "tokenB",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                              },
                              {
                                "soltype": {
                                  "name": "fee",
                                  "type": "uint24",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "1072762841456390271104015014619925727908479502529670939124"
                              }
                            ],
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "SwapRouter02",
                                "function_name": "toAddress",
                                "function_pc": 16509,
                                "function_op": "JUMPDEST",
                                "function_file_index": 36,
                                "function_code_start": 3412,
                                "function_line_number": 78,
                                "function_code_length": 416,
                                "absolute_position": 6368,
                                "caller_pc": 13313,
                                "caller_op": "JUMP",
                                "caller_file_index": 39,
                                "caller_line_number": 51,
                                "caller_code_start": 1983,
                                "caller_code_length": 17,
                                "call_type": "JUMPDEST",
                                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "from_balance": null,
                                "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 93372,
                                "gas_used": 107,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "_bytes",
                                      "type": "bytes",
                                      "storage_location": "memory",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "bytes"
                                      }
                                    },
                                    "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                                  },
                                  {
                                    "soltype": {
                                      "name": "_start",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "0"
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "",
                                      "type": "address",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                                  }
                                ],
                                "network_id": "",
                                "calls": null
                              },
                              {
                                "hash": "",
                                "contract_name": "SwapRouter02",
                                "function_name": "toUint24",
                                "function_pc": 16765,
                                "function_op": "JUMPDEST",
                                "function_file_index": 36,
                                "function_code_start": 3834,
                                "function_line_number": 90,
                                "function_code_length": 365,
                                "absolute_position": 6407,
                                "caller_pc": 13326,
                                "caller_op": "JUMP",
                                "caller_file_index": 39,
                                "caller_line_number": 52,
                                "caller_code_start": 2016,
                                "caller_code_length": 24,
                                "call_type": "JUMPDEST",
                                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "from_balance": null,
                                "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 93239,
                                "gas_used": 96,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "_bytes",
                                      "type": "bytes",
                                      "storage_location": "memory",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "bytes"
                                      }
                                    },
                                    "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                                  },
                                  {
                                    "soltype": {
                                      "name": "_start",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "20"
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "",
                                      "type": "uint24",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "1072762841456390271104015014619925727908479502529670939124"
                                  }
                                ],
                                "network_id": "",
                                "calls": null
                              },
                              {
                                "hash": "",
                                "contract_name": "SwapRouter02",
                                "function_name": "toAddress",
                                "function_pc": 16509,
                                "function_op": "JUMPDEST",
                                "function_file_index": 36,
                                "function_code_start": 3412,
                                "function_line_number": 78,
                                "function_code_length": 416,
                                "absolute_position": 6443,
                                "caller_pc": 13339,
                                "caller_op": "JUMP",
                                "caller_file_index": 39,
                                "caller_line_number": 53,
                                "caller_code_start": 2059,
                                "caller_code_length": 27,
                                "call_type": "JUMPDEST",
                                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "from_balance": null,
                                "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 93117,
                                "gas_used": 107,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "_bytes",
                                      "type": "bytes",
                                      "storage_location": "memory",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "bytes"
                                      }
                                    },
                                    "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                                  },
                                  {
                                    "soltype": {
                                      "name": "_start",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "23"
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "",
                                      "type": "address",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                                  }
                                ],
                                "network_id": "",
                                "calls": null
                              }
                            ]
                          },
                          {
                            "hash": "",
                            "contract_name": "SwapRouter02",
                            "function_name": "verifyCallback",
                            "function_pc": 19646,
                            "function_op": "JUMPDEST",
                            "function_file_index": 37,
                            "function_code_start": 1189,
                            "function_line_number": 28,
                            "function_code_length": 279,
                            "absolute_position": 6591,
                            "caller_pc": 9477,
                            "caller_op": "JUMP",
                            "caller_file_index": 44,
                            "caller_line_number": 54,
                            "caller_code_start": 2301,
                            "caller_code_length": 66,
                            "call_type": "JUMPDEST",
                            "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "from_balance": null,
                            "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                              "balance": "0"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 92940,
                            "gas_used": 913,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "factory",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0x1f98431c8ad98523631ae4a59f267346ea31f984"
                              },
                              {
                                "soltype": {
                                  "name": "poolKey",
                                  "type": "tuple",
                                  "storage_location": "memory",
                                  "components": [
                                    {
                                      "name": "token0",
                                      "type": "address",
                                      "storage_location": "memory",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    {
                                      "name": "token1",
                                      "type": "address",
                                      "storage_location": "memory",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    {
                                      "name": "fee",
                                      "type": "uint24",
                                      "storage_location": "memory",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    }
                                  ],
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false
                                },
                                "value": {
                                  "token0": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                  "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                  "fee": "500"
                                }
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "pool",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                              }
                            ],
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "SwapRouter02",
                                "function_name": "getPoolKey",
                                "function_pc": 19521,
                                "function_op": "JUMPDEST",
                                "function_file_index": 40,
                                "function_code_start": 784,
                                "function_line_number": 20,
                                "function_code_length": 274,
                                "absolute_position": 6507,
                                "caller_pc": 15566,
                                "caller_op": "JUMP",
                                "caller_file_index": 37,
                                "caller_line_number": 21,
                                "caller_code_start": 891,
                                "caller_code_length": 43,
                                "call_type": "JUMPDEST",
                                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "from_balance": null,
                                "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 92907,
                                "gas_used": 271,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "tokenA",
                                      "type": "address",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                                  },
                                  {
                                    "soltype": {
                                      "name": "tokenB",
                                      "type": "address",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                                  },
                                  {
                                    "soltype": {
                                      "name": "fee",
                                      "type": "uint24",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "1072762841456390271104015014619925727908479502529670939124"
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "",
                                      "type": "tuple",
                                      "storage_location": "memory",
                                      "components": [
                                        {
                                          "name": "token0",
                                          "type": "address",
                                          "storage_location": "memory",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        {
                                          "name": "token1",
                                          "type": "address",
                                          "storage_location": "memory",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        {
                                          "name": "fee",
                                          "type": "uint24",
                                          "storage_location": "memory",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        }
                                      ],
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false
                                    },
                                    "value": {
                                      "token0": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                      "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                      "fee": "500"
                                    }
                                  }
                                ],
                                "network_id": "",
                                "calls": null
                              },
                              {
                                "hash": "",
                                "contract_name": "SwapRouter02",
                                "function_name": "computeAddress",
                                "function_pc": 19694,
                                "function_op": "JUMPDEST",
                                "function_file_index": 40,
                                "function_code_start": 1305,
                                "function_line_number": 33,
                                "function_code_length": 512,
                                "absolute_position": 6598,
                                "caller_pc": 19657,
                                "caller_op": "JUMP",
                                "caller_file_index": 37,
                                "caller_line_number": 33,
                                "caller_code_start": 1370,
                                "caller_code_length": 44,
                                "call_type": "JUMPDEST",
                                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "from_balance": null,
                                "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "to_balance": null,
                                "value": null,
                                "caller": {
                                  "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 92600,
                                "gas_used": 521,
                                "input": "0x",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "factory",
                                      "type": "address",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    "value": "0x1f98431c8ad98523631ae4a59f267346ea31f984"
                                  },
                                  {
                                    "soltype": {
                                      "name": "key",
                                      "type": "tuple",
                                      "storage_location": "memory",
                                      "components": [
                                        {
                                          "name": "token0",
                                          "type": "address",
                                          "storage_location": "memory",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        {
                                          "name": "token1",
                                          "type": "address",
                                          "storage_location": "memory",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        {
                                          "name": "fee",
                                          "type": "uint24",
                                          "storage_location": "memory",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        }
                                      ],
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false
                                    },
                                    "value": {
                                      "token0": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                                      "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                      "fee": "500"
                                    }
                                  }
                                ],
                                "output": "0x",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "pool",
                                      "type": "address",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                                  }
                                ],
                                "network_id": "",
                                "calls": null
                              }
                            ]
                          },
                          {
                            "hash": "",
                            "contract_name": "SwapRouter02",
                            "function_name": "pay",
                            "function_pc": 11661,
                            "function_op": "JUMPDEST",
                            "function_file_index": 22,
                            "function_code_start": 1757,
                            "function_line_number": 52,
                            "function_code_length": 699,
                            "absolute_position": 6794,
                            "caller_pc": 9617,
                            "caller_op": "JUMP",
                            "caller_file_index": 44,
                            "caller_line_number": 62,
                            "caller_code_start": 2616,
                            "caller_code_length": 49,
                            "call_type": "JUMPDEST",
                            "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "from_balance": null,
                            "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "to_balance": null,
                            "value": null,
                            "caller": {
                              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                              "balance": "0"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 91872,
                            "gas_used": 37610,
                            "input": "0x",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "token",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                              },
                              {
                                "soltype": {
                                  "name": "payer",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
                              },
                              {
                                "soltype": {
                                  "name": "recipient",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                              },
                              {
                                "soltype": {
                                  "name": "value",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "100000000000000"
                              }
                            ],
                            "output": "0x",
                            "decoded_output": [],
                            "network_id": "",
                            "calls": [
                              {
                                "hash": "",
                                "contract_name": "SwapRouter02",
                                "function_name": "deposit",
                                "function_pc": 970,
                                "function_op": "JUMPDEST",
                                "function_file_index": 0,
                                "function_code_start": 1369,
                                "function_line_number": 38,
                                "function_code_length": 125,
                                "absolute_position": 6978,
                                "caller_pc": 11864,
                                "caller_op": "CALL",
                                "caller_file_index": 22,
                                "caller_line_number": 60,
                                "caller_code_start": 1989,
                                "caller_code_length": 37,
                                "call_type": "CALL",
                                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "from_balance": "100000000000000",
                                "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                "to_balance": "3925741668255276763639116",
                                "value": "100000000000000",
                                "caller": {
                                  "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 83503,
                                "gas_used": 23974,
                                "refund_gas": 1288,
                                "input": "0xd0e30db0",
                                "output": "0x",
                                "decoded_output": null,
                                "network_id": "",
                                "calls": null
                              },
                              {
                                "hash": "",
                                "contract_name": "SwapRouter02",
                                "function_name": "transfer",
                                "function_pc": 880,
                                "function_op": "JUMPDEST",
                                "function_file_index": 0,
                                "function_code_start": 1973,
                                "function_line_number": 59,
                                "function_code_length": 121,
                                "absolute_position": 7316,
                                "caller_pc": 12034,
                                "caller_op": "CALL",
                                "caller_file_index": 22,
                                "caller_line_number": 61,
                                "caller_code_start": 2075,
                                "caller_code_length": 40,
                                "call_type": "CALL",
                                "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                "from_balance": "0",
                                "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                "to_balance": "3925741668355276763639116",
                                "value": "0",
                                "caller": {
                                  "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                  "balance": "0"
                                },
                                "block_timestamp": "0001-01-01T00:00:00Z",
                                "gas": 59481,
                                "gas_used": 6062,
                                "refund_gas": 944,
                                "input": "0xa9059cbb00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f564000000000000000000000000000000000000000000000000000005af3107a4000",
                                "decoded_input": [
                                  {
                                    "soltype": {
                                      "name": "dst",
                                      "type": "address",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "address"
                                      }
                                    },
                                    "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                                  },
                                  {
                                    "soltype": {
                                      "name": "wad",
                                      "type": "uint256",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "uint"
                                      }
                                    },
                                    "value": "100000000000000"
                                  }
                                ],
                                "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
                                "decoded_output": [
                                  {
                                    "soltype": {
                                      "name": "",
                                      "type": "bool",
                                      "storage_location": "default",
                                      "components": null,
                                      "offset": 0,
                                      "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                      "indexed": false,
                                      "simple_type": {
                                        "type": "bool"
                                      }
                                    },
                                    "value": true
                                  }
                                ],
                                "network_id": "",
                                "calls": [
                                  {
                                    "hash": "",
                                    "contract_name": "WETH9",
                                    "function_name": "transferFrom",
                                    "function_pc": 1676,
                                    "function_op": "JUMPDEST",
                                    "function_file_index": 0,
                                    "function_code_start": 2100,
                                    "function_line_number": 63,
                                    "function_code_length": 455,
                                    "function_emits": [
                                      {
                                        "name": "Transfer",
                                        "anonymous": false,
                                        "inputs": [
                                          {
                                            "soltype": {
                                              "name": "src",
                                              "type": "address",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "address"
                                              }
                                            },
                                            "value": "0xfc378daa952ba7f163c4a11628f55a4df523b3ef"
                                          },
                                          {
                                            "soltype": {
                                              "name": "dst",
                                              "type": "address",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "address"
                                              }
                                            },
                                            "value": "0xfc378daa952ba7f163c4a11628f55a4df523b3ef"
                                          },
                                          {
                                            "soltype": {
                                              "name": "wad",
                                              "type": "uint256",
                                              "storage_location": "default",
                                              "components": null,
                                              "offset": 0,
                                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                              "indexed": false,
                                              "simple_type": {
                                                "type": "uint"
                                              }
                                            },
                                            "value": "100000000000000"
                                          }
                                        ],
                                        "raw": {
                                          "address": "",
                                          "topics": null,
                                          "data": ""
                                        }
                                      }
                                    ],
                                    "absolute_position": 7142,
                                    "caller_pc": 3034,
                                    "caller_op": "JUMP",
                                    "caller_file_index": 0,
                                    "caller_line_number": 60,
                                    "caller_code_start": 2053,
                                    "caller_code_length": 34,
                                    "call_type": "JUMPDEST",
                                    "from": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                    "from_balance": null,
                                    "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                    "to_balance": null,
                                    "value": null,
                                    "caller": {
                                      "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                                      "balance": "0"
                                    },
                                    "block_timestamp": "0001-01-01T00:00:00Z",
                                    "gas": 59096,
                                    "gas_used": 5592,
                                    "input": "0x",
                                    "decoded_input": [
                                      {
                                        "soltype": {
                                          "name": "src",
                                          "type": "address",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        "value": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45"
                                      },
                                      {
                                        "soltype": {
                                          "name": "dst",
                                          "type": "address",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "address"
                                          }
                                        },
                                        "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                                      },
                                      {
                                        "soltype": {
                                          "name": "wad",
                                          "type": "uint256",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "uint"
                                          }
                                        },
                                        "value": "100000000000000"
                                      }
                                    ],
                                    "output": "0x",
                                    "decoded_output": [
                                      {
                                        "soltype": {
                                          "name": "",
                                          "type": "bool",
                                          "storage_location": "default",
                                          "components": null,
                                          "offset": 0,
                                          "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                          "indexed": false,
                                          "simple_type": {
                                            "type": "bool"
                                          }
                                        },
                                        "value": true
                                      }
                                    ],
                                    "network_id": "",
                                    "calls": null
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "balance1",
                        "function_pc": 15901,
                        "function_op": "JUMPDEST",
                        "function_file_index": 1,
                        "function_code_start": 5819,
                        "function_line_number": 150,
                        "function_code_length": 297,
                        "absolute_position": 7377,
                        "caller_pc": 5067,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 783,
                        "caller_code_start": 31725,
                        "caller_code_length": 10,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "0"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 55679,
                        "gas_used": 1380,
                        "input": "0x",
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "49860627267592373406717"
                          }
                        ],
                        "network_id": "",
                        "calls": [
                          {
                            "hash": "",
                            "contract_name": "UniswapV3Pool",
                            "function_name": "balanceOf",
                            "function_pc": 661,
                            "function_op": "JUMPDEST",
                            "function_file_index": 0,
                            "function_code_start": 1169,
                            "function_line_number": 32,
                            "function_code_length": 65,
                            "absolute_position": 7634,
                            "caller_pc": 15774,
                            "caller_op": "STATICCALL",
                            "caller_file_index": 1,
                            "caller_line_number": 142,
                            "caller_code_start": 5448,
                            "caller_code_length": 90,
                            "call_type": "STATICCALL",
                            "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "from_balance": "0",
                            "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "to_balance": "3925741668355276763639116",
                            "value": null,
                            "caller": {
                              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                              "balance": "0"
                            },
                            "block_timestamp": "0001-01-01T00:00:00Z",
                            "gas": 54223,
                            "gas_used": 534,
                            "refund_gas": 860,
                            "input": "0x70a0823100000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                            "decoded_input": [
                              {
                                "soltype": {
                                  "name": "",
                                  "type": "address",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "address"
                                  }
                                },
                                "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                              }
                            ],
                            "output": "0x000000000000000000000000000000000000000000000a8ef33486f337180bfd",
                            "decoded_output": [
                              {
                                "soltype": {
                                  "name": "",
                                  "type": "uint256",
                                  "storage_location": "default",
                                  "components": null,
                                  "offset": 0,
                                  "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                  "indexed": false,
                                  "simple_type": {
                                    "type": "uint"
                                  }
                                },
                                "value": "49860627267592373406717"
                              }
                            ],
                            "network_id": "",
                            "calls": null
                          }
                        ]
                      },
                      {
                        "hash": "",
                        "contract_name": "UniswapV3Pool",
                        "function_name": "add",
                        "function_pc": 15885,
                        "function_op": "JUMPDEST",
                        "function_file_index": 20,
                        "function_code_start": 435,
                        "function_line_number": 11,
                        "function_code_length": 111,
                        "absolute_position": 7717,
                        "caller_pc": 5077,
                        "caller_op": "JUMP",
                        "caller_file_index": 1,
                        "caller_line_number": 783,
                        "caller_code_start": 31685,
                        "caller_code_length": 36,
                        "call_type": "JUMPDEST",
                        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "from_balance": null,
                        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                        "to_balance": null,
                        "value": null,
                        "caller": {
                          "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                          "balance": "0"
                        },
                        "block_timestamp": "0001-01-01T00:00:00Z",
                        "gas": 54278,
                        "gas_used": 54,
                        "input": "0x",
                        "decoded_input": [
                          {
                            "soltype": {
                              "name": "x",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "49860627167592373406717"
                          },
                          {
                            "soltype": {
                              "name": "y",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "100000000000000"
                          }
                        ],
                        "output": "0x",
                        "decoded_output": [
                          {
                            "soltype": {
                              "name": "z",
                              "type": "uint256",
                              "storage_location": "default",
                              "components": null,
                              "offset": 0,
                              "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "indexed": false,
                              "simple_type": {
                                "type": "uint"
                              }
                            },
                            "value": "49860627267592373406717"
                          }
                        ],
                        "network_id": "",
                        "calls": null
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "stack_trace": null,
      "logs": [
        {
          "name": "Transfer",
          "anonymous": false,
          "inputs": [
            {
              "soltype": {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
            },
            {
              "soltype": {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
            }
          ],
          "raw": {
            "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
            "topics": [
              "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
              "0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
              "0x00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
            ],
            "data": "0x000000000000000000000000000000000000000000000000000000000002844e"
          }
        },
        {
          "name": "Deposit",
          "anonymous": false,
          "inputs": [
            {
              "soltype": {
                "name": "dst",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              "value": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45"
            },
            {
              "soltype": {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              "value": "100000000000000"
            }
          ],
          "raw": {
            "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
            "topics": [
              "0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c",
              "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45"
            ],
            "data": "0x00000000000000000000000000000000000000000000000000005af3107a4000"
          }
        },
        {
          "name": "Transfer",
          "anonymous": false,
          "inputs": [
            {
              "soltype": {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              "value": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45"
            },
            {
              "soltype": {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              "value": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
            }
          ],
          "raw": {
            "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
            "topics": [
              "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
              "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
              "0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
            ],
            "data": "0x00000000000000000000000000000000000000000000000000005af3107a4000"
          }
        },
        {
          "name": "Swap",
          "anonymous": false,
          "inputs": [
            {
              "soltype": {
                "name": "sender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              "value": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45"
            },
            {
              "soltype": {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              "value": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
            },
            {
              "soltype": {
                "name": "amount0",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              "value": "-164942"
            },
            {
              "soltype": {
                "name": "amount1",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              "value": "100000000000000"
            },
            {
              "soltype": {
                "name": "sqrtPriceX96",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              "value": "1950311997247602375265771494296640"
            },
            {
              "soltype": {
                "name": "liquidity",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              "value": "227121953921659287429"
            },
            {
              "soltype": {
                "name": "tick",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              "value": "202233"
            }
          ],
          "raw": {
            "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
            "topics": [
              "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67",
              "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
              "0x00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2"
            ],
            "data": "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7bb200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000602865f08d83ae95a461e8cfcc4000000000000000000000000000000000000000000000000c4ff345bf8123b78500000000000000000000000000000000000000000000000000000000000315f9"
          }
        }
      ],
      "balance_diff": [
        {
          "address": "0x0000000000000000000000000000000000000000",
          "original": "11497872037908024053364",
          "dirty": "11497874713305733189204",
          "is_miner": true
        },
        {
          "address": "0x29Ff2e635634A3C36932CAeB45b1a8E9cCDB24B2",
          "original": "70004889369065157",
          "dirty": "67229491659808313",
          "is_miner": false
        },
        {
          "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "original": "3925741668255276763639116",
          "dirty": "3925741668355276763639116",
          "is_miner": false
        }
      ],
      "nonce_diff": [
        {
          "address": "0x29Ff2e635634A3C36932CAeB45b1a8E9cCDB24B2",
          "original": "12",
          "dirty": "13"
        }
      ],
      "state_diff": [
        {
          "soltype": null,
          "original": null,
          "dirty": null,
          "raw": [
            {
              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
              "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
              "original": "0x00010002d002d002520315f9000000000000602865f08621965d30b1696677f2",
              "dirty": "0x00010002d002d002520315f9000000000000602865f08d83ae95a461e8cfcc40"
            }
          ]
        },
        {
          "soltype": {
            "name": "feeGrowthGlobal1X128",
            "type": "uint256",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000002",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          "original": "934833668926931436246160799278959650918334",
          "dirty": "934833668927006348063588697809325671623032",
          "raw": [
            {
              "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
              "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
              "original": "0x00000000000000000000000000000abb3aaf99cc75eb08c85f1678189aafcfbe",
              "dirty": "0x00000000000000000000000000000abb3aaf99cd67f8a32861335612c0aca978"
            }
          ]
        },
        {
          "soltype": {
            "name": "balances",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000009",
            "indexed": false
          },
          "original": {
            "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2": "165223",
            "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "109028178195141"
          },
          "dirty": {
            "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2": "330165",
            "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "109028178030199"
          },
          "raw": [
            {
              "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "key": "0x1f21a62c4538bacf2aabeca410f0fe63151869f172e03c0e00357ba26a341eff",
              "original": "0x0000000000000000000000000000000000000000000000000000632919d4f2c5",
              "dirty": "0x0000000000000000000000000000000000000000000000000000632919d26e77"
            },
            {
              "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "key": "0x76592d60a104d25be15608e2710fb093e8780506b08b20e696087748044b66cf",
              "original": "0x0000000000000000000000000000000000000000000000000000000000028567",
              "dirty": "0x00000000000000000000000000000000000000000000000000000000000509b5"
            }
          ]
        },
        {
          "soltype": {
            "name": "balanceOf",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000003",
            "indexed": false
          },
          "original": {
            "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "49860627167592373406717"
          },
          "dirty": {
            "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640": "49860627267592373406717"
          },
          "raw": [
            {
              "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
              "key": "0x390f6178407c9b8e95802b8659e6df8e34c1e3d4f8d6a49e6132bbcdd937b63a",
              "original": "0x000000000000000000000000000000000000000000000a8ef3342c00269dcbfd",
              "dirty": "0x000000000000000000000000000000000000000000000a8ef33486f337180bfd"
            }
          ]
        }
      ],
      "raw_state_diff": null,
      "console_logs": null,
      "created_at": "2022-11-04T22:25:56Z"
    },
    "method": "",
    "decoded_input": null,
    "call_trace": [
      {
        "call_type": "CALL",
        "from": "0x29ff2e635634a3c36932caeb45b1a8e9ccdb24b2",
        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "gas": 171952,
        "gas_used": 117192,
        "value": "0x5af3107a4000",
        "subtraces": 1,
        "type": "CALL",
        "input": "0x5ae401dc000000000000000000000000000000000000000000000000000000006365966300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000020473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "output": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000002844e",
        "fromBalance": "0xf8b513736236c5"
      },
      {
        "call_type": "DELEGATECALL",
        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "gas": 167978,
        "gas_used": 115014,
        "subtraces": 1,
        "trace_address": [
          0
        ],
        "type": "CALL",
        "input": "0x04e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000204730000000000000000000000000000000000000000000000000000000000000000",
        "output": "0x000000000000000000000000000000000000000000000000000000000002844e",
        "outOff": 192,
        "gas_in": 170744,
        "gas_cost": 168078,
        "fromBalance": "0x5af3107a4000",
        "toBalance": "0x5af3107a4000"
      },
      {
        "call_type": "CALL",
        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "to": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
        "gas": 158444,
        "gas_used": 107589,
        "subtraces": 4,
        "trace_address": [
          0,
          0
        ],
        "type": "CALL",
        "input": "0x128acb0800000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000",
        "output": "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7bb200000000000000000000000000000000000000000000000000005af3107a4000",
        "outOff": 1152,
        "outLen": 64,
        "gas_in": 161058,
        "gas_cost": 158544,
        "fromBalance": "0x5af3107a4000"
      },
      {
        "call_type": "CALL",
        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
        "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
        "gas": 127878,
        "gas_used": 26917,
        "subtraces": 1,
        "trace_address": [
          0,
          0,
          0
        ],
        "type": "CALL",
        "input": "0xa9059cbb00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000002844e",
        "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "outOff": 1092,
        "gas_in": 132507,
        "gas_cost": 130478
      },
      {
        "call_type": "DELEGATECALL",
        "from": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
        "to": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
        "gas": 118749,
        "gas_used": 19628,
        "trace_address": [
          0,
          0,
          0,
          0
        ],
        "type": "CALL",
        "input": "0xa9059cbb00000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000002844e",
        "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "gas_in": 123233,
        "gas_cost": 121349
      },
      {
        "call_type": "STATICCALL",
        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
        "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "gas": 98050,
        "gas_used": 2534,
        "trace_address": [
          0,
          0,
          1
        ],
        "type": "CALL",
        "input": "0x70a0823100000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
        "output": "0x000000000000000000000000000000000000000000000a8ef3342c00269dcbfd",
        "outOff": 1224,
        "gas_in": 102206,
        "gas_cost": 100650,
        "toBalance": "0x033f4ee1dc3f64065aed4c"
      },
      {
        "call_type": "CALL",
        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
        "to": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "gas": 94766,
        "gas_used": 40545,
        "subtraces": 2,
        "trace_address": [
          0,
          0,
          2
        ],
        "type": "CALL",
        "input": "0xfa461e33fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7bb200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b2000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000",
        "outOff": 1288,
        "gas_in": 96370,
        "gas_cost": 94866,
        "toBalance": "0x5af3107a4000"
      },
      {
        "call_type": "CALL",
        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "gas": 83503,
        "gas_used": 23974,
        "value": "0x5af3107a4000",
        "trace_address": [
          0,
          0,
          2,
          0
        ],
        "type": "CALL",
        "input": "0xd0e30db0",
        "outOff": 725,
        "gas_in": 91591,
        "gas_cost": 90303,
        "fromBalance": "0x5af3107a4000",
        "toBalance": "0x033f4ee1dc3f64065aed4c"
      },
      {
        "call_type": "CALL",
        "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
        "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "gas": 59481,
        "gas_used": 6062,
        "trace_address": [
          0,
          0,
          2,
          1
        ],
        "type": "CALL",
        "input": "0xa9059cbb00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f564000000000000000000000000000000000000000000000000000005af3107a4000",
        "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "outOff": 725,
        "outLen": 32,
        "gas_in": 60525,
        "gas_cost": 59581,
        "toBalance": "0x033f4ee1dc9a5716d52d4c"
      },
      {
        "call_type": "STATICCALL",
        "from": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
        "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "gas": 54223,
        "gas_used": 534,
        "trace_address": [
          0,
          0,
          3
        ],
        "type": "CALL",
        "input": "0x70a0823100000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
        "output": "0x000000000000000000000000000000000000000000000a8ef33486f337180bfd",
        "outOff": 1356,
        "gas_in": 55183,
        "gas_cost": 54323,
        "toBalance": "0x033f4ee1dc9a5716d52d4c"
      }
    ]
  },
  "simulation": {
    "id": "e0506566-e375-433b-9216-be2a43ca1e29",
    "project_id": "e3742433-7625-49e1-9f3a-b41969eeab51",
    "owner_id": "829e3282-e1f8-44d7-b716-789dc9aa63c7",
    "network_id": "1",
    "block_number": 15899626,
    "transaction_index": 0,
    "from": "0x29Ff2e635634A3C36932CAeB45b1a8E9cCDB24B2",
    "to": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
    "input": "0x5ae401dc000000000000000000000000000000000000000000000000000000006365966300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000029ff2e635634a3c36932caeb45b1a8e9ccdb24b200000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000020473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "gas": 195664,
    "gas_price": "22109993961",
    "value": "100000000000000",
    "method": "multicall",
    "status": true,
    "access_list": null,
    "queue_origin": "",
    "block_header": {
      "number": "0xf29bea",
      "hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "stateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "parentHash": "0xf620c8907ad9607608eaa87c801328ced80a65cdd73b2220db62bbf023276d52",
      "sha3Uncles": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "transactionsRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "receiptsRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "logsBloom": "0x
      "timestamp": "0x63659174",
      "difficulty": "0x0",
      "gasLimit": "0x80c3c90100000000",
      "gasUsed": "0x10632ae",
      "miner": "0x0000000000000000000000000000000000000000",
      "extraData": "0x",
      "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "0x0000000000000000",
      "baseFeePerGas": "0x1",
      "size": "0x0",
      "totalDifficulty": "0x0",
      "uncles": null,
      "transactions": null
    },
    "created_at": "2022-11-04T22:25:56.586689581Z"
  },
  "contracts": [
    {
      "id": "eth:1:0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
      "contract_id": "eth:1:0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
      "balance": "",
      "network_id": "1",
      "public": true,
      "export": false,
      "verified_by": "etherscan",
      "verification_date": null,
      "address": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
      "contract_name": "SwapRouter02",
      "ens_domain": null,
      "type": "contract",
      "evm_version": "",
      "compiler_version": "v0.7.6+commit.7338295f",
      "optimizations_used": true,
      "optimization_runs": 1000000,
      "libraries": null,
      "data": {
        "main_contract": 42,
        "contract_info": [
          {
            "id": 32,
            "path": "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol",
            "name": "IPoolInitializer.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
          },
          {
            "id": 36,
            "path": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol",
            "name": "BytesLib.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
          },
          {
            "id": 53,
            "path": "contracts/interfaces/IImmutableState.sol",
            "name": "IImmutableState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IImmutableState {\n    /// @return Returns the address of the Uniswap V2 factory\n    function factoryV2() external view returns (address);\n\n    /// @return Returns the address of Uniswap V3 NFT position manager\n    function positionManager() external view returns (address);\n}\n"
          },
          {
            "id": 26,
            "path": "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol",
            "name": "IERC721Permit.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
          },
          {
            "id": 47,
            "path": "contracts/base/MulticallExtended.sol",
            "name": "MulticallExtended.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/base/Multicall.sol';\n\nimport '../interfaces/IMulticallExtended.sol';\nimport '../base/PeripheryValidationExtended.sol';\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract MulticallExtended is IMulticallExtended, Multicall, PeripheryValidationExtended {\n    /// @inheritdoc IMulticallExtended\n    function multicall(uint256 deadline, bytes[] calldata data)\n        external\n        payable\n        override\n        checkDeadline(deadline)\n        returns (bytes[] memory)\n    {\n        return multicall(data);\n    }\n\n    /// @inheritdoc IMulticallExtended\n    function multicall(bytes32 previousBlockhash, bytes[] calldata data)\n        external\n        payable\n        override\n        checkPreviousBlockhash(previousBlockhash)\n        returns (bytes[] memory)\n    {\n        return multicall(data);\n    }\n}\n"
          },
          {
            "id": 56,
            "path": "contracts/interfaces/IPeripheryPaymentsExtended.sol",
            "name": "IPeripheryPaymentsExtended.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol';\n\n/// @title Periphery Payments Extended\n/// @notice Functions to ease deposits and withdrawals of ETH and tokens\ninterface IPeripheryPaymentsExtended is IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to msg.sender as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    function unwrapWETH9(uint256 amountMinimum) external payable;\n\n    /// @notice Wraps the contract's ETH balance into WETH9\n    /// @dev The resulting WETH9 is custodied by the router, thus will require further distribution\n    /// @param value The amount of ETH to wrap\n    function wrapETH(uint256 value) external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to msg.sender\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to msg.sender\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    function sweepToken(address token, uint256 amountMinimum) external payable;\n\n    /// @notice Transfers the specified amount of a token from the msg.sender to address(this)\n    /// @param token The token to pull\n    /// @param value The amount to pay\n    function pull(address token, uint256 value) external payable;\n}\n"
          },
          {
            "id": 43,
            "path": "contracts/V2SwapRouter.sol",
            "name": "V2SwapRouter.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './interfaces/IV2SwapRouter.sol';\nimport './base/ImmutableState.sol';\nimport './base/PeripheryPaymentsWithFeeExtended.sol';\nimport './libraries/Constants.sol';\nimport './libraries/UniswapV2Library.sol';\n\n/// @title Uniswap V2 Swap Router\n/// @notice Router for stateless execution of swaps against Uniswap V2\nabstract contract V2SwapRouter is IV2SwapRouter, ImmutableState, PeripheryPaymentsWithFeeExtended {\n    using LowGasSafeMath for uint256;\n\n    // supports fee-on-transfer tokens\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(address[] memory path, address _to) private {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factoryV2, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            // scope to avoid stack too deep errors\n            {\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) =\n                    input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n                amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint256 amount0Out, uint256 amount1Out) =\n                input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factoryV2, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    /// @inheritdoc IV2SwapRouter\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to\n    ) external payable override returns (uint256 amountOut) {\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n        bool hasAlreadyPaid;\n        if (amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            amountIn = IERC20(path[0]).balanceOf(address(this));\n        }\n\n        pay(\n            path[0],\n            hasAlreadyPaid ? address(this) : msg.sender,\n            UniswapV2Library.pairFor(factoryV2, path[0], path[1]),\n            amountIn\n        );\n\n        // find and replace to addresses\n        if (to == Constants.MSG_SENDER) to = msg.sender;\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\n\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n\n        _swap(path, to);\n\n        amountOut = IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore);\n        require(amountOut >= amountOutMin, 'Too little received');\n    }\n\n    /// @inheritdoc IV2SwapRouter\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to\n    ) external payable override returns (uint256 amountIn) {\n        amountIn = UniswapV2Library.getAmountsIn(factoryV2, amountOut, path)[0];\n        require(amountIn <= amountInMax, 'Too much requested');\n\n        pay(path[0], msg.sender, UniswapV2Library.pairFor(factoryV2, path[0], path[1]), amountIn);\n\n        // find and replace to addresses\n        if (to == Constants.MSG_SENDER) to = msg.sender;\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\n\n        _swap(path, to);\n    }\n}\n"
          },
          {
            "id": 8,
            "path": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
            "name": "IUniswapV3SwapCallback.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
          },
          {
            "id": 10,
            "path": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
            "name": "IUniswapV3PoolDerivedState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
          },
          {
            "id": 11,
            "path": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
            "name": "IUniswapV3PoolEvents.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
          },
          {
            "id": 49,
            "path": "contracts/base/PeripheryPaymentsExtended.sol",
            "name": "PeripheryPaymentsExtended.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@uniswap/v3-periphery/contracts/base/PeripheryPayments.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\n\nimport '../interfaces/IPeripheryPaymentsExtended.sol';\n\nabstract contract PeripheryPaymentsExtended is IPeripheryPaymentsExtended, PeripheryPayments {\n    /// @inheritdoc IPeripheryPaymentsExtended\n    function unwrapWETH9(uint256 amountMinimum) external payable override {\n        unwrapWETH9(amountMinimum, msg.sender);\n    }\n\n    /// @inheritdoc IPeripheryPaymentsExtended\n    function wrapETH(uint256 value) external payable override {\n        IWETH9(WETH9).deposit{value: value}();\n    }\n\n    /// @inheritdoc IPeripheryPaymentsExtended\n    function sweepToken(address token, uint256 amountMinimum) external payable override {\n        sweepToken(token, amountMinimum, msg.sender);\n    }\n\n    /// @inheritdoc IPeripheryPaymentsExtended\n    function pull(address token, uint256 value) external payable override {\n        TransferHelper.safeTransferFrom(token, msg.sender, address(this), value);\n    }\n}\n"
          },
          {
            "id": 55,
            "path": "contracts/interfaces/IOracleSlippage.sol",
            "name": "IOracleSlippage.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title OracleSlippage interface\n/// @notice Enables slippage checks against oracle prices\ninterface IOracleSlippage {\n    /// @notice Ensures that the current (synthetic) tick over the path is no worse than\n    /// `maximumTickDivergence` ticks away from the average as of `secondsAgo`\n    /// @param path The path to fetch prices over\n    /// @param maximumTickDivergence The maximum number of ticks that the price can degrade by\n    /// @param secondsAgo The number of seconds ago to compute oracle prices against\n    function checkOracleSlippage(\n        bytes memory path,\n        uint24 maximumTickDivergence,\n        uint32 secondsAgo\n    ) external view;\n\n    /// @notice Ensures that the weighted average current (synthetic) tick over the path is no\n    /// worse than `maximumTickDivergence` ticks away from the average as of `secondsAgo`\n    /// @param paths The paths to fetch prices over\n    /// @param amounts The weights for each entry in `paths`\n    /// @param maximumTickDivergence The maximum number of ticks that the price can degrade by\n    /// @param secondsAgo The number of seconds ago to compute oracle prices against\n    function checkOracleSlippage(\n        bytes[] memory paths,\n        uint128[] memory amounts,\n        uint24 maximumTickDivergence,\n        uint32 secondsAgo\n    ) external view;\n}\n"
          },
          {
            "id": 58,
            "path": "contracts/interfaces/ISwapRouter02.sol",
            "name": "ISwapRouter02.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol';\n\nimport './IV2SwapRouter.sol';\nimport './IV3SwapRouter.sol';\nimport './IApproveAndCall.sol';\nimport './IMulticallExtended.sol';\n\n/// @title Router token swapping functionality\ninterface ISwapRouter02 is IV2SwapRouter, IV3SwapRouter, IApproveAndCall, IMulticallExtended, ISelfPermit {\n\n}\n"
          },
          {
            "id": 0,
            "path": "@openzeppelin/contracts/drafts/IERC20Permit.sol",
            "name": "IERC20Permit.sol",
            "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
          },
          {
            "id": 48,
            "path": "contracts/base/OracleSlippage.sol",
            "name": "OracleSlippage.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '../interfaces/IOracleSlippage.sol';\n\nimport '@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol';\nimport '@uniswap/v3-periphery/contracts/base/BlockTimestamp.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/Path.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol';\n\nabstract contract OracleSlippage is IOracleSlippage, PeripheryImmutableState, BlockTimestamp {\n    using Path for bytes;\n\n    /// @dev Returns the tick as of the beginning of the current block, and as of right now, for the given pool.\n    function getBlockStartingAndCurrentTick(IUniswapV3Pool pool)\n        internal\n        view\n        returns (int24 blockStartingTick, int24 currentTick)\n    {\n        uint16 observationIndex;\n        uint16 observationCardinality;\n        (, currentTick, observationIndex, observationCardinality, , , ) = pool.slot0();\n\n        // 2 observations are needed to reliably calculate the block starting tick\n        require(observationCardinality > 1, 'NEO');\n\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\n        (uint32 observationTimestamp, int56 tickCumulative, , ) = pool.observations(observationIndex);\n        if (observationTimestamp != uint32(_blockTimestamp())) {\n            blockStartingTick = currentTick;\n        } else {\n            uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\n            (uint32 prevObservationTimestamp, int56 prevTickCumulative, , bool prevInitialized) =\n                pool.observations(prevIndex);\n\n            require(prevInitialized, 'ONI');\n\n            uint32 delta = observationTimestamp - prevObservationTimestamp;\n            blockStartingTick = int24((tickCumulative - prevTickCumulative) / delta);\n        }\n    }\n\n    /// @dev Virtual function to get pool addresses that can be overridden in tests.\n    function getPoolAddress(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view virtual returns (IUniswapV3Pool pool) {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    /// @dev Returns the synthetic time-weighted average tick as of secondsAgo, as well as the current tick,\n    /// for the given path. Returned synthetic ticks always represent tokenOut/tokenIn prices,\n    /// meaning lower ticks are worse.\n    function getSyntheticTicks(bytes memory path, uint32 secondsAgo)\n        internal\n        view\n        returns (int256 syntheticAverageTick, int256 syntheticCurrentTick)\n    {\n        bool lowerTicksAreWorse;\n\n        uint256 numPools = path.numPools();\n        address previousTokenIn;\n        for (uint256 i = 0; i < numPools; i++) {\n            // this assumes the path is sorted in swap order\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n            IUniswapV3Pool pool = getPoolAddress(tokenIn, tokenOut, fee);\n\n            // get the average and current ticks for the current pool\n            int256 averageTick;\n            int256 currentTick;\n            if (secondsAgo == 0) {\n                // we optimize for the secondsAgo == 0 case, i.e. since the beginning of the block\n                (averageTick, currentTick) = getBlockStartingAndCurrentTick(pool);\n            } else {\n                (averageTick, ) = OracleLibrary.consult(address(pool), secondsAgo);\n                (, currentTick, , , , , ) = IUniswapV3Pool(pool).slot0();\n            }\n\n            if (i == numPools - 1) {\n                // if we're here, this is the last pool in the path, meaning tokenOut represents the\n                // destination token. so, if tokenIn < tokenOut, then tokenIn is token0 of the last pool,\n                // meaning the current running ticks are going to represent tokenOut/tokenIn prices.\n                // so, the lower these prices get, the worse of a price the swap will get\n                lowerTicksAreWorse = tokenIn < tokenOut;\n            } else {\n                // if we're here, we need to iterate over the next pool in the path\n                path = path.skipToken();\n                previousTokenIn = tokenIn;\n            }\n\n            // accumulate the ticks derived from the current pool into the running synthetic ticks,\n            // ensuring that intermediate tokens \"cancel out\"\n            bool add = (i == 0) || (previousTokenIn < tokenIn ? tokenIn < tokenOut : tokenOut < tokenIn);\n            if (add) {\n                syntheticAverageTick += averageTick;\n                syntheticCurrentTick += currentTick;\n            } else {\n                syntheticAverageTick -= averageTick;\n                syntheticCurrentTick -= currentTick;\n            }\n        }\n\n        // flip the sign of the ticks if necessary, to ensure that the lower ticks are always worse\n        if (!lowerTicksAreWorse) {\n            syntheticAverageTick *= -1;\n            syntheticCurrentTick *= -1;\n        }\n    }\n\n    /// @dev Cast a int256 to a int24, revert on overflow or underflow\n    function toInt24(int256 y) private pure returns (int24 z) {\n        require((z = int24(y)) == y);\n    }\n\n    /// @dev For each passed path, fetches the synthetic time-weighted average tick as of secondsAgo,\n    /// as well as the current tick. Then, synthetic ticks from all paths are subjected to a weighted\n    /// average, where the weights are the fraction of the total input amount allocated to each path.\n    /// Returned synthetic ticks always represent tokenOut/tokenIn prices, meaning lower ticks are worse.\n    /// Paths must all start and end in the same token.\n    function getSyntheticTicks(\n        bytes[] memory paths,\n        uint128[] memory amounts,\n        uint32 secondsAgo\n    ) internal view returns (int256 averageSyntheticAverageTick, int256 averageSyntheticCurrentTick) {\n        require(paths.length == amounts.length);\n\n        OracleLibrary.WeightedTickData[] memory weightedSyntheticAverageTicks =\n            new OracleLibrary.WeightedTickData[](paths.length);\n        OracleLibrary.WeightedTickData[] memory weightedSyntheticCurrentTicks =\n            new OracleLibrary.WeightedTickData[](paths.length);\n\n        for (uint256 i = 0; i < paths.length; i++) {\n            (int256 syntheticAverageTick, int256 syntheticCurrentTick) = getSyntheticTicks(paths[i], secondsAgo);\n            weightedSyntheticAverageTicks[i].tick = toInt24(syntheticAverageTick);\n            weightedSyntheticCurrentTicks[i].tick = toInt24(syntheticCurrentTick);\n            weightedSyntheticAverageTicks[i].weight = amounts[i];\n            weightedSyntheticCurrentTicks[i].weight = amounts[i];\n        }\n\n        averageSyntheticAverageTick = OracleLibrary.getWeightedArithmeticMeanTick(weightedSyntheticAverageTicks);\n        averageSyntheticCurrentTick = OracleLibrary.getWeightedArithmeticMeanTick(weightedSyntheticCurrentTicks);\n    }\n\n    /// @inheritdoc IOracleSlippage\n    function checkOracleSlippage(\n        bytes memory path,\n        uint24 maximumTickDivergence,\n        uint32 secondsAgo\n    ) external view override {\n        (int256 syntheticAverageTick, int256 syntheticCurrentTick) = getSyntheticTicks(path, secondsAgo);\n        require(syntheticAverageTick - syntheticCurrentTick < maximumTickDivergence, 'TD');\n    }\n\n    /// @inheritdoc IOracleSlippage\n    function checkOracleSlippage(\n        bytes[] memory paths,\n        uint128[] memory amounts,\n        uint24 maximumTickDivergence,\n        uint32 secondsAgo\n    ) external view override {\n        (int256 averageSyntheticAverageTick, int256 averageSyntheticCurrentTick) =\n            getSyntheticTicks(paths, amounts, secondsAgo);\n        require(averageSyntheticAverageTick - averageSyntheticCurrentTick < maximumTickDivergence, 'TD');\n    }\n}\n"
          },
          {
            "id": 18,
            "path": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
            "name": "TickMath.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
          },
          {
            "id": 13,
            "path": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
            "name": "IUniswapV3PoolOwnerActions.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
          },
          {
            "id": 19,
            "path": "@uniswap/v3-periphery/contracts/base/BlockTimestamp.sol",
            "name": "BlockTimestamp.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\n/// @title Function for getting block timestamp\n/// @dev Base contract that is overridden for tests\nabstract contract BlockTimestamp {\n    /// @dev Method that exists purely to be overridden for tests\n    /// @return The current block timestamp\n    function _blockTimestamp() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
          },
          {
            "id": 14,
            "path": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
            "name": "IUniswapV3PoolState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
          },
          {
            "id": 21,
            "path": "@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol",
            "name": "PeripheryImmutableState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '../interfaces/IPeripheryImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override factory;\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override WETH9;\n\n    constructor(address _factory, address _WETH9) {\n        factory = _factory;\n        WETH9 = _WETH9;\n    }\n}\n"
          },
          {
            "id": 30,
            "path": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol",
            "name": "IPeripheryPayments.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
          },
          {
            "id": 45,
            "path": "contracts/base/ApproveAndCall.sol",
            "name": "ApproveAndCall.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\n\nimport '../interfaces/IApproveAndCall.sol';\nimport './ImmutableState.sol';\n\n/// @title Approve and Call\n/// @notice Allows callers to approve the Uniswap V3 position manager from this contract,\n/// for any token, and then make calls into the position manager\nabstract contract ApproveAndCall is IApproveAndCall, ImmutableState {\n    function tryApprove(address token, uint256 amount) private returns (bool) {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.approve.selector, positionManager, amount));\n        return success && (data.length == 0 || abi.decode(data, (bool)));\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function getApprovalType(address token, uint256 amount) external override returns (ApprovalType) {\n        // check existing approval\n        if (IERC20(token).allowance(address(this), positionManager) >= amount) return ApprovalType.NOT_REQUIRED;\n\n        // try type(uint256).max / type(uint256).max - 1\n        if (tryApprove(token, type(uint256).max)) return ApprovalType.MAX;\n        if (tryApprove(token, type(uint256).max - 1)) return ApprovalType.MAX_MINUS_ONE;\n\n        // set approval to 0 (must succeed)\n        require(tryApprove(token, 0));\n\n        // try type(uint256).max / type(uint256).max - 1\n        if (tryApprove(token, type(uint256).max)) return ApprovalType.ZERO_THEN_MAX;\n        if (tryApprove(token, type(uint256).max - 1)) return ApprovalType.ZERO_THEN_MAX_MINUS_ONE;\n\n        revert();\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function approveMax(address token) external payable override {\n        require(tryApprove(token, type(uint256).max));\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function approveMaxMinusOne(address token) external payable override {\n        require(tryApprove(token, type(uint256).max - 1));\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function approveZeroThenMax(address token) external payable override {\n        require(tryApprove(token, 0));\n        require(tryApprove(token, type(uint256).max));\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function approveZeroThenMaxMinusOne(address token) external payable override {\n        require(tryApprove(token, 0));\n        require(tryApprove(token, type(uint256).max - 1));\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function callPositionManager(bytes memory data) public payable override returns (bytes memory result) {\n        bool success;\n        (success, result) = positionManager.call(data);\n\n        if (!success) {\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n            if (result.length < 68) revert();\n            assembly {\n                result := add(result, 0x04)\n            }\n            revert(abi.decode(result, (string)));\n        }\n    }\n\n    function balanceOf(address token) private view returns (uint256) {\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function mint(MintParams calldata params) external payable override returns (bytes memory result) {\n        return\n            callPositionManager(\n                abi.encodeWithSelector(\n                    INonfungiblePositionManager.mint.selector,\n                    INonfungiblePositionManager.MintParams({\n                        token0: params.token0,\n                        token1: params.token1,\n                        fee: params.fee,\n                        tickLower: params.tickLower,\n                        tickUpper: params.tickUpper,\n                        amount0Desired: balanceOf(params.token0),\n                        amount1Desired: balanceOf(params.token1),\n                        amount0Min: params.amount0Min,\n                        amount1Min: params.amount1Min,\n                        recipient: params.recipient,\n                        deadline: type(uint256).max // deadline should be checked via multicall\n                    })\n                )\n            );\n    }\n\n    /// @inheritdoc IApproveAndCall\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        override\n        returns (bytes memory result)\n    {\n        return\n            callPositionManager(\n                abi.encodeWithSelector(\n                    INonfungiblePositionManager.increaseLiquidity.selector,\n                    INonfungiblePositionManager.IncreaseLiquidityParams({\n                        tokenId: params.tokenId,\n                        amount0Desired: balanceOf(params.token0),\n                        amount1Desired: balanceOf(params.token1),\n                        amount0Min: params.amount0Min,\n                        amount1Min: params.amount1Min,\n                        deadline: type(uint256).max // deadline should be checked via multicall\n                    })\n                )\n            );\n    }\n}\n"
          },
          {
            "id": 4,
            "path": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
            "name": "IERC721Enumerable.sol",
            "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
          },
          {
            "id": 31,
            "path": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPaymentsWithFee.sol",
            "name": "IPeripheryPaymentsWithFee.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport './IPeripheryPayments.sol';\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n}\n"
          },
          {
            "id": 39,
            "path": "@uniswap/v3-periphery/contracts/libraries/Path.sol",
            "name": "Path.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
          },
          {
            "id": 40,
            "path": "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol",
            "name": "PoolAddress.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
          },
          {
            "id": 5,
            "path": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
            "name": "IERC721Metadata.sol",
            "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
          },
          {
            "id": 60,
            "path": "contracts/interfaces/IV3SwapRouter.sol",
            "name": "IV3SwapRouter.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// that may remain in the router after the swap.\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// that may remain in the router after the swap.\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
          },
          {
            "id": 17,
            "path": "@uniswap/v3-core/contracts/libraries/SafeCast.sol",
            "name": "SafeCast.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
          },
          {
            "id": 23,
            "path": "@uniswap/v3-periphery/contracts/base/PeripheryPaymentsWithFee.sol",
            "name": "PeripheryPaymentsWithFee.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\n\nimport './PeripheryPayments.sol';\nimport '../interfaces/IPeripheryPaymentsWithFee.sol';\n\nimport '../interfaces/external/IWETH9.sol';\nimport '../libraries/TransferHelper.sol';\n\nabstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {\n    using LowGasSafeMath for uint256;\n\n    /// @inheritdoc IPeripheryPaymentsWithFee\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) public payable override {\n        require(feeBips > 0 && feeBips <= 100);\n\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\n\n        if (balanceWETH9 > 0) {\n            IWETH9(WETH9).withdraw(balanceWETH9);\n            uint256 feeAmount = balanceWETH9.mul(feeBips) / 10_000;\n            if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);\n            TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPaymentsWithFee\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) public payable override {\n        require(feeBips > 0 && feeBips <= 100);\n\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\n        require(balanceToken >= amountMinimum, 'Insufficient token');\n\n        if (balanceToken > 0) {\n            uint256 feeAmount = balanceToken.mul(feeBips) / 10_000;\n            if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\n            TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);\n        }\n    }\n}\n"
          },
          {
            "id": 28,
            "path": "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol",
            "name": "INonfungiblePositionManager.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
          },
          {
            "id": 41,
            "path": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
            "name": "TransferHelper.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
          },
          {
            "id": 59,
            "path": "contracts/interfaces/IV2SwapRouter.sol",
            "name": "IV2SwapRouter.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V2\ninterface IV2SwapRouter {\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param amountIn The amount of token to swap\n    /// @param amountOutMin The minimum amount of output that must be received\n    /// @param path The ordered list of tokens to swap through\n    /// @param to The recipient address\n    /// @return amountOut The amount of the received token\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to\n    ) external payable returns (uint256 amountOut);\n\n    /// @notice Swaps as little as possible of one token for an exact amount of another token\n    /// @param amountOut The amount of token to swap for\n    /// @param amountInMax The maximum amount of input that the caller will pay\n    /// @param path The ordered list of tokens to swap through\n    /// @param to The recipient address\n    /// @return amountIn The amount of token to pay\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to\n    ) external payable returns (uint256 amountIn);\n}\n"
          },
          {
            "id": 1,
            "path": "@openzeppelin/contracts/introspection/IERC165.sol",
            "name": "IERC165.sol",
            "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
          },
          {
            "id": 12,
            "path": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
            "name": "IUniswapV3PoolImmutables.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
          },
          {
            "id": 16,
            "path": "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol",
            "name": "LowGasSafeMath.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
          },
          {
            "id": 24,
            "path": "@uniswap/v3-periphery/contracts/base/PeripheryValidation.sol",
            "name": "PeripheryValidation.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport './BlockTimestamp.sol';\n\nabstract contract PeripheryValidation is BlockTimestamp {\n    modifier checkDeadline(uint256 deadline) {\n        require(_blockTimestamp() <= deadline, 'Transaction too old');\n        _;\n    }\n}\n"
          },
          {
            "id": 29,
            "path": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol",
            "name": "IPeripheryImmutableState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
          },
          {
            "id": 35,
            "path": "@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol",
            "name": "IWETH9.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"
          },
          {
            "id": 51,
            "path": "contracts/base/PeripheryValidationExtended.sol",
            "name": "PeripheryValidationExtended.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-periphery/contracts/base/PeripheryValidation.sol';\n\nabstract contract PeripheryValidationExtended is PeripheryValidation {\n    modifier checkPreviousBlockhash(bytes32 previousBlockhash) {\n        require(blockhash(block.number - 1) == previousBlockhash, 'Blockhash');\n        _;\n    }\n}\n"
          },
          {
            "id": 54,
            "path": "contracts/interfaces/IMulticallExtended.sol",
            "name": "IMulticallExtended.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol';\n\n/// @title MulticallExtended interface\n/// @notice Enables calling multiple methods in a single call to the contract with optional validation\ninterface IMulticallExtended is IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param deadline The time by which this function must be called before failing\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\n\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param previousBlockhash The expected parent blockHash\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes32 previousBlockhash, bytes[] calldata data)\n        external\n        payable\n        returns (bytes[] memory results);\n}\n"
          },
          {
            "id": 7,
            "path": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
            "name": "IUniswapV3Pool.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
          },
          {
            "id": 3,
            "path": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
            "name": "IERC721.sol",
            "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
          },
          {
            "id": 20,
            "path": "@uniswap/v3-periphery/contracts/base/Multicall.sol",
            "name": "Multicall.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '../interfaces/IMulticall.sol';\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n    /// @inheritdoc IMulticall\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n                if (result.length < 68) revert();\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n\n            results[i] = result;\n        }\n    }\n}\n"
          },
          {
            "id": 33,
            "path": "@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol",
            "name": "ISelfPermit.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\ninterface ISelfPermit {\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
          },
          {
            "id": 52,
            "path": "contracts/interfaces/IApproveAndCall.sol",
            "name": "IApproveAndCall.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\ninterface IApproveAndCall {\n    enum ApprovalType {NOT_REQUIRED, MAX, MAX_MINUS_ONE, ZERO_THEN_MAX, ZERO_THEN_MAX_MINUS_ONE}\n\n    /// @dev Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\n    /// @param token The token to approve\n    /// @param amount The amount to approve\n    /// @return The required approval type\n    function getApprovalType(address token, uint256 amount) external returns (ApprovalType);\n\n    /// @notice Approves a token for the maximum possible amount\n    /// @param token The token to approve\n    function approveMax(address token) external payable;\n\n    /// @notice Approves a token for the maximum possible amount minus one\n    /// @param token The token to approve\n    function approveMaxMinusOne(address token) external payable;\n\n    /// @notice Approves a token for zero, then the maximum possible amount\n    /// @param token The token to approve\n    function approveZeroThenMax(address token) external payable;\n\n    /// @notice Approves a token for zero, then the maximum possible amount minus one\n    /// @param token The token to approve\n    function approveZeroThenMaxMinusOne(address token) external payable;\n\n    /// @notice Calls the position manager with arbitrary calldata\n    /// @param data Calldata to pass along to the position manager\n    /// @return result The result from the call\n    function callPositionManager(bytes memory data) external payable returns (bytes memory result);\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n    }\n\n    /// @notice Calls the position manager's mint function\n    /// @param params Calldata to pass along to the position manager\n    /// @return result The result from the call\n    function mint(MintParams calldata params) external payable returns (bytes memory result);\n\n    struct IncreaseLiquidityParams {\n        address token0;\n        address token1;\n        uint256 tokenId;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    /// @notice Calls the position manager's increaseLiquidity function\n    /// @param params Calldata to pass along to the position manager\n    /// @return result The result from the call\n    function increaseLiquidity(IncreaseLiquidityParams calldata params) external payable returns (bytes memory result);\n}\n"
          },
          {
            "id": 62,
            "path": "contracts/libraries/UniswapV2Library.sol",
            "name": "UniswapV2Library.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\n\nlibrary UniswapV2Library {\n    using LowGasSafeMath for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB);\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0));\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, 'INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0);\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, 'INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0);\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2);\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
          },
          {
            "id": 2,
            "path": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
            "name": "IERC20.sol",
            "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
          },
          {
            "id": 25,
            "path": "@uniswap/v3-periphery/contracts/base/SelfPermit.sol",
            "name": "SelfPermit.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/drafts/IERC20Permit.sol';\n\nimport '../interfaces/ISelfPermit.sol';\nimport '../interfaces/external/IERC20PermitAllowed.sol';\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n/// that requires an approval in a single transaction.\nabstract contract SelfPermit is ISelfPermit {\n    /// @inheritdoc ISelfPermit\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\n    }\n}\n"
          },
          {
            "id": 34,
            "path": "@uniswap/v3-periphery/contracts/interfaces/external/IERC20PermitAllowed.sol",
            "name": "IERC20PermitAllowed.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Interface for permit\n/// @notice Interface used by DAI/CHAI for permit\ninterface IERC20PermitAllowed {\n    /// @notice Approve the spender to spend some tokens via the holder signature\n    /// @dev This is the permit interface used by DAI and CHAI\n    /// @param holder The address of the token holder, the token owner\n    /// @param spender The address of the token spender\n    /// @param nonce The holder's nonce, increases at each call to permit\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
          },
          {
            "id": 46,
            "path": "contracts/base/ImmutableState.sol",
            "name": "ImmutableState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '../interfaces/IImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by the swap router\nabstract contract ImmutableState is IImmutableState {\n    /// @inheritdoc IImmutableState\n    address public immutable override factoryV2;\n    /// @inheritdoc IImmutableState\n    address public immutable override positionManager;\n\n    constructor(address _factoryV2, address _positionManager) {\n        factoryV2 = _factoryV2;\n        positionManager = _positionManager;\n    }\n}\n"
          },
          {
            "id": 9,
            "path": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
            "name": "IUniswapV3PoolActions.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
          },
          {
            "id": 22,
            "path": "@uniswap/v3-periphery/contracts/base/PeripheryPayments.sol",
            "name": "PeripheryPayments.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport '../interfaces/IPeripheryPayments.sol';\nimport '../interfaces/external/IWETH9.sol';\n\nimport '../libraries/TransferHelper.sol';\n\nimport './PeripheryImmutableState.sol';\n\nabstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\n    receive() external payable {\n        require(msg.sender == WETH9, 'Not WETH9');\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\n\n        if (balanceWETH9 > 0) {\n            IWETH9(WETH9).withdraw(balanceWETH9);\n            TransferHelper.safeTransferETH(recipient, balanceWETH9);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) public payable override {\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\n        require(balanceToken >= amountMinimum, 'Insufficient token');\n\n        if (balanceToken > 0) {\n            TransferHelper.safeTransfer(token, recipient, balanceToken);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function refundETH() external payable override {\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);\n    }\n\n    /// @param token The token to pay\n    /// @param payer The entity that must pay\n    /// @param recipient The entity that will receive payment\n    /// @param value The amount to pay\n    function pay(\n        address token,\n        address payer,\n        address recipient,\n        uint256 value\n    ) internal {\n        if (token == WETH9 && address(this).balance >= value) {\n            // pay with WETH9\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\n            IWETH9(WETH9).transfer(recipient, value);\n        } else if (payer == address(this)) {\n            // pay with tokens already in the contract (for the exact input multihop case)\n            TransferHelper.safeTransfer(token, recipient, value);\n        } else {\n            // pull payment\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\n        }\n    }\n}\n"
          },
          {
            "id": 38,
            "path": "@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol",
            "name": "OracleLibrary.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\n    {\n        require(secondsAgo != 0, 'BP');\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) =\n            IUniswapV3Pool(pool).observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        uint160 secondsPerLiquidityCumulativesDelta =\n            secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0];\n\n        arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick--;\n\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n        harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\n    }\n\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick Tick value used to calculate the quote\n    /// @param baseAmount Amount of token to be converted\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n    /// @param pool Address of Uniswap V3 pool that we want to observe\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\n    function getOldestObservationSecondsAgo(address pool) internal view returns (uint32 secondsAgo) {\n        (, , uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n        require(observationCardinality > 0, 'NI');\n\n        (uint32 observationTimestamp, , , bool initialized) =\n            IUniswapV3Pool(pool).observations((observationIndex + 1) % observationCardinality);\n\n        // The next index might not be initialized if the cardinality is in the process of increasing\n        // In this case the oldest observation is always in index 0\n        if (!initialized) {\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\n        }\n\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\n    }\n\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\n    /// @param pool Address of Uniswap V3 pool\n    /// @return The tick that the pool was in at the start of the current block\n    function getBlockStartingTickAndLiquidity(address pool) internal view returns (int24, uint128) {\n        (, int24 tick, uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n\n        // 2 observations are needed to reliably calculate the block starting tick\n        require(observationCardinality > 1, 'NEO');\n\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\n        (uint32 observationTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, ) =\n            IUniswapV3Pool(pool).observations(observationIndex);\n        if (observationTimestamp != uint32(block.timestamp)) {\n            return (tick, IUniswapV3Pool(pool).liquidity());\n        }\n\n        uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\n        (\n            uint32 prevObservationTimestamp,\n            int56 prevTickCumulative,\n            uint160 prevSecondsPerLiquidityCumulativeX128,\n            bool prevInitialized\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\n\n        require(prevInitialized, 'ONI');\n\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\n        tick = int24((tickCumulative - prevTickCumulative) / delta);\n        uint128 liquidity =\n            uint128(\n                (uint192(delta) * type(uint160).max) /\n                    (uint192(secondsPerLiquidityCumulativeX128 - prevSecondsPerLiquidityCumulativeX128) << 32)\n            );\n        return (tick, liquidity);\n    }\n\n    /// @notice Information for calculating a weighted arithmetic mean tick\n    struct WeightedTickData {\n        int24 tick;\n        uint128 weight;\n    }\n\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n    /// @param weightedTickData An array of ticks and weights\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\n    function getWeightedArithmeticMeanTick(WeightedTickData[] memory weightedTickData)\n        internal\n        pure\n        returns (int24 weightedArithmeticMeanTick)\n    {\n        // Accumulates the sum of products between each tick and its weight\n        int256 numerator;\n\n        // Accumulates the sum of the weights\n        uint256 denominator;\n\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\n        for (uint256 i; i < weightedTickData.length; i++) {\n            numerator += weightedTickData[i].tick * int256(weightedTickData[i].weight);\n            denominator += weightedTickData[i].weight;\n        }\n\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\n        // Always round to negative infinity\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedArithmeticMeanTick--;\n    }\n}\n"
          },
          {
            "id": 50,
            "path": "contracts/base/PeripheryPaymentsWithFeeExtended.sol",
            "name": "PeripheryPaymentsWithFeeExtended.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@uniswap/v3-periphery/contracts/base/PeripheryPaymentsWithFee.sol';\n\nimport '../interfaces/IPeripheryPaymentsWithFeeExtended.sol';\nimport './PeripheryPaymentsExtended.sol';\n\nabstract contract PeripheryPaymentsWithFeeExtended is\n    IPeripheryPaymentsWithFeeExtended,\n    PeripheryPaymentsExtended,\n    PeripheryPaymentsWithFee\n{\n    /// @inheritdoc IPeripheryPaymentsWithFeeExtended\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable override {\n        unwrapWETH9WithFee(amountMinimum, msg.sender, feeBips, feeRecipient);\n    }\n\n    /// @inheritdoc IPeripheryPaymentsWithFeeExtended\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable override {\n        sweepTokenWithFee(token, amountMinimum, msg.sender, feeBips, feeRecipient);\n    }\n}\n"
          },
          {
            "id": 57,
            "path": "contracts/interfaces/IPeripheryPaymentsWithFeeExtended.sol",
            "name": "IPeripheryPaymentsWithFeeExtended.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/IPeripheryPaymentsWithFee.sol';\n\nimport './IPeripheryPaymentsExtended.sol';\n\n/// @title Periphery Payments With Fee Extended\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPaymentsWithFeeExtended is IPeripheryPaymentsExtended, IPeripheryPaymentsWithFee {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to msg.sender as ETH, with a percentage between\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to msg.sender, with a percentage between\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n}\n"
          },
          {
            "id": 6,
            "path": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol",
            "name": "IUniswapV2Pair.sol",
            "source": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
          },
          {
            "id": 27,
            "path": "@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol",
            "name": "IMulticall.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
          },
          {
            "id": 37,
            "path": "@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol",
            "name": "CallbackValidation.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport './PoolAddress.sol';\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The V3 pool contract address\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n    }\n\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param poolKey The identifying key of the V3 pool\n    /// @return pool The V3 pool contract address\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\n        internal\n        view\n        returns (IUniswapV3Pool pool)\n    {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        require(msg.sender == address(pool));\n    }\n}\n"
          },
          {
            "id": 42,
            "path": "contracts/SwapRouter02.sol",
            "name": "SwapRouter02.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/base/SelfPermit.sol';\nimport '@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol';\n\nimport './interfaces/ISwapRouter02.sol';\nimport './V2SwapRouter.sol';\nimport './V3SwapRouter.sol';\nimport './base/ApproveAndCall.sol';\nimport './base/MulticallExtended.sol';\n\n/// @title Uniswap V2 and V3 Swap Router\ncontract SwapRouter02 is ISwapRouter02, V2SwapRouter, V3SwapRouter, ApproveAndCall, MulticallExtended, SelfPermit {\n    constructor(\n        address _factoryV2,\n        address factoryV3,\n        address _positionManager,\n        address _WETH9\n    ) ImmutableState(_factoryV2, _positionManager) PeripheryImmutableState(factoryV3, _WETH9) {}\n}\n"
          },
          {
            "id": 44,
            "path": "contracts/V3SwapRouter.sol",
            "name": "V3SwapRouter.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/Path.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './interfaces/IV3SwapRouter.sol';\nimport './base/PeripheryPaymentsWithFeeExtended.sol';\nimport './base/OracleSlippage.sol';\nimport './libraries/Constants.sol';\n\n/// @title Uniswap V3 Swap Router\n/// @notice Router for stateless execution of swaps against Uniswap V3\nabstract contract V3SwapRouter is IV3SwapRouter, PeripheryPaymentsWithFeeExtended, OracleSlippage {\n    using Path for bytes;\n    using SafeCast for uint256;\n\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\n    /// can never actually be this value\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\n\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    struct SwapCallbackData {\n        bytes path;\n        address payer;\n    }\n\n    /// @inheritdoc IUniswapV3SwapCallback\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata _data\n    ) external override {\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\n\n        (bool isExactInput, uint256 amountToPay) =\n            amount0Delta > 0\n                ? (tokenIn < tokenOut, uint256(amount0Delta))\n                : (tokenOut < tokenIn, uint256(amount1Delta));\n\n        if (isExactInput) {\n            pay(tokenIn, data.payer, msg.sender, amountToPay);\n        } else {\n            // either initiate the next swap or pay\n            if (data.path.hasMultiplePools()) {\n                data.path = data.path.skipToken();\n                exactOutputInternal(amountToPay, msg.sender, 0, data);\n            } else {\n                amountInCached = amountToPay;\n                // note that because exact output swaps are executed in reverse order, tokenOut is actually tokenIn\n                pay(tokenOut, data.payer, msg.sender, amountToPay);\n            }\n        }\n    }\n\n    /// @dev Performs a single exact input swap\n    function exactInputInternal(\n        uint256 amountIn,\n        address recipient,\n        uint160 sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256 amountOut) {\n        // find and replace recipient addresses\n        if (recipient == Constants.MSG_SENDER) recipient = msg.sender;\n        else if (recipient == Constants.ADDRESS_THIS) recipient = address(this);\n\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n\n        bool zeroForOne = tokenIn < tokenOut;\n\n        (int256 amount0, int256 amount1) =\n            getPool(tokenIn, tokenOut, fee).swap(\n                recipient,\n                zeroForOne,\n                amountIn.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encode(data)\n            );\n\n        return uint256(-(zeroForOne ? amount1 : amount0));\n    }\n\n    /// @inheritdoc IV3SwapRouter\n    function exactInputSingle(ExactInputSingleParams memory params)\n        external\n        payable\n        override\n        returns (uint256 amountOut)\n    {\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n        bool hasAlreadyPaid;\n        if (params.amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            params.amountIn = IERC20(params.tokenIn).balanceOf(address(this));\n        }\n\n        amountOut = exactInputInternal(\n            params.amountIn,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({\n                path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut),\n                payer: hasAlreadyPaid ? address(this) : msg.sender\n            })\n        );\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @inheritdoc IV3SwapRouter\n    function exactInput(ExactInputParams memory params) external payable override returns (uint256 amountOut) {\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n        bool hasAlreadyPaid;\n        if (params.amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            (address tokenIn, , ) = params.path.decodeFirstPool();\n            params.amountIn = IERC20(tokenIn).balanceOf(address(this));\n        }\n\n        address payer = hasAlreadyPaid ? address(this) : msg.sender;\n\n        while (true) {\n            bool hasMultiplePools = params.path.hasMultiplePools();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            params.amountIn = exactInputInternal(\n                params.amountIn,\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\n                0,\n                SwapCallbackData({\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\n                    payer: payer\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                payer = address(this);\n                params.path = params.path.skipToken();\n            } else {\n                amountOut = params.amountIn;\n                break;\n            }\n        }\n\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @dev Performs a single exact output swap\n    function exactOutputInternal(\n        uint256 amountOut,\n        address recipient,\n        uint160 sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256 amountIn) {\n        // find and replace recipient addresses\n        if (recipient == Constants.MSG_SENDER) recipient = msg.sender;\n        else if (recipient == Constants.ADDRESS_THIS) recipient = address(this);\n\n        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\n\n        bool zeroForOne = tokenIn < tokenOut;\n\n        (int256 amount0Delta, int256 amount1Delta) =\n            getPool(tokenIn, tokenOut, fee).swap(\n                recipient,\n                zeroForOne,\n                -amountOut.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encode(data)\n            );\n\n        uint256 amountOutReceived;\n        (amountIn, amountOutReceived) = zeroForOne\n            ? (uint256(amount0Delta), uint256(-amount1Delta))\n            : (uint256(amount1Delta), uint256(-amount0Delta));\n        // it's technically possible to not receive the full output amount,\n        // so if no price limit has been specified, require this possibility away\n        if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);\n    }\n\n    /// @inheritdoc IV3SwapRouter\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        override\n        returns (uint256 amountIn)\n    {\n        // avoid an SLOAD by using the swap return data\n        amountIn = exactOutputInternal(\n            params.amountOut,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender})\n        );\n\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\n        // has to be reset even though we don't use it in the single hop case\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n    }\n\n    /// @inheritdoc IV3SwapRouter\n    function exactOutput(ExactOutputParams calldata params) external payable override returns (uint256 amountIn) {\n        exactOutputInternal(\n            params.amountOut,\n            params.recipient,\n            0,\n            SwapCallbackData({path: params.path, payer: msg.sender})\n        );\n\n        amountIn = amountInCached;\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n    }\n}\n"
          },
          {
            "id": 61,
            "path": "contracts/libraries/Constants.sol",
            "name": "Constants.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\n/// @title Constant state\n/// @notice Constant state used by the swap router\nlibrary Constants {\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used\n    uint256 internal constant CONTRACT_BALANCE = 0;\n\n    /// @dev Used as a flag for identifying msg.sender, saves gas by sending more 0 bytes\n    address internal constant MSG_SENDER = address(1);\n\n    /// @dev Used as a flag for identifying address(this), saves gas by sending more 0 bytes\n    address internal constant ADDRESS_THIS = address(2);\n}\n"
          },
          {
            "id": 15,
            "path": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
            "name": "FullMath.sol",
            "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
          }
        ],
        "abi": [
          {
            "type": "constructor",
            "name": "",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "_factoryV2",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "factoryV3",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "_positionManager",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "_WETH9",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "function",
            "name": "multicall",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "data",
                "type": "bytes[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "bytes"
                  }
                }
              }
            ],
            "outputs": [
              {
                "name": "results",
                "type": "bytes[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "bytes"
                  }
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "sweepTokenWithFee",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "feeBips",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeRecipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "factoryV2",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "sweepToken",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "checkOracleSlippage",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "path",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "maximumTickDivergence",
                "type": "uint24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "secondsAgo",
                "type": "uint32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "exactOutput",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "params",
                "type": "tuple",
                "storage_location": "default",
                "components": [
                  {
                    "name": "path",
                    "type": "bytes",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "bytes"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "amountOut",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "amountInMaximum",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  }
                ],
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false
              }
            ],
            "outputs": [
              {
                "name": "amountIn",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "selfPermitIfNecessary",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "deadline",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "sweepTokenWithFee",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeBips",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeRecipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "increaseLiquidity",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "params",
                "type": "tuple",
                "storage_location": "default",
                "components": [
                  {
                    "name": "token0",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "token1",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "tokenId",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "amount0Min",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "amount1Min",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  }
                ],
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false
              }
            ],
            "outputs": [
              {
                "name": "result",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "pull",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "multicall",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "deadline",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "data",
                "type": "bytes[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "bytes"
                  }
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bytes[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "bytes"
                  }
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "approveZeroThenMax",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "swapExactTokensForTokens",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "amountIn",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amountOutMin",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "path",
                "type": "address[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "address"
                  }
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "amountOut",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "unwrapWETH9WithFee",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "feeBips",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeRecipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "exactInput",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "params",
                "type": "tuple",
                "storage_location": "default",
                "components": [
                  {
                    "name": "path",
                    "type": "bytes",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "bytes"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "amountIn",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "amountOutMinimum",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  }
                ],
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false
              }
            ],
            "outputs": [
              {
                "name": "amountOut",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "exactInputSingle",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "params",
                "type": "tuple",
                "storage_location": "default",
                "components": [
                  {
                    "name": "tokenIn",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "tokenOut",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "fee",
                    "type": "uint24",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "amountIn",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "amountOutMinimum",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "sqrtPriceLimitX96",
                    "type": "uint160",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  }
                ],
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false
              }
            ],
            "outputs": [
              {
                "name": "amountOut",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "factory",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "positionManager",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "checkOracleSlippage",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "paths",
                "type": "bytes[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "bytes"
                  }
                }
              },
              {
                "name": "amounts",
                "type": "uint128[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "uint"
                  }
                }
              },
              {
                "name": "maximumTickDivergence",
                "type": "uint24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "secondsAgo",
                "type": "uint32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "selfPermitAllowed",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "expiry",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "refundETH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [],
            "outputs": []
          },
          {
            "type": "function",
            "name": "selfPermitAllowedIfNecessary",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "expiry",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "unwrapWETH9WithFee",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeBips",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeRecipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "approveMaxMinusOne",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "selfPermit",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "deadline",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "swapTokensForExactTokens",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "amountOut",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amountInMax",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "path",
                "type": "address[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "address"
                  }
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "amountIn",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "uniswapV3SwapCallback",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "amount0Delta",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount1Delta",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "_data",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "unwrapWETH9",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "approveMax",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "getApprovalType",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "sweepToken",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "multicall",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "previousBlockhash",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "data",
                "type": "bytes[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "bytes"
                  }
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bytes[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "bytes"
                  }
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "WETH9",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "approveZeroThenMaxMinusOne",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "wrapETH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "exactOutputSingle",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "params",
                "type": "tuple",
                "storage_location": "default",
                "components": [
                  {
                    "name": "tokenIn",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "tokenOut",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "fee",
                    "type": "uint24",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "amountOut",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "amountInMaximum",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "sqrtPriceLimitX96",
                    "type": "uint160",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  }
                ],
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false
              }
            ],
            "outputs": [
              {
                "name": "amountIn",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "mint",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "params",
                "type": "tuple",
                "storage_location": "default",
                "components": [
                  {
                    "name": "token0",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "token1",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  },
                  {
                    "name": "fee",
                    "type": "uint24",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "tickLower",
                    "type": "int24",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "int"
                    }
                  },
                  {
                    "name": "tickUpper",
                    "type": "int24",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "int"
                    }
                  },
                  {
                    "name": "amount0Min",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "amount1Min",
                    "type": "uint256",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "uint"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": "address",
                    "storage_location": "default",
                    "components": null,
                    "offset": 0,
                    "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "indexed": false,
                    "simple_type": {
                      "type": "address"
                    }
                  }
                ],
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false
              }
            ],
            "outputs": [
              {
                "name": "result",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "callPositionManager",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "data",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": [
              {
                "name": "result",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "unwrapWETH9",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "amountMinimum",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          }
        ],
        "raw_abi": null,
        "states": [
          {
            "name": "amountInCached",
            "type": "uint256",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          }
        ]
      },
      "creation_block": 0,
      "creation_tx": "",
      "creator_address": "",
      "created_at": "2021-12-14T17:39:38Z",
      "number_of_watches": null,
      "language": "solidity",
      "in_project": false,
      "number_of_files": 63
    },
    {
      "id": "eth:1:0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
      "contract_id": "eth:1:0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
      "balance": "",
      "network_id": "1",
      "public": true,
      "export": false,
      "verified_by": "etherscan",
      "verification_date": null,
      "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
      "contract_name": "UniswapV3Pool",
      "ens_domain": null,
      "type": "contract",
      "evm_version": "",
      "compiler_version": "v0.7.6+commit.7338295f",
      "optimizations_used": true,
      "optimization_runs": 800,
      "libraries": null,
      "data": {
        "main_contract": 1,
        "contract_info": [
          {
            "id": 7,
            "path": "contracts/interfaces/callback/IUniswapV3MintCallback.sol",
            "name": "IUniswapV3MintCallback.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
          },
          {
            "id": 8,
            "path": "contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
            "name": "IUniswapV3SwapCallback.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
          },
          {
            "id": 21,
            "path": "contracts/libraries/Oracle.sol",
            "name": "Oracle.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\n/// @title Oracle\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\n/// @dev Instances of stored oracle data, \"observations\", are collected in the oracle array\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\n/// Observations are overwritten when the full length of the oracle array is populated.\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\nlibrary Oracle {\n    struct Observation {\n        // the block timestamp of the observation\n        uint32 blockTimestamp;\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\n        int56 tickCumulative;\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether or not the observation is initialized\n        bool initialized;\n    }\n\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\n    /// @param last The specified observation to be transformed\n    /// @param blockTimestamp The timestamp of the new observation\n    /// @param tick The active tick at the time of the new observation\n    /// @param liquidity The total in-range liquidity at the time of the new observation\n    /// @return Observation The newly populated observation\n    function transform(\n        Observation memory last,\n        uint32 blockTimestamp,\n        int24 tick,\n        uint128 liquidity\n    ) private pure returns (Observation memory) {\n        uint32 delta = blockTimestamp - last.blockTimestamp;\n        return\n            Observation({\n                blockTimestamp: blockTimestamp,\n                tickCumulative: last.tickCumulative + int56(tick) * delta,\n                secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\n                    ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\n                initialized: true\n            });\n    }\n\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\n    /// @param self The stored oracle array\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\n    /// @return cardinality The number of populated elements in the oracle array\n    /// @return cardinalityNext The new length of the oracle array, independent of population\n    function initialize(Observation[65535] storage self, uint32 time)\n        internal\n        returns (uint16 cardinality, uint16 cardinalityNext)\n    {\n        self[0] = Observation({\n            blockTimestamp: time,\n            tickCumulative: 0,\n            secondsPerLiquidityCumulativeX128: 0,\n            initialized: true\n        });\n        return (1, 1);\n    }\n\n    /// @notice Writes an oracle observation to the array\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\n    /// @param self The stored oracle array\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param blockTimestamp The timestamp of the new observation\n    /// @param tick The active tick at the time of the new observation\n    /// @param liquidity The total in-range liquidity at the time of the new observation\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @param cardinalityNext The new length of the oracle array, independent of population\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\n    /// @return cardinalityUpdated The new cardinality of the oracle array\n    function write(\n        Observation[65535] storage self,\n        uint16 index,\n        uint32 blockTimestamp,\n        int24 tick,\n        uint128 liquidity,\n        uint16 cardinality,\n        uint16 cardinalityNext\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\n        Observation memory last = self[index];\n\n        // early return if we've already written an observation this block\n        if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\n\n        // if the conditions are right, we can bump the cardinality\n        if (cardinalityNext > cardinality && index == (cardinality - 1)) {\n            cardinalityUpdated = cardinalityNext;\n        } else {\n            cardinalityUpdated = cardinality;\n        }\n\n        indexUpdated = (index + 1) % cardinalityUpdated;\n        self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\n    }\n\n    /// @notice Prepares the oracle array to store up to `next` observations\n    /// @param self The stored oracle array\n    /// @param current The current next cardinality of the oracle array\n    /// @param next The proposed next cardinality which will be populated in the oracle array\n    /// @return next The next cardinality which will be populated in the oracle array\n    function grow(\n        Observation[65535] storage self,\n        uint16 current,\n        uint16 next\n    ) internal returns (uint16) {\n        require(current > 0, 'I');\n        // no-op if the passed next value isn't greater than the current next value\n        if (next <= current) return current;\n        // store in each slot to prevent fresh SSTOREs in swaps\n        // this data will not be used because the initialized boolean is still false\n        for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\n        return next;\n    }\n\n    /// @notice comparator for 32-bit timestamps\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\n    /// @param time A timestamp truncated to 32 bits\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\n    /// @param b From which to determine the relative position of `time`\n    /// @return bool Whether `a` is chronologically <= `b`\n    function lte(\n        uint32 time,\n        uint32 a,\n        uint32 b\n    ) private pure returns (bool) {\n        // if there hasn't been overflow, no need to adjust\n        if (a <= time && b <= time) return a <= b;\n\n        uint256 aAdjusted = a > time ? a : a + 2**32;\n        uint256 bAdjusted = b > time ? b : b + 2**32;\n\n        return aAdjusted <= bAdjusted;\n    }\n\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\n    /// The result may be the same observation, or adjacent observations.\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param target The timestamp at which the reserved observation should be for\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return beforeOrAt The observation recorded before, or at, the target\n    /// @return atOrAfter The observation recorded at, or after, the target\n    function binarySearch(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 target,\n        uint16 index,\n        uint16 cardinality\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n        uint256 l = (index + 1) % cardinality; // oldest observation\n        uint256 r = l + cardinality - 1; // newest observation\n        uint256 i;\n        while (true) {\n            i = (l + r) / 2;\n\n            beforeOrAt = self[i % cardinality];\n\n            // we've landed on an uninitialized tick, keep searching higher (more recently)\n            if (!beforeOrAt.initialized) {\n                l = i + 1;\n                continue;\n            }\n\n            atOrAfter = self[(i + 1) % cardinality];\n\n            bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\n\n            // check if we've found the answer!\n            if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\n\n            if (!targetAtOrAfter) r = i - 1;\n            else l = i + 1;\n        }\n    }\n\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\n    /// @dev Assumes there is at least 1 initialized observation.\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param target The timestamp at which the reserved observation should be for\n    /// @param tick The active tick at the time of the returned or simulated observation\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The total pool liquidity at the time of the call\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\n    function getSurroundingObservations(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 target,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n        // optimistically set before to the newest observation\n        beforeOrAt = self[index];\n\n        // if the target is chronologically at or after the newest observation, we can early return\n        if (lte(time, beforeOrAt.blockTimestamp, target)) {\n            if (beforeOrAt.blockTimestamp == target) {\n                // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\n                return (beforeOrAt, atOrAfter);\n            } else {\n                // otherwise, we need to transform\n                return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\n            }\n        }\n\n        // now, set before to the oldest observation\n        beforeOrAt = self[(index + 1) % cardinality];\n        if (!beforeOrAt.initialized) beforeOrAt = self[0];\n\n        // ensure that the target is chronologically at or after the oldest observation\n        require(lte(time, beforeOrAt.blockTimestamp, target), 'OLD');\n\n        // if we've reached this point, we have to binary search\n        return binarySearch(self, time, target, index, cardinality);\n    }\n\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\n    /// at exactly the timestamp between the two observations.\n    /// @param self The stored oracle array\n    /// @param time The current block timestamp\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\n    /// @param tick The current tick\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The current in-range pool liquidity\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\n    function observeSingle(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 secondsAgo,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\n        if (secondsAgo == 0) {\n            Observation memory last = self[index];\n            if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\n            return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\n        }\n\n        uint32 target = time - secondsAgo;\n\n        (Observation memory beforeOrAt, Observation memory atOrAfter) =\n            getSurroundingObservations(self, time, target, tick, index, liquidity, cardinality);\n\n        if (target == beforeOrAt.blockTimestamp) {\n            // we're at the left boundary\n            return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\n        } else if (target == atOrAfter.blockTimestamp) {\n            // we're at the right boundary\n            return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\n        } else {\n            // we're in the middle\n            uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\n            uint32 targetDelta = target - beforeOrAt.blockTimestamp;\n            return (\n                beforeOrAt.tickCumulative +\n                    ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) *\n                    targetDelta,\n                beforeOrAt.secondsPerLiquidityCumulativeX128 +\n                    uint160(\n                        (uint256(\n                            atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128\n                        ) * targetDelta) / observationTimeDelta\n                    )\n            );\n        }\n    }\n\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\n    /// @dev Reverts if `secondsAgos` > oldest observation\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\n    /// @param tick The current tick\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The current in-range pool liquidity\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\n    function observe(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32[] memory secondsAgos,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\n        require(cardinality > 0, 'I');\n\n        tickCumulatives = new int56[](secondsAgos.length);\n        secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\n        for (uint256 i = 0; i < secondsAgos.length; i++) {\n            (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\n                self,\n                time,\n                secondsAgos[i],\n                tick,\n                index,\n                liquidity,\n                cardinality\n            );\n        }\n    }\n}\n"
          },
          {
            "id": 24,
            "path": "contracts/libraries/SqrtPriceMath.sol",
            "name": "SqrtPriceMath.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './LowGasSafeMath.sol';\nimport './SafeCast.sol';\n\nimport './FullMath.sol';\nimport './UnsafeMath.sol';\nimport './FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using LowGasSafeMath for uint256;\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            uint256 product;\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                uint256 denominator = numerator1 + product;\n                if (denominator >= numerator1)\n                    // always fits in 160 bits\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n            }\n\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n        } else {\n            uint256 product;\n            // if the product overflows, we know the denominator underflows\n            // in addition, we must check that the denominator does not underflow\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n            uint256 denominator = numerator1 - product;\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            return uint256(sqrtPX96).add(quotient).toUint160();\n        } else {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return\n            roundUp\n                ? UnsafeMath.divRoundingUp(\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                    sqrtRatioAX96\n                )\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            roundUp\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        return\n            liquidity < 0\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        return\n            liquidity < 0\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n}\n"
          },
          {
            "id": 28,
            "path": "contracts/libraries/TickMath.sol",
            "name": "TickMath.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
          },
          {
            "id": 4,
            "path": "contracts/interfaces/IUniswapV3Pool.sol",
            "name": "IUniswapV3Pool.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
          },
          {
            "id": 13,
            "path": "contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
            "name": "IUniswapV3PoolOwnerActions.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
          },
          {
            "id": 14,
            "path": "contracts/interfaces/pool/IUniswapV3PoolState.sol",
            "name": "IUniswapV3PoolState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
          },
          {
            "id": 18,
            "path": "contracts/libraries/FullMath.sol",
            "name": "FullMath.sol",
            "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
          },
          {
            "id": 3,
            "path": "contracts/interfaces/IUniswapV3Factory.sol",
            "name": "IUniswapV3Factory.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
          },
          {
            "id": 10,
            "path": "contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
            "name": "IUniswapV3PoolDerivedState.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
          },
          {
            "id": 15,
            "path": "contracts/libraries/BitMath.sol",
            "name": "BitMath.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        r = 255;\n        if (x & type(uint128).max > 0) {\n            r -= 128;\n        } else {\n            x >>= 128;\n        }\n        if (x & type(uint64).max > 0) {\n            r -= 64;\n        } else {\n            x >>= 64;\n        }\n        if (x & type(uint32).max > 0) {\n            r -= 32;\n        } else {\n            x >>= 32;\n        }\n        if (x & type(uint16).max > 0) {\n            r -= 16;\n        } else {\n            x >>= 16;\n        }\n        if (x & type(uint8).max > 0) {\n            r -= 8;\n        } else {\n            x >>= 8;\n        }\n        if (x & 0xf > 0) {\n            r -= 4;\n        } else {\n            x >>= 4;\n        }\n        if (x & 0x3 > 0) {\n            r -= 2;\n        } else {\n            x >>= 2;\n        }\n        if (x & 0x1 > 0) r -= 1;\n    }\n}\n"
          },
          {
            "id": 30,
            "path": "contracts/libraries/UnsafeMath.sol",
            "name": "UnsafeMath.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
          },
          {
            "id": 17,
            "path": "contracts/libraries/FixedPoint96.sol",
            "name": "FixedPoint96.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
          },
          {
            "id": 22,
            "path": "contracts/libraries/Position.sol",
            "name": "Position.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './FullMath.sol';\nimport './FixedPoint128.sol';\nimport './LiquidityMath.sol';\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position\nlibrary Position {\n    // info stored for each user's position\n    struct Info {\n        // the amount of liquidity owned by this position\n        uint128 liquidity;\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        // the fees owed to the position owner in token0/token1\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n    }\n\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\n    /// @param self The mapping containing all user positions\n    /// @param owner The address of the position owner\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return position The position info struct of the given owners' position\n    function get(\n        mapping(bytes32 => Info) storage self,\n        address owner,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal view returns (Position.Info storage position) {\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\n    }\n\n    /// @notice Credits accumulated fees to a user's position\n    /// @param self The individual position to update\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function update(\n        Info storage self,\n        int128 liquidityDelta,\n        uint256 feeGrowthInside0X128,\n        uint256 feeGrowthInside1X128\n    ) internal {\n        Info memory _self = self;\n\n        uint128 liquidityNext;\n        if (liquidityDelta == 0) {\n            require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions\n            liquidityNext = _self.liquidity;\n        } else {\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\n        }\n\n        // calculate accumulated fees\n        uint128 tokensOwed0 =\n            uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\n                    _self.liquidity,\n                    FixedPoint128.Q128\n                )\n            );\n        uint128 tokensOwed1 =\n            uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\n                    _self.liquidity,\n                    FixedPoint128.Q128\n                )\n            );\n\n        // update the position\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\n            self.tokensOwed0 += tokensOwed0;\n            self.tokensOwed1 += tokensOwed1;\n        }\n    }\n}\n"
          },
          {
            "id": 25,
            "path": "contracts/libraries/SwapMath.sol",
            "name": "SwapMath.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './FullMath.sol';\nimport './SqrtPriceMath.sol';\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    )\n        internal\n        pure\n        returns (\n            uint160 sqrtRatioNextX96,\n            uint256 amountIn,\n            uint256 amountOut,\n            uint256 feeAmount\n        )\n    {\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n        bool exactIn = amountRemaining >= 0;\n\n        if (exactIn) {\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n            amountIn = zeroForOne\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    amountRemainingLessFee,\n                    zeroForOne\n                );\n        } else {\n            amountOut = zeroForOne\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    uint256(-amountRemaining),\n                    zeroForOne\n                );\n        }\n\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n        // get the input/output amounts\n        if (zeroForOne) {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n        } else {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n        }\n\n        // cap the output amount to not exceed the remaining output amount\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\n            amountOut = uint256(-amountRemaining);\n        }\n\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n            // we didn't reach the target, so take the remainder of the maximum input as fee\n            feeAmount = uint256(amountRemaining) - amountIn;\n        } else {\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n        }\n    }\n}\n"
          },
          {
            "id": 0,
            "path": "contracts/NoDelegateCall.sol",
            "name": "NoDelegateCall.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\n/// @title Prevents delegatecall to a contract\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\nabstract contract NoDelegateCall {\n    /// @dev The original address of this contract\n    address private immutable original;\n\n    constructor() {\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\n        // In other words, this variable won't change when it's checked at runtime.\n        original = address(this);\n    }\n\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\n    function checkNotDelegateCall() private view {\n        require(address(this) == original);\n    }\n\n    /// @notice Prevents delegatecall into the modified method\n    modifier noDelegateCall() {\n        checkNotDelegateCall();\n        _;\n    }\n}\n"
          },
          {
            "id": 9,
            "path": "contracts/interfaces/pool/IUniswapV3PoolActions.sol",
            "name": "IUniswapV3PoolActions.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
          },
          {
            "id": 11,
            "path": "contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
            "name": "IUniswapV3PoolEvents.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
          },
          {
            "id": 12,
            "path": "contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
            "name": "IUniswapV3PoolImmutables.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
          },
          {
            "id": 1,
            "path": "contracts/UniswapV3Pool.sol",
            "name": "UniswapV3Pool.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\nimport './interfaces/IUniswapV3Pool.sol';\n\nimport './NoDelegateCall.sol';\n\nimport './libraries/LowGasSafeMath.sol';\nimport './libraries/SafeCast.sol';\nimport './libraries/Tick.sol';\nimport './libraries/TickBitmap.sol';\nimport './libraries/Position.sol';\nimport './libraries/Oracle.sol';\n\nimport './libraries/FullMath.sol';\nimport './libraries/FixedPoint128.sol';\nimport './libraries/TransferHelper.sol';\nimport './libraries/TickMath.sol';\nimport './libraries/LiquidityMath.sol';\nimport './libraries/SqrtPriceMath.sol';\nimport './libraries/SwapMath.sol';\n\nimport './interfaces/IUniswapV3PoolDeployer.sol';\nimport './interfaces/IUniswapV3Factory.sol';\nimport './interfaces/IERC20Minimal.sol';\nimport './interfaces/callback/IUniswapV3MintCallback.sol';\nimport './interfaces/callback/IUniswapV3SwapCallback.sol';\nimport './interfaces/callback/IUniswapV3FlashCallback.sol';\n\ncontract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Tick for mapping(int24 => Tick.Info);\n    using TickBitmap for mapping(int16 => uint256);\n    using Position for mapping(bytes32 => Position.Info);\n    using Position for Position.Info;\n    using Oracle for Oracle.Observation[65535];\n\n    /// @inheritdoc IUniswapV3PoolImmutables\n    address public immutable override factory;\n    /// @inheritdoc IUniswapV3PoolImmutables\n    address public immutable override token0;\n    /// @inheritdoc IUniswapV3PoolImmutables\n    address public immutable override token1;\n    /// @inheritdoc IUniswapV3PoolImmutables\n    uint24 public immutable override fee;\n\n    /// @inheritdoc IUniswapV3PoolImmutables\n    int24 public immutable override tickSpacing;\n\n    /// @inheritdoc IUniswapV3PoolImmutables\n    uint128 public immutable override maxLiquidityPerTick;\n\n    struct Slot0 {\n        // the current price\n        uint160 sqrtPriceX96;\n        // the current tick\n        int24 tick;\n        // the most-recently updated index of the observations array\n        uint16 observationIndex;\n        // the current maximum number of observations that are being stored\n        uint16 observationCardinality;\n        // the next maximum number of observations to store, triggered in observations.write\n        uint16 observationCardinalityNext;\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\n        // represented as an integer denominator (1/x)%\n        uint8 feeProtocol;\n        // whether the pool is locked\n        bool unlocked;\n    }\n    /// @inheritdoc IUniswapV3PoolState\n    Slot0 public override slot0;\n\n    /// @inheritdoc IUniswapV3PoolState\n    uint256 public override feeGrowthGlobal0X128;\n    /// @inheritdoc IUniswapV3PoolState\n    uint256 public override feeGrowthGlobal1X128;\n\n    // accumulated protocol fees in token0/token1 units\n    struct ProtocolFees {\n        uint128 token0;\n        uint128 token1;\n    }\n    /// @inheritdoc IUniswapV3PoolState\n    ProtocolFees public override protocolFees;\n\n    /// @inheritdoc IUniswapV3PoolState\n    uint128 public override liquidity;\n\n    /// @inheritdoc IUniswapV3PoolState\n    mapping(int24 => Tick.Info) public override ticks;\n    /// @inheritdoc IUniswapV3PoolState\n    mapping(int16 => uint256) public override tickBitmap;\n    /// @inheritdoc IUniswapV3PoolState\n    mapping(bytes32 => Position.Info) public override positions;\n    /// @inheritdoc IUniswapV3PoolState\n    Oracle.Observation[65535] public override observations;\n\n    /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance\n    /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because\n    /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.\n    modifier lock() {\n        require(slot0.unlocked, 'LOK');\n        slot0.unlocked = false;\n        _;\n        slot0.unlocked = true;\n    }\n\n    /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()\n    modifier onlyFactoryOwner() {\n        require(msg.sender == IUniswapV3Factory(factory).owner());\n        _;\n    }\n\n    constructor() {\n        int24 _tickSpacing;\n        (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();\n        tickSpacing = _tickSpacing;\n\n        maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);\n    }\n\n    /// @dev Common checks for valid tick inputs.\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\n        require(tickLower < tickUpper, 'TLU');\n        require(tickLower >= TickMath.MIN_TICK, 'TLM');\n        require(tickUpper <= TickMath.MAX_TICK, 'TUM');\n    }\n\n    /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\n    function _blockTimestamp() internal view virtual returns (uint32) {\n        return uint32(block.timestamp); // truncation is desired\n    }\n\n    /// @dev Get the pool's balance of token0\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\n    /// check\n    function balance0() private view returns (uint256) {\n        (bool success, bytes memory data) =\n            token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\n        require(success && data.length >= 32);\n        return abi.decode(data, (uint256));\n    }\n\n    /// @dev Get the pool's balance of token1\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\n    /// check\n    function balance1() private view returns (uint256) {\n        (bool success, bytes memory data) =\n            token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\n        require(success && data.length >= 32);\n        return abi.decode(data, (uint256));\n    }\n\n    /// @inheritdoc IUniswapV3PoolDerivedState\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        override\n        noDelegateCall\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        )\n    {\n        checkTicks(tickLower, tickUpper);\n\n        int56 tickCumulativeLower;\n        int56 tickCumulativeUpper;\n        uint160 secondsPerLiquidityOutsideLowerX128;\n        uint160 secondsPerLiquidityOutsideUpperX128;\n        uint32 secondsOutsideLower;\n        uint32 secondsOutsideUpper;\n\n        {\n            Tick.Info storage lower = ticks[tickLower];\n            Tick.Info storage upper = ticks[tickUpper];\n            bool initializedLower;\n            (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (\n                lower.tickCumulativeOutside,\n                lower.secondsPerLiquidityOutsideX128,\n                lower.secondsOutside,\n                lower.initialized\n            );\n            require(initializedLower);\n\n            bool initializedUpper;\n            (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (\n                upper.tickCumulativeOutside,\n                upper.secondsPerLiquidityOutsideX128,\n                upper.secondsOutside,\n                upper.initialized\n            );\n            require(initializedUpper);\n        }\n\n        Slot0 memory _slot0 = slot0;\n\n        if (_slot0.tick < tickLower) {\n            return (\n                tickCumulativeLower - tickCumulativeUpper,\n                secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,\n                secondsOutsideLower - secondsOutsideUpper\n            );\n        } else if (_slot0.tick < tickUpper) {\n            uint32 time = _blockTimestamp();\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\n                observations.observeSingle(\n                    time,\n                    0,\n                    _slot0.tick,\n                    _slot0.observationIndex,\n                    liquidity,\n                    _slot0.observationCardinality\n                );\n            return (\n                tickCumulative - tickCumulativeLower - tickCumulativeUpper,\n                secondsPerLiquidityCumulativeX128 -\n                    secondsPerLiquidityOutsideLowerX128 -\n                    secondsPerLiquidityOutsideUpperX128,\n                time - secondsOutsideLower - secondsOutsideUpper\n            );\n        } else {\n            return (\n                tickCumulativeUpper - tickCumulativeLower,\n                secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,\n                secondsOutsideUpper - secondsOutsideLower\n            );\n        }\n    }\n\n    /// @inheritdoc IUniswapV3PoolDerivedState\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        override\n        noDelegateCall\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\n    {\n        return\n            observations.observe(\n                _blockTimestamp(),\n                secondsAgos,\n                slot0.tick,\n                slot0.observationIndex,\n                liquidity,\n                slot0.observationCardinality\n            );\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext)\n        external\n        override\n        lock\n        noDelegateCall\n    {\n        uint16 observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event\n        uint16 observationCardinalityNextNew =\n            observations.grow(observationCardinalityNextOld, observationCardinalityNext);\n        slot0.observationCardinalityNext = observationCardinalityNextNew;\n        if (observationCardinalityNextOld != observationCardinalityNextNew)\n            emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    /// @dev not locked because it initializes unlocked\n    function initialize(uint160 sqrtPriceX96) external override {\n        require(slot0.sqrtPriceX96 == 0, 'AI');\n\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n\n        (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());\n\n        slot0 = Slot0({\n            sqrtPriceX96: sqrtPriceX96,\n            tick: tick,\n            observationIndex: 0,\n            observationCardinality: cardinality,\n            observationCardinalityNext: cardinalityNext,\n            feeProtocol: 0,\n            unlocked: true\n        });\n\n        emit Initialize(sqrtPriceX96, tick);\n    }\n\n    struct ModifyPositionParams {\n        // the address that owns the position\n        address owner;\n        // the lower and upper tick of the position\n        int24 tickLower;\n        int24 tickUpper;\n        // any change in liquidity\n        int128 liquidityDelta;\n    }\n\n    /// @dev Effect some changes to a position\n    /// @param params the position details and the change to the position's liquidity to effect\n    /// @return position a storage pointer referencing the position with the given owner and tick range\n    /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient\n    /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient\n    function _modifyPosition(ModifyPositionParams memory params)\n        private\n        noDelegateCall\n        returns (\n            Position.Info storage position,\n            int256 amount0,\n            int256 amount1\n        )\n    {\n        checkTicks(params.tickLower, params.tickUpper);\n\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\n\n        position = _updatePosition(\n            params.owner,\n            params.tickLower,\n            params.tickUpper,\n            params.liquidityDelta,\n            _slot0.tick\n        );\n\n        if (params.liquidityDelta != 0) {\n            if (_slot0.tick < params.tickLower) {\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\n                // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it\n                amount0 = SqrtPriceMath.getAmount0Delta(\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\n                    params.liquidityDelta\n                );\n            } else if (_slot0.tick < params.tickUpper) {\n                // current tick is inside the passed range\n                uint128 liquidityBefore = liquidity; // SLOAD for gas optimization\n\n                // write an oracle entry\n                (slot0.observationIndex, slot0.observationCardinality) = observations.write(\n                    _slot0.observationIndex,\n                    _blockTimestamp(),\n                    _slot0.tick,\n                    liquidityBefore,\n                    _slot0.observationCardinality,\n                    _slot0.observationCardinalityNext\n                );\n\n                amount0 = SqrtPriceMath.getAmount0Delta(\n                    _slot0.sqrtPriceX96,\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\n                    params.liquidityDelta\n                );\n                amount1 = SqrtPriceMath.getAmount1Delta(\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\n                    _slot0.sqrtPriceX96,\n                    params.liquidityDelta\n                );\n\n                liquidity = LiquidityMath.addDelta(liquidityBefore, params.liquidityDelta);\n            } else {\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\n                // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it\n                amount1 = SqrtPriceMath.getAmount1Delta(\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\n                    params.liquidityDelta\n                );\n            }\n        }\n    }\n\n    /// @dev Gets and updates a position with the given liquidity delta\n    /// @param owner the owner of the position\n    /// @param tickLower the lower tick of the position's tick range\n    /// @param tickUpper the upper tick of the position's tick range\n    /// @param tick the current tick, passed to avoid sloads\n    function _updatePosition(\n        address owner,\n        int24 tickLower,\n        int24 tickUpper,\n        int128 liquidityDelta,\n        int24 tick\n    ) private returns (Position.Info storage position) {\n        position = positions.get(owner, tickLower, tickUpper);\n\n        uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization\n        uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization\n\n        // if we need to update the ticks, do it\n        bool flippedLower;\n        bool flippedUpper;\n        if (liquidityDelta != 0) {\n            uint32 time = _blockTimestamp();\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\n                observations.observeSingle(\n                    time,\n                    0,\n                    slot0.tick,\n                    slot0.observationIndex,\n                    liquidity,\n                    slot0.observationCardinality\n                );\n\n            flippedLower = ticks.update(\n                tickLower,\n                tick,\n                liquidityDelta,\n                _feeGrowthGlobal0X128,\n                _feeGrowthGlobal1X128,\n                secondsPerLiquidityCumulativeX128,\n                tickCumulative,\n                time,\n                false,\n                maxLiquidityPerTick\n            );\n            flippedUpper = ticks.update(\n                tickUpper,\n                tick,\n                liquidityDelta,\n                _feeGrowthGlobal0X128,\n                _feeGrowthGlobal1X128,\n                secondsPerLiquidityCumulativeX128,\n                tickCumulative,\n                time,\n                true,\n                maxLiquidityPerTick\n            );\n\n            if (flippedLower) {\n                tickBitmap.flipTick(tickLower, tickSpacing);\n            }\n            if (flippedUpper) {\n                tickBitmap.flipTick(tickUpper, tickSpacing);\n            }\n        }\n\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) =\n            ticks.getFeeGrowthInside(tickLower, tickUpper, tick, _feeGrowthGlobal0X128, _feeGrowthGlobal1X128);\n\n        position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\n\n        // clear any tick data that is no longer needed\n        if (liquidityDelta < 0) {\n            if (flippedLower) {\n                ticks.clear(tickLower);\n            }\n            if (flippedUpper) {\n                ticks.clear(tickUpper);\n            }\n        }\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\n        require(amount > 0);\n        (, int256 amount0Int, int256 amount1Int) =\n            _modifyPosition(\n                ModifyPositionParams({\n                    owner: recipient,\n                    tickLower: tickLower,\n                    tickUpper: tickUpper,\n                    liquidityDelta: int256(amount).toInt128()\n                })\n            );\n\n        amount0 = uint256(amount0Int);\n        amount1 = uint256(amount1Int);\n\n        uint256 balance0Before;\n        uint256 balance1Before;\n        if (amount0 > 0) balance0Before = balance0();\n        if (amount1 > 0) balance1Before = balance1();\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\n        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');\n        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');\n\n        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external override lock returns (uint128 amount0, uint128 amount1) {\n        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\n\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\n\n        if (amount0 > 0) {\n            position.tokensOwed0 -= amount0;\n            TransferHelper.safeTransfer(token0, recipient, amount0);\n        }\n        if (amount1 > 0) {\n            position.tokensOwed1 -= amount1;\n            TransferHelper.safeTransfer(token1, recipient, amount1);\n        }\n\n        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\n        (Position.Info storage position, int256 amount0Int, int256 amount1Int) =\n            _modifyPosition(\n                ModifyPositionParams({\n                    owner: msg.sender,\n                    tickLower: tickLower,\n                    tickUpper: tickUpper,\n                    liquidityDelta: -int256(amount).toInt128()\n                })\n            );\n\n        amount0 = uint256(-amount0Int);\n        amount1 = uint256(-amount1Int);\n\n        if (amount0 > 0 || amount1 > 0) {\n            (position.tokensOwed0, position.tokensOwed1) = (\n                position.tokensOwed0 + uint128(amount0),\n                position.tokensOwed1 + uint128(amount1)\n            );\n        }\n\n        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\n    }\n\n    struct SwapCache {\n        // the protocol fee for the input token\n        uint8 feeProtocol;\n        // liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the timestamp of the current block\n        uint32 blockTimestamp;\n        // the current value of the tick accumulator, computed only if we cross an initialized tick\n        int56 tickCumulative;\n        // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether we've computed and cached the above two accumulators\n        bool computedLatestObservation;\n    }\n\n    // the top level state of the swap, the results of which are recorded in storage at the end\n    struct SwapState {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the global fee growth of the input token\n        uint256 feeGrowthGlobalX128;\n        // amount of input token paid as protocol fee\n        uint128 protocolFee;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'AS');\n\n        Slot0 memory slot0Start = slot0;\n\n        require(slot0Start.unlocked, 'LOK');\n        require(\n            zeroForOne\n                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\n                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\n            'SPL'\n        );\n\n        slot0.unlocked = false;\n\n        SwapCache memory cache =\n            SwapCache({\n                liquidityStart: liquidity,\n                blockTimestamp: _blockTimestamp(),\n                feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\n                secondsPerLiquidityCumulativeX128: 0,\n                tickCumulative: 0,\n                computedLatestObservation: false\n            });\n\n        bool exactInput = amountSpecified > 0;\n\n        SwapState memory state =\n            SwapState({\n                amountSpecifiedRemaining: amountSpecified,\n                amountCalculated: 0,\n                sqrtPriceX96: slot0Start.sqrtPriceX96,\n                tick: slot0Start.tick,\n                feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\n                protocolFee: 0,\n                liquidity: cache.liquidityStart\n            });\n\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\n                state.tick,\n                tickSpacing,\n                zeroForOne\n            );\n\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            // get the price for the next tick\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\n                    ? sqrtPriceLimitX96\n                    : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                fee\n            );\n\n            if (exactInput) {\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\n            } else {\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\n            }\n\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\n            if (cache.feeProtocol > 0) {\n                uint256 delta = step.feeAmount / cache.feeProtocol;\n                step.feeAmount -= delta;\n                state.protocolFee += uint128(delta);\n            }\n\n            // update global fee tracker\n            if (state.liquidity > 0)\n                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\n\n            // shift tick if we reached the next price\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                // if the tick is initialized, run the tick transition\n                if (step.initialized) {\n                    // check for the placeholder value, which we replace with the actual value the first time the swap\n                    // crosses an initialized tick\n                    if (!cache.computedLatestObservation) {\n                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\n                            cache.blockTimestamp,\n                            0,\n                            slot0Start.tick,\n                            slot0Start.observationIndex,\n                            cache.liquidityStart,\n                            slot0Start.observationCardinality\n                        );\n                        cache.computedLatestObservation = true;\n                    }\n                    int128 liquidityNet =\n                        ticks.cross(\n                            step.tickNext,\n                            (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\n                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\n                            cache.secondsPerLiquidityCumulativeX128,\n                            cache.tickCumulative,\n                            cache.blockTimestamp\n                        );\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\n                    // safe because liquidityNet cannot be type(int128).min\n                    if (zeroForOne) liquidityNet = -liquidityNet;\n\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n                }\n\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        // update tick and write an oracle entry if the tick change\n        if (state.tick != slot0Start.tick) {\n            (uint16 observationIndex, uint16 observationCardinality) =\n                observations.write(\n                    slot0Start.observationIndex,\n                    cache.blockTimestamp,\n                    slot0Start.tick,\n                    cache.liquidityStart,\n                    slot0Start.observationCardinality,\n                    slot0Start.observationCardinalityNext\n                );\n            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\n                state.sqrtPriceX96,\n                state.tick,\n                observationIndex,\n                observationCardinality\n            );\n        } else {\n            // otherwise just update the price\n            slot0.sqrtPriceX96 = state.sqrtPriceX96;\n        }\n\n        // update liquidity if it changed\n        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\n\n        // update fee growth global and, if necessary, protocol fees\n        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\n        if (zeroForOne) {\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\n            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\n        } else {\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\n            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n\n        // do the transfers and collect payment\n        if (zeroForOne) {\n            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\n\n            uint256 balance0Before = balance0();\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\n            require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');\n        } else {\n            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\n\n            uint256 balance1Before = balance1();\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\n            require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');\n        }\n\n        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\n        slot0.unlocked = true;\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external override lock noDelegateCall {\n        uint128 _liquidity = liquidity;\n        require(_liquidity > 0, 'L');\n\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\n        uint256 balance0Before = balance0();\n        uint256 balance1Before = balance1();\n\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\n\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\n\n        uint256 balance0After = balance0();\n        uint256 balance1After = balance1();\n\n        require(balance0Before.add(fee0) <= balance0After, 'F0');\n        require(balance1Before.add(fee1) <= balance1After, 'F1');\n\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\n        uint256 paid0 = balance0After - balance0Before;\n        uint256 paid1 = balance1After - balance1Before;\n\n        if (paid0 > 0) {\n            uint8 feeProtocol0 = slot0.feeProtocol % 16;\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\n        }\n        if (paid1 > 0) {\n            uint8 feeProtocol1 = slot0.feeProtocol >> 4;\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\n        }\n\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolOwnerActions\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {\n        require(\n            (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&\n                (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))\n        );\n        uint8 feeProtocolOld = slot0.feeProtocol;\n        slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);\n        emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolOwnerActions\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {\n        amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;\n        amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;\n\n        if (amount0 > 0) {\n            if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings\n            protocolFees.token0 -= amount0;\n            TransferHelper.safeTransfer(token0, recipient, amount0);\n        }\n        if (amount1 > 0) {\n            if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings\n            protocolFees.token1 -= amount1;\n            TransferHelper.safeTransfer(token1, recipient, amount1);\n        }\n\n        emit CollectProtocol(msg.sender, recipient, amount0, amount1);\n    }\n}\n"
          },
          {
            "id": 20,
            "path": "contracts/libraries/LowGasSafeMath.sol",
            "name": "LowGasSafeMath.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
          },
          {
            "id": 2,
            "path": "contracts/interfaces/IERC20Minimal.sol",
            "name": "IERC20Minimal.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
          },
          {
            "id": 16,
            "path": "contracts/libraries/FixedPoint128.sol",
            "name": "FixedPoint128.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
          },
          {
            "id": 26,
            "path": "contracts/libraries/Tick.sol",
            "name": "Tick.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './LowGasSafeMath.sol';\nimport './SafeCast.sol';\n\nimport './TickMath.sol';\nimport './LiquidityMath.sol';\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n    using LowGasSafeMath for int256;\n    using SafeCast for int256;\n\n    // info stored for each initialized individual tick\n    struct Info {\n        // the total position liquidity that references this tick\n        uint128 liquidityGross;\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\n        int128 liquidityNet;\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n        // the cumulative tick value on the other side of the tick\n        int56 tickCumulativeOutside;\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint160 secondsPerLiquidityOutsideX128;\n        // the seconds spent on the other side of the tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint32 secondsOutside;\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n        bool initialized;\n    }\n\n    /// @notice Derives max liquidity per tick from given tick spacing\n    /// @dev Executed within the pool constructor\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @return The max liquidity per tick\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n        return type(uint128).max / numTicks;\n    }\n\n    /// @notice Retrieves fee growth data\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @param tickCurrent The current tick\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function getFeeGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        Info storage lower = self[tickLower];\n        Info storage upper = self[tickUpper];\n\n        // calculate fee growth below\n        uint256 feeGrowthBelow0X128;\n        uint256 feeGrowthBelow1X128;\n        if (tickCurrent >= tickLower) {\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\n        } else {\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\n        }\n\n        // calculate fee growth above\n        uint256 feeGrowthAbove0X128;\n        uint256 feeGrowthAbove1X128;\n        if (tickCurrent < tickUpper) {\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\n        } else {\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\n        }\n\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n    }\n\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param tickCurrent The current tick\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n    /// @param time The current block timestamp cast to a uint32\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n    function update(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int24 tickCurrent,\n        int128 liquidityDelta,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time,\n        bool upper,\n        uint128 maxLiquidity\n    ) internal returns (bool flipped) {\n        Tick.Info storage info = self[tick];\n\n        uint128 liquidityGrossBefore = info.liquidityGross;\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\n\n        require(liquidityGrossAfter <= maxLiquidity, 'LO');\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= tickCurrent) {\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\n                info.tickCumulativeOutside = tickCumulative;\n                info.secondsOutside = time;\n            }\n            info.initialized = true;\n        }\n\n        info.liquidityGross = liquidityGrossAfter;\n\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n        info.liquidityNet = upper\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\n        delete self[tick];\n    }\n\n    /// @notice Transitions to next tick as needed by price movement\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The destination tick of the transition\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n    /// @param time The current block.timestamp\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\n    function cross(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time\n    ) internal returns (int128 liquidityNet) {\n        Tick.Info storage info = self[tick];\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\n        info.secondsOutside = time - info.secondsOutside;\n        liquidityNet = info.liquidityNet;\n    }\n}\n"
          },
          {
            "id": 29,
            "path": "contracts/libraries/TransferHelper.sol",
            "name": "TransferHelper.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '../interfaces/IERC20Minimal.sol';\n\n/// @title TransferHelper\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\nlibrary TransferHelper {\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\n    }\n}\n"
          },
          {
            "id": 27,
            "path": "contracts/libraries/TickBitmap.sol",
            "name": "TickBitmap.sol",
            "source": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './BitMath.sol';\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        wordPos = int16(tick >> 8);\n        bitPos = uint8(tick % 256);\n    }\n\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n    /// @param self The mapping in which to flip the tick\n    /// @param tick The tick to flip\n    /// @param tickSpacing The spacing between usable ticks\n    function flipTick(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing\n    ) internal {\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n        uint256 mask = 1 << bitPos;\n        self[wordPos] ^= mask;\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        int24 compressed = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n        if (lte) {\n            (int16 wordPos, uint8 bitPos) = position(compressed);\n            // all the 1s at or to the right of the current bitPos\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\n                : (compressed - int24(bitPos)) * tickSpacing;\n        } else {\n            // start from the word of the next tick, since the current tick state doesn't matter\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n            // all the 1s at or to the left of the bitPos\n            uint256 mask = ~((1 << bitPos) - 1);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\n        }\n    }\n}\n"
          },
          {
            "id": 5,
            "path": "contracts/interfaces/IUniswapV3PoolDeployer.sol",
            "name": "IUniswapV3PoolDeployer.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\ninterface IUniswapV3PoolDeployer {\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\n    /// Returns factory The factory address\n    /// Returns token0 The first token of the pool by address sort order\n    /// Returns token1 The second token of the pool by address sort order\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\n    function parameters()\n        external\n        view\n        returns (\n            address factory,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickSpacing\n        );\n}\n"
          },
          {
            "id": 6,
            "path": "contracts/interfaces/callback/IUniswapV3FlashCallback.sol",
            "name": "IUniswapV3FlashCallback.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#flash\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\ninterface IUniswapV3FlashCallback {\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\n    function uniswapV3FlashCallback(\n        uint256 fee0,\n        uint256 fee1,\n        bytes calldata data\n    ) external;\n}\n"
          },
          {
            "id": 19,
            "path": "contracts/libraries/LiquidityMath.sol",
            "name": "LiquidityMath.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, 'LS');\n        } else {\n            require((z = x + uint128(y)) >= x, 'LA');\n        }\n    }\n}\n"
          },
          {
            "id": 23,
            "path": "contracts/libraries/SafeCast.sol",
            "name": "SafeCast.sol",
            "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
          }
        ],
        "abi": [
          {
            "type": "constructor",
            "name": "",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [],
            "outputs": null
          },
          {
            "type": "function",
            "name": "observe",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "secondsAgos",
                "type": "uint32[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "uint"
                  }
                }
              }
            ],
            "outputs": [
              {
                "name": "tickCumulatives",
                "type": "int56[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "int"
                  }
                }
              },
              {
                "name": "secondsPerLiquidityCumulativeX128s",
                "type": "uint160[]",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "slice",
                  "nested_type": {
                    "type": "uint"
                  }
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "burn",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "tickLower",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "amount0",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "snapshotCumulativesInside",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "tickLower",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              }
            ],
            "outputs": [
              {
                "name": "tickCumulativeInside",
                "type": "int56",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "secondsPerLiquidityInsideX128",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "secondsInside",
                "type": "uint32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "ticks",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              }
            ],
            "outputs": [
              {
                "name": "liquidityGross",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "liquidityNet",
                "type": "int128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "feeGrowthOutside0X128",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeGrowthOutside1X128",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tickCumulativeOutside",
                "type": "int56",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "secondsPerLiquidityOutsideX128",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "secondsOutside",
                "type": "uint32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "initialized",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "protocolFees",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "token0",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "token1",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "flash",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount0",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "data",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "mint",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "tickLower",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "data",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": [
              {
                "name": "amount0",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "maxLiquidityPerTick",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "token1",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "fee",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "initialize",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "sqrtPriceX96",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "observations",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "blockTimestamp",
                "type": "uint32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tickCumulative",
                "type": "int56",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "secondsPerLiquidityCumulativeX128",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "initialized",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "collectProtocol",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount0Requested",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1Requested",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "amount0",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "factory",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "tickBitmap",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "",
                "type": "int16",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "feeGrowthGlobal0X128",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "feeGrowthGlobal1X128",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "liquidity",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "slot0",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "sqrtPriceX96",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tick",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "observationIndex",
                "type": "uint16",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "observationCardinality",
                "type": "uint16",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "observationCardinalityNext",
                "type": "uint16",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeProtocol",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "unlocked",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "swap",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "zeroForOne",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              },
              {
                "name": "amountSpecified",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "sqrtPriceLimitX96",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "data",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": [
              {
                "name": "amount0",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount1",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "positions",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": [
              {
                "name": "liquidity",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeGrowthInside0LastX128",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeGrowthInside1LastX128",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tokensOwed0",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tokensOwed1",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "token0",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "increaseObservationCardinalityNext",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "observationCardinalityNext",
                "type": "uint16",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "collect",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "tickLower",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount0Requested",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1Requested",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "amount0",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "tickSpacing",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "setFeeProtocol",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "feeProtocol0",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeProtocol1",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "event",
            "name": "Mint",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "sender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "tickLower",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount0",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Collect",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "tickLower",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount0",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Burn",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "tickLower",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount0",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "CollectProtocol",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "sender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount0",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "SetFeeProtocol",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "feeProtocol0Old",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeProtocol1Old",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeProtocol0New",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeProtocol1New",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Swap",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "sender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount0",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "amount1",
                "type": "int256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "sqrtPriceX96",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "liquidity",
                "type": "uint128",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tick",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "IncreaseObservationCardinalityNext",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "observationCardinalityNextOld",
                "type": "uint16",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "observationCardinalityNextNew",
                "type": "uint16",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Initialize",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "sqrtPriceX96",
                "type": "uint160",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tick",
                "type": "int24",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Flash",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "sender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "recipient",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount0",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "amount1",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "paid0",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "paid1",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          }
        ],
        "raw_abi": null,
        "states": [
          {
            "name": "protocolFees",
            "type": "tuple",
            "storage_location": "memory",
            "components": [
              {
                "name": "token0",
                "type": "uint128",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "token1",
                "type": "uint128",
                "storage_location": "memory",
                "components": null,
                "offset": 128,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000003",
            "indexed": false
          },
          {
            "name": "ticks",
            "type": "mapping (int24 => tuple)",
            "storage_location": "memory",
            "components": [
              {
                "name": "liquidityGross",
                "type": "uint128",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "liquidityNet",
                "type": "int128",
                "storage_location": "memory",
                "components": null,
                "offset": 128,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "feeGrowthOutside0X128",
                "type": "uint256",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeGrowthOutside1X128",
                "type": "uint256",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tickCumulativeOutside",
                "type": "int56",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "secondsPerLiquidityOutsideX128",
                "type": "uint160",
                "storage_location": "memory",
                "components": null,
                "offset": 56,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "secondsOutside",
                "type": "uint32",
                "storage_location": "memory",
                "components": null,
                "offset": 216,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "initialized",
                "type": "bool",
                "storage_location": "memory",
                "components": null,
                "offset": 248,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ],
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000005",
            "indexed": false
          },
          {
            "name": "tickBitmap",
            "type": "mapping (int16 => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000006",
            "indexed": false
          },
          {
            "name": "observations",
            "type": "tuple[0]",
            "storage_location": "memory",
            "components": [
              {
                "name": "blockTimestamp",
                "type": "uint32",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tickCumulative",
                "type": "int56",
                "storage_location": "memory",
                "components": null,
                "offset": 32,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "secondsPerLiquidityCumulativeX128",
                "type": "uint160",
                "storage_location": "memory",
                "components": null,
                "offset": 88,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "initialized",
                "type": "bool",
                "storage_location": "memory",
                "components": null,
                "offset": 248,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ],
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000008",
            "indexed": false,
            "simple_type": {
              "type": "array"
            }
          },
          {
            "name": "slot0",
            "type": "tuple",
            "storage_location": "memory",
            "components": [
              {
                "name": "sqrtPriceX96",
                "type": "uint160",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tick",
                "type": "int24",
                "storage_location": "memory",
                "components": null,
                "offset": 160,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "int"
                }
              },
              {
                "name": "observationIndex",
                "type": "uint16",
                "storage_location": "memory",
                "components": null,
                "offset": 184,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "observationCardinality",
                "type": "uint16",
                "storage_location": "memory",
                "components": null,
                "offset": 200,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "observationCardinalityNext",
                "type": "uint16",
                "storage_location": "memory",
                "components": null,
                "offset": 216,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeProtocol",
                "type": "uint8",
                "storage_location": "memory",
                "components": null,
                "offset": 232,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "unlocked",
                "type": "bool",
                "storage_location": "memory",
                "components": null,
                "offset": 240,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ],
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "indexed": false
          },
          {
            "name": "feeGrowthGlobal1X128",
            "type": "uint256",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000002",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "liquidity",
            "type": "uint128",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000004",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "positions",
            "type": "mapping (bytes32 => tuple)",
            "storage_location": "memory",
            "components": [
              {
                "name": "liquidity",
                "type": "uint128",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeGrowthInside0LastX128",
                "type": "uint256",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "feeGrowthInside1LastX128",
                "type": "uint256",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tokensOwed0",
                "type": "uint128",
                "storage_location": "memory",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "tokensOwed1",
                "type": "uint128",
                "storage_location": "memory",
                "components": null,
                "offset": 128,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000007",
            "indexed": false
          },
          {
            "name": "feeGrowthGlobal0X128",
            "type": "uint256",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000001",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          }
        ]
      },
      "creation_block": 0,
      "creation_tx": "",
      "creator_address": "",
      "created_at": "2021-08-04T08:41:37Z",
      "number_of_watches": null,
      "language": "solidity",
      "in_project": false,
      "number_of_files": 31
    },
    {
      "id": "eth:1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
      "contract_id": "eth:1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
      "balance": "",
      "network_id": "1",
      "public": true,
      "export": false,
      "verified_by": "tenderly",
      "verification_date": null,
      "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
      "contract_name": "FiatTokenProxy",
      "ens_domain": null,
      "type": "contract",
      "standard": "eip1967",
      "standards": [
        "eip1967"
      ],
      "child_contracts": [
        {
          "id": "eth:1:0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
          "address": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
          "network_id": "1"
        }
      ],
      "evm_version": "default",
      "compiler_version": "v0.4.24",
      "optimizations_used": false,
      "optimization_runs": 200,
      "libraries": null,
      "data": {
        "main_contract": 0,
        "contract_info": [
          {
            "id": 0,
            "path": "FlatTokenProxy.sol",
            "name": "FlatTokenProxy.sol",
            "source": "/**\n *Submitted for verification at Etherscan.io on 2018-08-03\n*/\n\npragma solidity ^0.4.24;\n\n// File: zos-lib/contracts/upgradeability/Proxy.sol\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\ncontract Proxy {\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   */\n  function () payable external {\n    _fallback();\n  }\n\n  /**\n   * @return The Address of the implementation.\n   */\n  function _implementation() internal view returns (address);\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function _delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize)\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize)\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize) }\n      default { return(0, returndatasize) }\n    }\n  }\n\n  /**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   */\n  function _willFallback() internal {\n  }\n\n  /**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   */\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract UpgradeabilityProxy is Proxy {\n  /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n  event Upgraded(address implementation);\n\n  /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n\n  /**\n   * @dev Contract constructor.\n   * @param _implementation Address of the initial implementation.\n   */\n  constructor(address _implementation) public {\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n\n    _setImplementation(_implementation);\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   * @return Address of the current implementation\n   */\n  function _implementation() internal view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Upgrades the proxy to a new implementation.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _setImplementation(address newImplementation) private {\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n\n// File: zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol\n\n/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n */\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  /**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   */\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * Contract constructor.\n   * It sets the `msg.sender` as the proxy administrator.\n   * @param _implementation address of the initial implementation.\n   */\n  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n\n    _setAdmin(msg.sender);\n  }\n\n  /**\n   * @return The address of the proxy admin.\n   */\n  function admin() external view ifAdmin returns (address) {\n    return _admin();\n  }\n\n  /**\n   * @return The address of the implementation.\n   */\n  function implementation() external view ifAdmin returns (address) {\n    return _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be\n   * called, as described in\n   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\n   */\n  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    require(address(this).call.value(msg.value)(data));\n  }\n\n  /**\n   * @return The admin slot.\n   */\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   */\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  /**\n   * @dev Only fall back when the sender is not the admin.\n   */\n  function _willFallback() internal {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}\n\n// File: contracts/FiatTokenProxy.sol\n\n/**\n* Copyright CENTRE SECZ 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy \n* of this software and associated documentation files (the \"Software\"), to deal \n* in the Software without restriction, including without limitation the rights \n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n* copies of the Software, and to permit persons to whom the Software is furnished to \n* do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all \n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title FiatTokenProxy\n * @dev This contract proxies FiatToken calls and enables FiatToken upgrades\n*/ \ncontract FiatTokenProxy is AdminUpgradeabilityProxy {\n    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n    }\n}"
          }
        ],
        "abi": [
          {
            "type": "constructor",
            "name": "",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "_implementation",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "function",
            "name": "implementation",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "paused",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "blacklist",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "blacklister",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "initializeV2_1",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "lostAndFound",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "isBlacklisted",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "receiveWithAuthorization",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validAfter",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validBefore",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "transfer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "initialize",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "tokenName",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              },
              {
                "name": "tokenSymbol",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              },
              {
                "name": "tokenCurrency",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              },
              {
                "name": "tokenDecimals",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "newMasterMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newPauser",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newBlacklister",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "changeAdmin",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newAdmin",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "configureMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "minterAllowedAmount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "authorizationState",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "unBlacklist",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "name",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "permit",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "deadline",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "decreaseAllowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "decrement",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "minterAllowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "updatePauser",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_newPauser",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "transferFrom",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "rescueERC20",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "tokenContract",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "transferOwnership",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "upgradeToAndCall",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [
              {
                "name": "newImplementation",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "data",
                "type": "bytes",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "PERMIT_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "version",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "upgradeTo",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newImplementation",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "masterMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "updateRescuer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newRescuer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "totalSupply",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "currency",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "symbol",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "rescuer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "approve",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "initializeV2",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newName",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "transferWithAuthorization",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validAfter",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validBefore",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "updateMasterMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_newMasterMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "allowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "unpause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [],
            "outputs": []
          },
          {
            "type": "function",
            "name": "CANCEL_AUTHORIZATION_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "balanceOf",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "updateBlacklister",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_newBlacklister",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "isMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "removeMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "cancelAuthorization",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "DOMAIN_SEPARATOR",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "admin",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "owner",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "nonces",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "pause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [],
            "outputs": []
          },
          {
            "type": "function",
            "name": "increaseAllowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "increment",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "burn",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "decimals",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "pauser",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "mint",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "_amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "event",
            "name": "MasterMinterChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newMasterMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Blacklisted",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "AdminChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "previousAdmin",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newAdmin",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Transfer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Burn",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "burner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "AuthorizationUsed",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "PauserChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newAddress",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "RescuerChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newRescuer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Approval",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Unpause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [],
            "outputs": null
          },
          {
            "type": "event",
            "name": "MinterRemoved",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "oldMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "OwnershipTransferred",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "previousOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "BlacklisterChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newBlacklister",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Pause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [],
            "outputs": null
          },
          {
            "type": "event",
            "name": "AuthorizationCanceled",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Upgraded",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "implementation",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "UnBlacklisted",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "MinterConfigured",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "minterAllowedAmount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Mint",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          }
        ],
        "raw_abi": null,
        "states": [
          {
            "name": "blacklister",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000002",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "symbol",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000005",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          },
          {
            "name": "_rescuer",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000e",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "DOMAIN_SEPARATOR",
            "type": "bytes32",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000f",
            "indexed": false,
            "simple_type": {
              "type": "bytes"
            }
          },
          {
            "name": "_authorizationStates",
            "type": "mapping (address => mapping (bytes32 => bool))",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000010",
            "indexed": false
          },
          {
            "name": "_permitNonces",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000011",
            "indexed": false
          },
          {
            "name": "_owner",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "paused",
            "type": "bool",
            "storage_location": "storage",
            "components": null,
            "offset": 160,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000001",
            "indexed": false,
            "simple_type": {
              "type": "bool"
            }
          },
          {
            "name": "masterMinter",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000008",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "balances",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000009",
            "indexed": false
          },
          {
            "name": "_initializedVersion",
            "type": "uint8",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000012",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "pauser",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000001",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "decimals",
            "type": "uint8",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000006",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "currency",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000007",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          },
          {
            "name": "initialized",
            "type": "bool",
            "storage_location": "storage",
            "components": null,
            "offset": 160,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000008",
            "indexed": false,
            "simple_type": {
              "type": "bool"
            }
          },
          {
            "name": "name",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000004",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          },
          {
            "name": "minters",
            "type": "mapping (address => bool)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000c",
            "indexed": false
          },
          {
            "name": "blacklisted",
            "type": "mapping (address => bool)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000003",
            "indexed": false
          },
          {
            "name": "allowed",
            "type": "mapping (address => mapping (address => uint256))",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000a",
            "indexed": false
          },
          {
            "name": "totalSupply_",
            "type": "uint256",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000b",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "minterAllowed",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000d",
            "indexed": false
          }
        ]
      },
      "creation_block": 0,
      "creation_tx": "",
      "creator_address": "",
      "created_at": "2022-07-20T14:40:56Z",
      "number_of_watches": null,
      "language": "solidity",
      "in_project": false,
      "number_of_files": 1
    },
    {
      "id": "eth:1:0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
      "contract_id": "eth:1:0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
      "balance": "",
      "network_id": "1",
      "public": true,
      "export": false,
      "verified_by": "etherscan",
      "verification_date": null,
      "address": "0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf",
      "contract_name": "FiatTokenV2_1",
      "ens_domain": null,
      "type": "contract",
      "standard": "erc20",
      "standards": [
        "erc20"
      ],
      "token_data": {},
      "evm_version": "",
      "compiler_version": "v0.6.12+commit.27d51765",
      "optimizations_used": true,
      "optimization_runs": 10000000,
      "libraries": null,
      "data": {
        "main_contract": 0,
        "contract_info": [
          {
            "id": 0,
            "path": "FiatTokenV2_1.sol",
            "name": "FiatTokenV2_1.sol",
            "source": "// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/v1/AbstractFiatTokenV1.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\nabstract contract AbstractFiatTokenV1 is IERC20 {\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal virtual;\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal virtual;\n}\n\n// File: contracts/v1/Ownable.sol\n\n/**\n * Copyright (c) 2018 zOS Global Limited.\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npragma solidity 0.6.12;\n\n/**\n * @notice The Ownable contract has an owner address, and provides basic\n * authorization control functions\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-labs/blob/3887ab77b8adafba4a26ace002f3a684c1a3388b/upgradeability_ownership/contracts/ownership/Ownable.sol\n * Modifications:\n * 1. Consolidate OwnableStorage into this contract (7/13/18)\n * 2. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\n * 3. Make public functions external (5/27/20)\n */\ncontract Ownable {\n    // Owner of the contract\n    address private _owner;\n\n    /**\n     * @dev Event to show ownership has been transferred\n     * @param previousOwner representing the address of the previous owner\n     * @param newOwner representing the address of the new owner\n     */\n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n     * @dev The constructor sets the original owner of the contract to the sender account.\n     */\n    constructor() public {\n        setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Tells the address of the owner\n     * @return the address of the owner\n     */\n    function owner() external view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Sets a new owner address\n     */\n    function setOwner(address newOwner) internal {\n        _owner = newOwner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        setOwner(newOwner);\n    }\n}\n\n// File: contracts/v1/Pausable.sol\n\n/**\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Copyright (c) 2018-2020 CENTRE SECZ0\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @notice Base contract which allows children to implement an emergency stop\n * mechanism\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/feb665136c0dae9912e08397c1a21c4af3651ef3/contracts/lifecycle/Pausable.sol\n * Modifications:\n * 1. Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018)\n * 2. Removed whenNotPause/whenPaused from pause/unpause (6/14/2018)\n * 3. Removed whenPaused (6/14/2018)\n * 4. Switches ownable library to use ZeppelinOS (7/12/18)\n * 5. Remove constructor (7/13/18)\n * 6. Reformat, conform to Solidity 0.6 syntax and add error messages (5/13/20)\n * 7. Make public functions external (5/27/20)\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n    event PauserChanged(address indexed newAddress);\n\n    address public pauser;\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev throws if called by any account other than the pauser\n     */\n    modifier onlyPauser() {\n        require(msg.sender == pauser, \"Pausable: caller is not the pauser\");\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() external onlyPauser {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() external onlyPauser {\n        paused = false;\n        emit Unpause();\n    }\n\n    /**\n     * @dev update the pauser role\n     */\n    function updatePauser(address _newPauser) external onlyOwner {\n        require(\n            _newPauser != address(0),\n            \"Pausable: new pauser is the zero address\"\n        );\n        pauser = _newPauser;\n        emit PauserChanged(pauser);\n    }\n}\n\n// File: contracts/v1/Blacklistable.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title Blacklistable Token\n * @dev Allows accounts to be blacklisted by a \"blacklister\" role\n */\ncontract Blacklistable is Ownable {\n    address public blacklister;\n    mapping(address => bool) internal blacklisted;\n\n    event Blacklisted(address indexed _account);\n    event UnBlacklisted(address indexed _account);\n    event BlacklisterChanged(address indexed newBlacklister);\n\n    /**\n     * @dev Throws if called by any account other than the blacklister\n     */\n    modifier onlyBlacklister() {\n        require(\n            msg.sender == blacklister,\n            \"Blacklistable: caller is not the blacklister\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Throws if argument account is blacklisted\n     * @param _account The address to check\n     */\n    modifier notBlacklisted(address _account) {\n        require(\n            !blacklisted[_account],\n            \"Blacklistable: account is blacklisted\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Checks if account is blacklisted\n     * @param _account The address to check\n     */\n    function isBlacklisted(address _account) external view returns (bool) {\n        return blacklisted[_account];\n    }\n\n    /**\n     * @dev Adds account to blacklist\n     * @param _account The address to blacklist\n     */\n    function blacklist(address _account) external onlyBlacklister {\n        blacklisted[_account] = true;\n        emit Blacklisted(_account);\n    }\n\n    /**\n     * @dev Removes account from blacklist\n     * @param _account The address to remove from the blacklist\n     */\n    function unBlacklist(address _account) external onlyBlacklister {\n        blacklisted[_account] = false;\n        emit UnBlacklisted(_account);\n    }\n\n    function updateBlacklister(address _newBlacklister) external onlyOwner {\n        require(\n            _newBlacklister != address(0),\n            \"Blacklistable: new blacklister is the zero address\"\n        );\n        blacklister = _newBlacklister;\n        emit BlacklisterChanged(blacklister);\n    }\n}\n\n// File: contracts/v1/FiatTokenV1.sol\n\n/**\n *\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title FiatToken\n * @dev ERC20 Token backed by fiat reserves\n */\ncontract FiatTokenV1 is AbstractFiatTokenV1, Ownable, Pausable, Blacklistable {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    string public currency;\n    address public masterMinter;\n    bool internal initialized;\n\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    uint256 internal totalSupply_ = 0;\n    mapping(address => bool) internal minters;\n    mapping(address => uint256) internal minterAllowed;\n\n    event Mint(address indexed minter, address indexed to, uint256 amount);\n    event Burn(address indexed burner, uint256 amount);\n    event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\n    event MinterRemoved(address indexed oldMinter);\n    event MasterMinterChanged(address indexed newMasterMinter);\n\n    function initialize(\n        string memory tokenName,\n        string memory tokenSymbol,\n        string memory tokenCurrency,\n        uint8 tokenDecimals,\n        address newMasterMinter,\n        address newPauser,\n        address newBlacklister,\n        address newOwner\n    ) public {\n        require(!initialized, \"FiatToken: contract is already initialized\");\n        require(\n            newMasterMinter != address(0),\n            \"FiatToken: new masterMinter is the zero address\"\n        );\n        require(\n            newPauser != address(0),\n            \"FiatToken: new pauser is the zero address\"\n        );\n        require(\n            newBlacklister != address(0),\n            \"FiatToken: new blacklister is the zero address\"\n        );\n        require(\n            newOwner != address(0),\n            \"FiatToken: new owner is the zero address\"\n        );\n\n        name = tokenName;\n        symbol = tokenSymbol;\n        currency = tokenCurrency;\n        decimals = tokenDecimals;\n        masterMinter = newMasterMinter;\n        pauser = newPauser;\n        blacklister = newBlacklister;\n        setOwner(newOwner);\n        initialized = true;\n    }\n\n    /**\n     * @dev Throws if called by any account other than a minter\n     */\n    modifier onlyMinters() {\n        require(minters[msg.sender], \"FiatToken: caller is not a minter\");\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of the caller.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount)\n        external\n        whenNotPaused\n        onlyMinters\n        notBlacklisted(msg.sender)\n        notBlacklisted(_to)\n        returns (bool)\n    {\n        require(_to != address(0), \"FiatToken: mint to the zero address\");\n        require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\n\n        uint256 mintingAllowedAmount = minterAllowed[msg.sender];\n        require(\n            _amount <= mintingAllowedAmount,\n            \"FiatToken: mint amount exceeds minterAllowance\"\n        );\n\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        minterAllowed[msg.sender] = mintingAllowedAmount.sub(_amount);\n        emit Mint(msg.sender, _to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the masterMinter\n     */\n    modifier onlyMasterMinter() {\n        require(\n            msg.sender == masterMinter,\n            \"FiatToken: caller is not the masterMinter\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Get minter allowance for an account\n     * @param minter The address of the minter\n     */\n    function minterAllowance(address minter) external view returns (uint256) {\n        return minterAllowed[minter];\n    }\n\n    /**\n     * @dev Checks if account is a minter\n     * @param account The address to check\n     */\n    function isMinter(address account) external view returns (bool) {\n        return minters[account];\n    }\n\n    /**\n     * @notice Amount of remaining tokens spender is allowed to transfer on\n     * behalf of the token owner\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @return Allowance amount\n     */\n    function allowance(address owner, address spender)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        return allowed[owner][spender];\n    }\n\n    /**\n     * @dev Get totalSupply of token\n     */\n    function totalSupply() external override view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n     * @dev Get token balance of an account\n     * @param account address The account\n     */\n    function balanceOf(address account)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        return balances[account];\n    }\n\n    /**\n     * @notice Set spender's allowance over the caller's tokens to be a given\n     * value.\n     * @param spender   Spender's address\n     * @param value     Allowance amount\n     * @return True if successful\n     */\n    function approve(address spender, uint256 value)\n        external\n        override\n        whenNotPaused\n        notBlacklisted(msg.sender)\n        notBlacklisted(spender)\n        returns (bool)\n    {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Internal function to set allowance\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @param value     Allowance amount\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal override {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @notice Transfer tokens by spending allowance\n     * @param from  Payer's address\n     * @param to    Payee's address\n     * @param value Transfer amount\n     * @return True if successful\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        override\n        whenNotPaused\n        notBlacklisted(msg.sender)\n        notBlacklisted(from)\n        notBlacklisted(to)\n        returns (bool)\n    {\n        require(\n            value <= allowed[from][msg.sender],\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        _transfer(from, to, value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from the caller\n     * @param to    Payee's address\n     * @param value Transfer amount\n     * @return True if successful\n     */\n    function transfer(address to, uint256 value)\n        external\n        override\n        whenNotPaused\n        notBlacklisted(msg.sender)\n        notBlacklisted(to)\n        returns (bool)\n    {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @notice Internal function to process transfers\n     * @param from  Payer's address\n     * @param to    Payee's address\n     * @param value Transfer amount\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            value <= balances[from],\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Function to add/update a new minter\n     * @param minter The address of the minter\n     * @param minterAllowedAmount The minting amount allowed for the minter\n     * @return True if the operation was successful.\n     */\n    function configureMinter(address minter, uint256 minterAllowedAmount)\n        external\n        whenNotPaused\n        onlyMasterMinter\n        returns (bool)\n    {\n        minters[minter] = true;\n        minterAllowed[minter] = minterAllowedAmount;\n        emit MinterConfigured(minter, minterAllowedAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to remove a minter\n     * @param minter The address of the minter to remove\n     * @return True if the operation was successful.\n     */\n    function removeMinter(address minter)\n        external\n        onlyMasterMinter\n        returns (bool)\n    {\n        minters[minter] = false;\n        minterAllowed[minter] = 0;\n        emit MinterRemoved(minter);\n        return true;\n    }\n\n    /**\n     * @dev allows a minter to burn some of its own tokens\n     * Validates that caller is a minter and that sender is not blacklisted\n     * amount is less than or equal to the minter's account balance\n     * @param _amount uint256 the amount of tokens to be burned\n     */\n    function burn(uint256 _amount)\n        external\n        whenNotPaused\n        onlyMinters\n        notBlacklisted(msg.sender)\n    {\n        uint256 balance = balances[msg.sender];\n        require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\n        require(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\n\n        totalSupply_ = totalSupply_.sub(_amount);\n        balances[msg.sender] = balance.sub(_amount);\n        emit Burn(msg.sender, _amount);\n        emit Transfer(msg.sender, address(0), _amount);\n    }\n\n    function updateMasterMinter(address _newMasterMinter) external onlyOwner {\n        require(\n            _newMasterMinter != address(0),\n            \"FiatToken: new masterMinter is the zero address\"\n        );\n        masterMinter = _newMasterMinter;\n        emit MasterMinterChanged(masterMinter);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{\n            value: weiValue\n        }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(\n            value\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\n// File: contracts/v1.1/Rescuable.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\ncontract Rescuable is Ownable {\n    using SafeERC20 for IERC20;\n\n    address private _rescuer;\n\n    event RescuerChanged(address indexed newRescuer);\n\n    /**\n     * @notice Returns current rescuer\n     * @return Rescuer's address\n     */\n    function rescuer() external view returns (address) {\n        return _rescuer;\n    }\n\n    /**\n     * @notice Revert if called by any account other than the rescuer.\n     */\n    modifier onlyRescuer() {\n        require(msg.sender == _rescuer, \"Rescuable: caller is not the rescuer\");\n        _;\n    }\n\n    /**\n     * @notice Rescue ERC20 tokens locked up in this contract.\n     * @param tokenContract ERC20 token contract address\n     * @param to        Recipient address\n     * @param amount    Amount to withdraw\n     */\n    function rescueERC20(\n        IERC20 tokenContract,\n        address to,\n        uint256 amount\n    ) external onlyRescuer {\n        tokenContract.safeTransfer(to, amount);\n    }\n\n    /**\n     * @notice Assign the rescuer role to a given address.\n     * @param newRescuer New rescuer's address\n     */\n    function updateRescuer(address newRescuer) external onlyOwner {\n        require(\n            newRescuer != address(0),\n            \"Rescuable: new rescuer is the zero address\"\n        );\n        _rescuer = newRescuer;\n        emit RescuerChanged(newRescuer);\n    }\n}\n\n// File: contracts/v1.1/FiatTokenV1_1.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title FiatTokenV1_1\n * @dev ERC20 Token backed by fiat reserves\n */\ncontract FiatTokenV1_1 is FiatTokenV1, Rescuable {\n\n}\n\n// File: contracts/v2/AbstractFiatTokenV2.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\nabstract contract AbstractFiatTokenV2 is AbstractFiatTokenV1 {\n    function _increaseAllowance(\n        address owner,\n        address spender,\n        uint256 increment\n    ) internal virtual;\n\n    function _decreaseAllowance(\n        address owner,\n        address spender,\n        uint256 decrement\n    ) internal virtual;\n}\n\n// File: contracts/util/ECRecover.sol\n\n/**\n * Copyright (c) 2016-2019 zOS Global Limited\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title ECRecover\n * @notice A library that provides a safe ECDSA recovery function\n */\nlibrary ECRecover {\n    /**\n     * @notice Recover signer's address from a signed message\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\n     * Modifications: Accept v, r, and s as separate arguments\n     * @param digest    Keccak-256 hash digest of the signed message\n     * @param v         v of the signature\n     * @param r         r of the signature\n     * @param s         s of the signature\n     * @return Signer address\n     */\n    function recover(\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            revert(\"ECRecover: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECRecover: invalid signature 'v' value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(digest, v, r, s);\n        require(signer != address(0), \"ECRecover: invalid signature\");\n\n        return signer;\n    }\n}\n\n// File: contracts/util/EIP712.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title EIP712\n * @notice A library that provides EIP712 helper functions\n */\nlibrary EIP712 {\n    /**\n     * @notice Make EIP712 domain separator\n     * @param name      Contract name\n     * @param version   Contract version\n     * @return Domain separator\n     */\n    function makeDomainSeparator(string memory name, string memory version)\n        internal\n        view\n        returns (bytes32)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return\n            keccak256(\n                abi.encode(\n                    // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\n                    keccak256(bytes(name)),\n                    keccak256(bytes(version)),\n                    chainId,\n                    address(this)\n                )\n            );\n    }\n\n    /**\n     * @notice Recover signer's address from a EIP712 signature\n     * @param domainSeparator   Domain separator\n     * @param v                 v of the signature\n     * @param r                 r of the signature\n     * @param s                 s of the signature\n     * @param typeHashAndData   Type hash concatenated with data\n     * @return Signer's address\n     */\n    function recover(\n        bytes32 domainSeparator,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes memory typeHashAndData\n    ) internal pure returns (address) {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                keccak256(typeHashAndData)\n            )\n        );\n        return ECRecover.recover(digest, v, r, s);\n    }\n}\n\n// File: contracts/v2/EIP712Domain.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title EIP712 Domain\n */\ncontract EIP712Domain {\n    /**\n     * @dev EIP712 Domain Separator\n     */\n    bytes32 public DOMAIN_SEPARATOR;\n}\n\n// File: contracts/v2/EIP3009.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title EIP-3009\n * @notice Provide internal implementation for gas-abstracted transfers\n * @dev Contracts that inherit from this must wrap these with publicly\n * accessible functions, optionally adding modifiers where necessary\n */\nabstract contract EIP3009 is AbstractFiatTokenV2, EIP712Domain {\n    // keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")\n    bytes32\n        public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\n\n    // keccak256(\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")\n    bytes32\n        public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8;\n\n    // keccak256(\"CancelAuthorization(address authorizer,bytes32 nonce)\")\n    bytes32\n        public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\n\n    /**\n     * @dev authorizer address => nonce => bool (true if nonce is used)\n     */\n    mapping(address => mapping(bytes32 => bool)) private _authorizationStates;\n\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\n    event AuthorizationCanceled(\n        address indexed authorizer,\n        bytes32 indexed nonce\n    );\n\n    /**\n     * @notice Returns the state of an authorization\n     * @dev Nonces are randomly generated 32-byte data unique to the\n     * authorizer's address\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @return True if the nonce is used\n     */\n    function authorizationState(address authorizer, bytes32 nonce)\n        external\n        view\n        returns (bool)\n    {\n        return _authorizationStates[authorizer][nonce];\n    }\n\n    /**\n     * @notice Execute a transfer with a signed authorization\n     * @param from          Payer's address (Authorizer)\n     * @param to            Payee's address\n     * @param value         Amount to be transferred\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */\n    function _transferWithAuthorization(\n        address from,\n        address to,\n        uint256 value,\n        uint256 validAfter,\n        uint256 validBefore,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\n\n        bytes memory data = abi.encode(\n            TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\n            from,\n            to,\n            value,\n            validAfter,\n            validBefore,\n            nonce\n        );\n        require(\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == from,\n            \"FiatTokenV2: invalid signature\"\n        );\n\n        _markAuthorizationAsUsed(from, nonce);\n        _transfer(from, to, value);\n    }\n\n    /**\n     * @notice Receive a transfer with a signed authorization from the payer\n     * @dev This has an additional check to ensure that the payee's address\n     * matches the caller of this function to prevent front-running attacks.\n     * @param from          Payer's address (Authorizer)\n     * @param to            Payee's address\n     * @param value         Amount to be transferred\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */\n    function _receiveWithAuthorization(\n        address from,\n        address to,\n        uint256 value,\n        uint256 validAfter,\n        uint256 validBefore,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        require(to == msg.sender, \"FiatTokenV2: caller must be the payee\");\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\n\n        bytes memory data = abi.encode(\n            RECEIVE_WITH_AUTHORIZATION_TYPEHASH,\n            from,\n            to,\n            value,\n            validAfter,\n            validBefore,\n            nonce\n        );\n        require(\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == from,\n            \"FiatTokenV2: invalid signature\"\n        );\n\n        _markAuthorizationAsUsed(from, nonce);\n        _transfer(from, to, value);\n    }\n\n    /**\n     * @notice Attempt to cancel an authorization\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */\n    function _cancelAuthorization(\n        address authorizer,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        _requireUnusedAuthorization(authorizer, nonce);\n\n        bytes memory data = abi.encode(\n            CANCEL_AUTHORIZATION_TYPEHASH,\n            authorizer,\n            nonce\n        );\n        require(\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == authorizer,\n            \"FiatTokenV2: invalid signature\"\n        );\n\n        _authorizationStates[authorizer][nonce] = true;\n        emit AuthorizationCanceled(authorizer, nonce);\n    }\n\n    /**\n     * @notice Check that an authorization is unused\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     */\n    function _requireUnusedAuthorization(address authorizer, bytes32 nonce)\n        private\n        view\n    {\n        require(\n            !_authorizationStates[authorizer][nonce],\n            \"FiatTokenV2: authorization is used or canceled\"\n        );\n    }\n\n    /**\n     * @notice Check that authorization is valid\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     */\n    function _requireValidAuthorization(\n        address authorizer,\n        bytes32 nonce,\n        uint256 validAfter,\n        uint256 validBefore\n    ) private view {\n        require(\n            now > validAfter,\n            \"FiatTokenV2: authorization is not yet valid\"\n        );\n        require(now < validBefore, \"FiatTokenV2: authorization is expired\");\n        _requireUnusedAuthorization(authorizer, nonce);\n    }\n\n    /**\n     * @notice Mark an authorization as used\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     */\n    function _markAuthorizationAsUsed(address authorizer, bytes32 nonce)\n        private\n    {\n        _authorizationStates[authorizer][nonce] = true;\n        emit AuthorizationUsed(authorizer, nonce);\n    }\n}\n\n// File: contracts/v2/EIP2612.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title EIP-2612\n * @notice Provide internal implementation for gas-abstracted approvals\n */\nabstract contract EIP2612 is AbstractFiatTokenV2, EIP712Domain {\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\n    bytes32\n        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    mapping(address => uint256) private _permitNonces;\n\n    /**\n     * @notice Nonces for permit\n     * @param owner Token owner's address (Authorizer)\n     * @return Next nonce\n     */\n    function nonces(address owner) external view returns (uint256) {\n        return _permitNonces[owner];\n    }\n\n    /**\n     * @notice Verify a signed approval permit and execute if valid\n     * @param owner     Token owner's address (Authorizer)\n     * @param spender   Spender's address\n     * @param value     Amount of allowance\n     * @param deadline  The time at which this expires (unix time)\n     * @param v         v of the signature\n     * @param r         r of the signature\n     * @param s         s of the signature\n     */\n    function _permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        require(deadline >= now, \"FiatTokenV2: permit is expired\");\n\n        bytes memory data = abi.encode(\n            PERMIT_TYPEHASH,\n            owner,\n            spender,\n            value,\n            _permitNonces[owner]++,\n            deadline\n        );\n        require(\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\n            \"EIP2612: invalid signature\"\n        );\n\n        _approve(owner, spender, value);\n    }\n}\n\n// File: contracts/v2/FiatTokenV2.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n/**\n * @title FiatToken V2\n * @notice ERC20 Token backed by fiat reserves, version 2\n */\ncontract FiatTokenV2 is FiatTokenV1_1, EIP3009, EIP2612 {\n    uint8 internal _initializedVersion;\n\n    /**\n     * @notice Initialize v2\n     * @param newName   New token name\n     */\n    function initializeV2(string calldata newName) external {\n        // solhint-disable-next-line reason-string\n        require(initialized && _initializedVersion == 0);\n        name = newName;\n        DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(newName, \"2\");\n        _initializedVersion = 1;\n    }\n\n    /**\n     * @notice Increase the allowance by a given increment\n     * @param spender   Spender's address\n     * @param increment Amount of increase in allowance\n     * @return True if successful\n     */\n    function increaseAllowance(address spender, uint256 increment)\n        external\n        whenNotPaused\n        notBlacklisted(msg.sender)\n        notBlacklisted(spender)\n        returns (bool)\n    {\n        _increaseAllowance(msg.sender, spender, increment);\n        return true;\n    }\n\n    /**\n     * @notice Decrease the allowance by a given decrement\n     * @param spender   Spender's address\n     * @param decrement Amount of decrease in allowance\n     * @return True if successful\n     */\n    function decreaseAllowance(address spender, uint256 decrement)\n        external\n        whenNotPaused\n        notBlacklisted(msg.sender)\n        notBlacklisted(spender)\n        returns (bool)\n    {\n        _decreaseAllowance(msg.sender, spender, decrement);\n        return true;\n    }\n\n    /**\n     * @notice Execute a transfer with a signed authorization\n     * @param from          Payer's address (Authorizer)\n     * @param to            Payee's address\n     * @param value         Amount to be transferred\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */\n    function transferWithAuthorization(\n        address from,\n        address to,\n        uint256 value,\n        uint256 validAfter,\n        uint256 validBefore,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\n        _transferWithAuthorization(\n            from,\n            to,\n            value,\n            validAfter,\n            validBefore,\n            nonce,\n            v,\n            r,\n            s\n        );\n    }\n\n    /**\n     * @notice Receive a transfer with a signed authorization from the payer\n     * @dev This has an additional check to ensure that the payee's address\n     * matches the caller of this function to prevent front-running attacks.\n     * @param from          Payer's address (Authorizer)\n     * @param to            Payee's address\n     * @param value         Amount to be transferred\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */\n    function receiveWithAuthorization(\n        address from,\n        address to,\n        uint256 value,\n        uint256 validAfter,\n        uint256 validBefore,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\n        _receiveWithAuthorization(\n            from,\n            to,\n            value,\n            validAfter,\n            validBefore,\n            nonce,\n            v,\n            r,\n            s\n        );\n    }\n\n    /**\n     * @notice Attempt to cancel an authorization\n     * @dev Works only if the authorization is not yet used.\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */\n    function cancelAuthorization(\n        address authorizer,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external whenNotPaused {\n        _cancelAuthorization(authorizer, nonce, v, r, s);\n    }\n\n    /**\n     * @notice Update allowance with a signed permit\n     * @param owner       Token owner's address (Authorizer)\n     * @param spender     Spender's address\n     * @param value       Amount of allowance\n     * @param deadline    Expiration time, seconds since the epoch\n     * @param v           v of the signature\n     * @param r           r of the signature\n     * @param s           s of the signature\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external whenNotPaused notBlacklisted(owner) notBlacklisted(spender) {\n        _permit(owner, spender, value, deadline, v, r, s);\n    }\n\n    /**\n     * @notice Internal function to increase the allowance by a given increment\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @param increment Amount of increase\n     */\n    function _increaseAllowance(\n        address owner,\n        address spender,\n        uint256 increment\n    ) internal override {\n        _approve(owner, spender, allowed[owner][spender].add(increment));\n    }\n\n    /**\n     * @notice Internal function to decrease the allowance by a given decrement\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @param decrement Amount of decrease\n     */\n    function _decreaseAllowance(\n        address owner,\n        address spender,\n        uint256 decrement\n    ) internal override {\n        _approve(\n            owner,\n            spender,\n            allowed[owner][spender].sub(\n                decrement,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n    }\n}\n\n// File: contracts/v2/FiatTokenV2_1.sol\n\n/**\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npragma solidity 0.6.12;\n\n// solhint-disable func-name-mixedcase\n\n/**\n * @title FiatToken V2.1\n * @notice ERC20 Token backed by fiat reserves, version 2.1\n */\ncontract FiatTokenV2_1 is FiatTokenV2 {\n    /**\n     * @notice Initialize v2.1\n     * @param lostAndFound  The address to which the locked funds are sent\n     */\n    function initializeV2_1(address lostAndFound) external {\n        // solhint-disable-next-line reason-string\n        require(_initializedVersion == 1);\n\n        uint256 lockedAmount = balances[address(this)];\n        if (lockedAmount > 0) {\n            _transfer(address(this), lostAndFound, lockedAmount);\n        }\n        blacklisted[address(this)] = true;\n\n        _initializedVersion = 2;\n    }\n\n    /**\n     * @notice Version string for the EIP712 domain separator\n     * @return Version string\n     */\n    function version() external view returns (string memory) {\n        return \"2\";\n    }\n}"
          }
        ],
        "abi": [
          {
            "type": "constructor",
            "name": "",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": null,
            "outputs": null
          },
          {
            "type": "function",
            "name": "masterMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "initializeV2_1",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "lostAndFound",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "isMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "pause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [],
            "outputs": []
          },
          {
            "type": "function",
            "name": "unBlacklist",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "updateBlacklister",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_newBlacklister",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "allowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "cancelAuthorization",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "rescuer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "transferOwnership",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "paused",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "transfer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "totalSupply",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "removeMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "symbol",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "transferFrom",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "transferWithAuthorization",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validAfter",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validBefore",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "name",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "DOMAIN_SEPARATOR",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "minterAllowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "receiveWithAuthorization",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validAfter",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "validBefore",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "blacklister",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "isBlacklisted",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "authorizationState",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "version",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "nonces",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "mint",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "_amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "updateMasterMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_newMasterMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "decimals",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "updatePauser",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_newPauser",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "pauser",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "decreaseAllowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "decrement",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "approve",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "balanceOf",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "CANCEL_AUTHORIZATION_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "PERMIT_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "unpause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [],
            "outputs": []
          },
          {
            "type": "function",
            "name": "blacklist",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "initialize",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "tokenName",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              },
              {
                "name": "tokenSymbol",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              },
              {
                "name": "tokenCurrency",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              },
              {
                "name": "tokenDecimals",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "newMasterMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newPauser",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newBlacklister",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "rescueERC20",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "tokenContract",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "updateRescuer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newRescuer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "increaseAllowance",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "increment",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "permit",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "deadline",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "v",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              },
              {
                "name": "r",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              },
              {
                "name": "s",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "owner",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "configureMinter",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "minterAllowedAmount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "burn",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "_amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "currency",
            "constant": false,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "initializeV2",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "newName",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "event",
            "name": "OwnershipTransferred",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "previousOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "newOwner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Burn",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "burner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "PauserChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newAddress",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "RescuerChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newRescuer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Blacklisted",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Transfer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "from",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "MasterMinterChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newMasterMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Mint",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "to",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "amount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "MinterConfigured",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "minter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "minterAllowedAmount",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Approval",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "spender",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "value",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Unpause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [],
            "outputs": null
          },
          {
            "type": "event",
            "name": "BlacklisterChanged",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "newBlacklister",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "MinterRemoved",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "oldMinter",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "AuthorizationCanceled",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "UnBlacklisted",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Pause",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [],
            "outputs": null
          },
          {
            "type": "event",
            "name": "AuthorizationUsed",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "authorizer",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "nonce",
                "type": "bytes32",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "bytes"
                }
              }
            ],
            "outputs": null
          }
        ],
        "raw_abi": null,
        "states": [
          {
            "name": "balances",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000009",
            "indexed": false
          },
          {
            "name": "allowed",
            "type": "mapping (address => mapping (address => uint256))",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000a",
            "indexed": false
          },
          {
            "name": "_rescuer",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000e",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "DOMAIN_SEPARATOR",
            "type": "bytes32",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000f",
            "indexed": false,
            "simple_type": {
              "type": "bytes"
            }
          },
          {
            "name": "name",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000004",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          },
          {
            "name": "initialized",
            "type": "bool",
            "storage_location": "storage",
            "components": null,
            "offset": 160,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000008",
            "indexed": false,
            "simple_type": {
              "type": "bool"
            }
          },
          {
            "name": "minterAllowed",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000d",
            "indexed": false
          },
          {
            "name": "_owner",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "blacklister",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000002",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "blacklisted",
            "type": "mapping (address => bool)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000003",
            "indexed": false
          },
          {
            "name": "totalSupply_",
            "type": "uint256",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000b",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "_authorizationStates",
            "type": "mapping (address => mapping (bytes32 => bool))",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000010",
            "indexed": false
          },
          {
            "name": "_initializedVersion",
            "type": "uint8",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000012",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "paused",
            "type": "bool",
            "storage_location": "storage",
            "components": null,
            "offset": 160,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000001",
            "indexed": false,
            "simple_type": {
              "type": "bool"
            }
          },
          {
            "name": "symbol",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000005",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          },
          {
            "name": "masterMinter",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000008",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "minters",
            "type": "mapping (address => bool)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x000000000000000000000000000000000000000000000000000000000000000c",
            "indexed": false
          },
          {
            "name": "_permitNonces",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000011",
            "indexed": false
          },
          {
            "name": "pauser",
            "type": "address",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000001",
            "indexed": false,
            "simple_type": {
              "type": "address"
            }
          },
          {
            "name": "decimals",
            "type": "uint8",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000006",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "currency",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000007",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          }
        ]
      },
      "creation_block": 0,
      "creation_tx": "",
      "creator_address": "",
      "created_at": "2021-04-17T01:59:33Z",
      "number_of_watches": null,
      "language": "solidity",
      "in_project": false,
      "number_of_files": 1
    },
    {
      "id": "eth:1:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
      "contract_id": "eth:1:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
      "balance": "",
      "network_id": "1",
      "public": true,
      "export": false,
      "verified_by": "tenderly",
      "verification_date": null,
      "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
      "contract_name": "WETH9",
      "ens_domain": null,
      "type": "contract",
      "standard": "erc20",
      "standards": [
        "erc20"
      ],
      "token_data": {
        "symbol": "WETH",
        "name": "Wrapped Ether",
        "decimals": 18
      },
      "evm_version": "default",
      "compiler_version": "v0.4.19",
      "optimizations_used": false,
      "optimization_runs": 1000,
      "libraries": null,
      "data": {
        "main_contract": 0,
        "contract_info": [
          {
            "id": 0,
            "path": "Source.sol",
            "name": "Source.sol",
            "source": "/**\n *Submitted for verification at Etherscan.io on 2017-12-12\n*/\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}"
          }
        ],
        "abi": [
          {
            "type": "constructor",
            "name": "",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": null,
            "outputs": null
          },
          {
            "type": "function",
            "name": "balanceOf",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "name",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "totalSupply",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "approve",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "guy",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "symbol",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "string"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "transfer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "dst",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "withdraw",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": []
          },
          {
            "type": "function",
            "name": "decimals",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint8",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "deposit",
            "constant": false,
            "anonymous": false,
            "stateMutability": "payable",
            "inputs": [],
            "outputs": []
          },
          {
            "type": "function",
            "name": "transferFrom",
            "constant": false,
            "anonymous": false,
            "stateMutability": "nonpayable",
            "inputs": [
              {
                "name": "src",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "dst",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "bool"
                }
              }
            ]
          },
          {
            "type": "function",
            "name": "allowance",
            "constant": true,
            "anonymous": false,
            "stateMutability": "view",
            "inputs": [
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "address"
                }
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ]
          },
          {
            "type": "event",
            "name": "Deposit",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "dst",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Withdrawal",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "src",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Approval",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "src",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "guy",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          },
          {
            "type": "event",
            "name": "Transfer",
            "constant": false,
            "anonymous": false,
            "stateMutability": "",
            "inputs": [
              {
                "name": "src",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "dst",
                "type": "address",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": true,
                "simple_type": {
                  "type": "address"
                }
              },
              {
                "name": "wad",
                "type": "uint256",
                "storage_location": "default",
                "components": null,
                "offset": 0,
                "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "indexed": false,
                "simple_type": {
                  "type": "uint"
                }
              }
            ],
            "outputs": null
          }
        ],
        "raw_abi": null,
        "states": [
          {
            "name": "decimals",
            "type": "uint8",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000002",
            "indexed": false,
            "simple_type": {
              "type": "uint"
            }
          },
          {
            "name": "name",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          },
          {
            "name": "balanceOf",
            "type": "mapping (address => uint256)",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000003",
            "indexed": false
          },
          {
            "name": "allowance",
            "type": "mapping (address => mapping (address => uint256))",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000004",
            "indexed": false
          },
          {
            "name": "symbol",
            "type": "string",
            "storage_location": "storage",
            "components": null,
            "offset": 0,
            "index": "0x0000000000000000000000000000000000000000000000000000000000000001",
            "indexed": false,
            "simple_type": {
              "type": "string"
            }
          }
        ]
      },
      "creation_block": 0,
      "creation_tx": "",
      "creator_address": "",
      "created_at": "2022-08-04T18:11:15Z",
      "number_of_watches": null,
      "language": "solidity",
      "in_project": false,
      "number_of_files": 1
    }
  ],
  "generated_access_list": []
}
